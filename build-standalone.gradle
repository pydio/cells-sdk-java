plugins {
    id 'java'

    // Publish the generated resources as Maven Artifacts
    // See: https://docs.gradle.org/5.0/userguide/publishing_overview.html#publishing_overview
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

// Useful for Java only development
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

def sdkVersion = '0.4.6'
ext {
    githubUrl = 'https://github.com/pydio/cells-sdk-java.git'
}

// Also publish sources and Javadoc
java {
    // Temporary disable javadoc, they are broken after updating to java 17 and gradle 8.1
    // withJavadocJar()
    withSourcesJar()
}

// Skip integration tests by default
test {
    if (System.properties['test.profile'] != 'integration') {
        exclude '**/integration/*'
    }
}

// Pre-create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "cdujeu"
            name "Charles du Jeu"
            email "charles@ajaxplorer.info"
        }
        developer {
            id "bsinou"
            name "Bruno Sinou"
            email "bruno.sinou@posteo.de"
        }
    }

    scm {
        url githubUrl
    }
}

publishing {
    publications {
        CellsSdk(MavenPublication) {
            from components.java
            groupId 'com.pydio.cells'
            artifactId 'cells-sdk-java'
            version = sdkVersion

            pom.withXml {
                def root = asNode
                root.appendNode('description', 'Provide base java libraries to communicate with the Pydio Cells stack')
                root.appendNode('name', 'Cells SDK for Java')
                root.appendNode('url', 'https://pydio.com')
                root.children().last() + pomConfig
            }
        }
    }
}

jar {
    manifest {
        attributes('Specification-Title': 'Cells SDK for Java',
                'Specification-Version': '4.4',
                'Specification-Vendor': 'Abstrium SAS',
                'Implementation-Title': project.name,
                'Implementation-Vendor': 'Abstrium SAS',
                'Implementation-Version': sdkVersion)
    }
}

dependencies {

    implementation libs.okhttp
    implementation libs.logging.interceptor

    implementation libs.threetenbp

    // Updating this cause IdToken decoding failure
    implementation libs.commons.codec

    // Used to store info as gson blobs in SQLite
    implementation libs.google.gson
    // gsonfire library adds some more feature (like date de-serialization) to the basic GSON library
    // It is used by the swagger generated SDK code.
    implementation libs.gson.fire

    // Necessary when developing / building with a JDK 11
    implementation libs.javax.annotation.api
    // https://mvnrepository.com/artifact/jakarta.ws.rs/jakarta.ws.rs-api
    implementation libs.jakarta.ws.rs.api
    // Necessary for swagger (generation of the openapi package from Cells spec)
    implementation libs.swagger.annotations
    // Add the @Nullable annotation
    implementation libs.jsr305
    // implementation 'org.jetbrains:annotations:23.0.0'
    implementation libs.jackson.databind

    // JUnit test framework
    testImplementation libs.junit

    // S3 transport is configured in calling layer and use a specific either Java or Android implementation.
    // See cells-android-client or cells-java-client repos.
}

// Helper tasks to debug

// Uncomment this to get more messages during build for code cleaning sprints.
// tasks.withType(JavaCompile) {
//    options.compilerArgs << '-Xlint:unchecked'
//    options.deprecation = true
// }

tasks.register('printSourceSetInformation') {
    doLast {
        sourceSets.each { srcSet ->
            println "[" + srcSet.name + "]"
            print "-->Source directories: " + srcSet.allJava.srcDirs + "\n"
            print "-->Output directories: " + srcSet.output.classesDirs.files + "\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  " + it.path + "\n"
            }
            println ""
        }
    }
}
