plugins {
    // Enable test as a stand alone project
    id 'java'

    // Publish the generated resources as Maven Artifacts
    // See: https://docs.gradle.org/5.0/userguide/publishing_overview.html#publishing_overview
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

// Useful for Java only development
java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

def sdkVersion = '0.3.0-dev'
ext {
    githubUrl = 'https://github.com/pydio/cells-sdk-java.git'
}

// Also publish sources and Javadoc
java {
    withJavadocJar()
    withSourcesJar()
}

// Skip integration tests by default
test {
    if (System.properties['test.profile'] != 'integration') {
        exclude '**/integration/*'
    }
}

// Pre-create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "cdujeu"
            name "Charles du Jeu"
            email "charles@ajaxplorer.info"
        }

        developer {
            id "bsinou"
            name "Bruno Sinou"
            email "bruno.sinou@posteo.de"
        }

    }
    
    scm {
       url githubUrl
    }
}

publishing {
    publications {
        CellsSdk(MavenPublication) {
            from components.java
            groupId 'com.pydio.cells'
            artifactId 'cells-sdk-java'
            version = sdkVersion
            
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Provide base java libraries to communicate with the Pydio Cells stack')
                root.appendNode('name', 'Cells SDK for Java')
                root.appendNode('url', 'https://pydio.com')
                root.children().last() + pomConfig
            }
        }
    }
}

jar {
    manifest {
        attributes('Specification-Title': 'Cells SDK for Java',
                   'Specification-Version': '3.0',
                   'Specification-Vendor': 'Abstrium SAS',
                   'Implementation-Title': project.name,
                   'Implementation-Vendor': 'Abstrium SAS',
                   'Implementation-Version': sdkVersion)
    }
}

dependencies {

    // These dependencies are used internally and not exposed to consumers
    // on their own compile classpath (otherwise, use "api").
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.threeten:threetenbp:1.5.2'
    // Necessary for swagger (generation of the openapi package from Cells spec)
    implementation 'io.swagger:swagger-annotations:1.6.3'

    // Used to store info as gson blobs in SQLite 
    implementation 'io.gsonfire:gson-fire:1.8.5'
    // Old library that is used to manipulate JSON objects
    implementation 'com.metaparadigm:json-rpc:1.0'

    // Can we switch from swagger-codegen v2 to branch v3 ? 
    // This is necessary to update okhttp to the more recent okhttp3 (v3, v4) libraries
    // See this similar issue: https://github.com/launchdarkly/api-client-java/issues/8
    // implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.squareup.okhttp:logging-interceptor:2.7.5'


    // Necessary when developing / building with a JDK 11
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    // Enable use of @Nullable and such annotations
    implementation 'org.jetbrains:annotations:21.0.1'

    // Updating this cause IdToken decoding failure
    // implementation 'commons-codec:commons-codec:20041127.091804'
    implementation 'commons-codec:commons-codec:1.15'

    // implementation group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
    // implementation group: 'clojure-interop', name: 'com.amazonaws.util', version: '1.0.0'

    // JUnit test framework
    testImplementation 'junit:junit:4.13.2'
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'

    // S3 transport is configured in calling layer 
    // _and use a specific either Java or Android implementation_. 
    // See cells-android-client or cells-java-client repos.

}

// Helper tasks to debug

// Uncomment this to get more messages during build during code cleaning sprints.
// tasks.withType(JavaCompile) {
//    options.compilerArgs << '-Xlint:unchecked'
//    options.deprecation = true
// }

task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each { 
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}


