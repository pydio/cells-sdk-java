/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.cells.openapi.ApiCallback;
import com.pydio.cells.openapi.ApiClient;
import com.pydio.cells.openapi.ApiException;
import com.pydio.cells.openapi.ApiResponse;
import com.pydio.cells.openapi.Configuration;
import com.pydio.cells.openapi.Pair;
import com.pydio.cells.openapi.model.RestCell;
import com.pydio.cells.openapi.model.RestDeleteCellResponse;
import com.pydio.cells.openapi.model.RestDeleteShareLinkResponse;
import com.pydio.cells.openapi.model.RestListSharedResourcesRequest;
import com.pydio.cells.openapi.model.RestListSharedResourcesResponse;
import com.pydio.cells.openapi.model.RestPutCellRequest;
import com.pydio.cells.openapi.model.RestPutShareLinkRequest;
import com.pydio.cells.openapi.model.RestShareLink;
import com.pydio.cells.openapi.model.RestUpdateSharePoliciesRequest;
import com.pydio.cells.openapi.model.RestUpdateSharePoliciesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShareServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShareServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShareServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCell
     *
     * @param uuid      Cell Uuid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCellCall(String uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/share/cell/{Uuid}"
                .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCellValidateBeforeCall(String uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteCell(Async)");
        }

        return deleteCellCall(uuid, _callback);

    }

    /**
     * Delete a share room
     *
     * @param uuid Cell Uuid (required)
     * @return RestDeleteCellResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestDeleteCellResponse deleteCell(String uuid) throws ApiException {
        ApiResponse<RestDeleteCellResponse> localVarResp = deleteCellWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Delete a share room
     *
     * @param uuid Cell Uuid (required)
     * @return ApiResponse&lt;RestDeleteCellResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestDeleteCellResponse> deleteCellWithHttpInfo(String uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteCellValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<RestDeleteCellResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a share room (asynchronously)
     *
     * @param uuid      Cell Uuid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCellAsync(String uuid, final ApiCallback<RestDeleteCellResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCellValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<RestDeleteCellResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteShareLink
     *
     * @param uuid      Id of Link to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteShareLinkCall(String uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/share/link/{Uuid}"
                .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteShareLinkValidateBeforeCall(String uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteShareLink(Async)");
        }

        return deleteShareLinkCall(uuid, _callback);

    }

    /**
     * Delete Share Link
     *
     * @param uuid Id of Link to delete (required)
     * @return RestDeleteShareLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestDeleteShareLinkResponse deleteShareLink(String uuid) throws ApiException {
        ApiResponse<RestDeleteShareLinkResponse> localVarResp = deleteShareLinkWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Delete Share Link
     *
     * @param uuid Id of Link to delete (required)
     * @return ApiResponse&lt;RestDeleteShareLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestDeleteShareLinkResponse> deleteShareLinkWithHttpInfo(String uuid) throws ApiException {
        okhttp3.Call localVarCall = deleteShareLinkValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<RestDeleteShareLinkResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Share Link (asynchronously)
     *
     * @param uuid      Id of Link to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteShareLinkAsync(String uuid, final ApiCallback<RestDeleteShareLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteShareLinkValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<RestDeleteShareLinkResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getCell
     *
     * @param uuid      Cell Uuid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCellCall(String uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/share/cell/{Uuid}"
                .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCellValidateBeforeCall(String uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getCell(Async)");
        }

        return getCellCall(uuid, _callback);

    }

    /**
     * Load a share room
     *
     * @param uuid Cell Uuid (required)
     * @return RestCell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestCell getCell(String uuid) throws ApiException {
        ApiResponse<RestCell> localVarResp = getCellWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Load a share room
     *
     * @param uuid Cell Uuid (required)
     * @return ApiResponse&lt;RestCell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestCell> getCellWithHttpInfo(String uuid) throws ApiException {
        okhttp3.Call localVarCall = getCellValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<RestCell>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a share room (asynchronously)
     *
     * @param uuid      Cell Uuid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCellAsync(String uuid, final ApiCallback<RestCell> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCellValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<RestCell>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getShareLink
     *
     * @param uuid      Link Uuid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getShareLinkCall(String uuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/share/link/{Uuid}"
                .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShareLinkValidateBeforeCall(String uuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getShareLink(Async)");
        }

        return getShareLinkCall(uuid, _callback);

    }

    /**
     * Load a share link with all infos
     *
     * @param uuid Link Uuid (required)
     * @return RestShareLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestShareLink getShareLink(String uuid) throws ApiException {
        ApiResponse<RestShareLink> localVarResp = getShareLinkWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * Load a share link with all infos
     *
     * @param uuid Link Uuid (required)
     * @return ApiResponse&lt;RestShareLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestShareLink> getShareLinkWithHttpInfo(String uuid) throws ApiException {
        okhttp3.Call localVarCall = getShareLinkValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<RestShareLink>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a share link with all infos (asynchronously)
     *
     * @param uuid      Link Uuid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getShareLinkAsync(String uuid, final ApiCallback<RestShareLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShareLinkValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<RestShareLink>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listSharedResources
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSharedResourcesCall(RestListSharedResourcesRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/share/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSharedResourcesValidateBeforeCall(RestListSharedResourcesRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listSharedResources(Async)");
        }

        return listSharedResourcesCall(body, _callback);

    }

    /**
     * List Shared Resources for current user or all users
     *
     * @param body (required)
     * @return RestListSharedResourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestListSharedResourcesResponse listSharedResources(RestListSharedResourcesRequest body) throws ApiException {
        ApiResponse<RestListSharedResourcesResponse> localVarResp = listSharedResourcesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * List Shared Resources for current user or all users
     *
     * @param body (required)
     * @return ApiResponse&lt;RestListSharedResourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestListSharedResourcesResponse> listSharedResourcesWithHttpInfo(RestListSharedResourcesRequest body) throws ApiException {
        okhttp3.Call localVarCall = listSharedResourcesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestListSharedResourcesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Shared Resources for current user or all users (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSharedResourcesAsync(RestListSharedResourcesRequest body, final ApiCallback<RestListSharedResourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSharedResourcesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestListSharedResourcesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for putCell
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putCellCall(RestPutCellRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/share/cell";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCellValidateBeforeCall(RestPutCellRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putCell(Async)");
        }

        return putCellCall(body, _callback);

    }

    /**
     * Put or Create a share room
     *
     * @param body (required)
     * @return RestCell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestCell putCell(RestPutCellRequest body) throws ApiException {
        ApiResponse<RestCell> localVarResp = putCellWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Put or Create a share room
     *
     * @param body (required)
     * @return ApiResponse&lt;RestCell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestCell> putCellWithHttpInfo(RestPutCellRequest body) throws ApiException {
        okhttp3.Call localVarCall = putCellValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestCell>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put or Create a share room (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putCellAsync(RestPutCellRequest body, final ApiCallback<RestCell> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCellValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestCell>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for putShareLink
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putShareLinkCall(RestPutShareLinkRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/share/link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putShareLinkValidateBeforeCall(RestPutShareLinkRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putShareLink(Async)");
        }

        return putShareLinkCall(body, _callback);

    }

    /**
     * Put or Create a share room
     *
     * @param body (required)
     * @return RestShareLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestShareLink putShareLink(RestPutShareLinkRequest body) throws ApiException {
        ApiResponse<RestShareLink> localVarResp = putShareLinkWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Put or Create a share room
     *
     * @param body (required)
     * @return ApiResponse&lt;RestShareLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestShareLink> putShareLinkWithHttpInfo(RestPutShareLinkRequest body) throws ApiException {
        okhttp3.Call localVarCall = putShareLinkValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestShareLink>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Put or Create a share room (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putShareLinkAsync(RestPutShareLinkRequest body, final ApiCallback<RestShareLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = putShareLinkValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestShareLink>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateSharePolicies
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSharePoliciesCall(RestUpdateSharePoliciesRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/share/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSharePoliciesValidateBeforeCall(RestUpdateSharePoliciesRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSharePolicies(Async)");
        }

        return updateSharePoliciesCall(body, _callback);

    }

    /**
     * Updates policies associated to the underlying workspace for a Cell or a ShareLink
     *
     * @param body (required)
     * @return RestUpdateSharePoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestUpdateSharePoliciesResponse updateSharePolicies(RestUpdateSharePoliciesRequest body) throws ApiException {
        ApiResponse<RestUpdateSharePoliciesResponse> localVarResp = updateSharePoliciesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Updates policies associated to the underlying workspace for a Cell or a ShareLink
     *
     * @param body (required)
     * @return ApiResponse&lt;RestUpdateSharePoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestUpdateSharePoliciesResponse> updateSharePoliciesWithHttpInfo(RestUpdateSharePoliciesRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateSharePoliciesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestUpdateSharePoliciesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates policies associated to the underlying workspace for a Cell or a ShareLink (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateSharePoliciesAsync(RestUpdateSharePoliciesRequest body, final ApiCallback<RestUpdateSharePoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSharePoliciesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestUpdateSharePoliciesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
