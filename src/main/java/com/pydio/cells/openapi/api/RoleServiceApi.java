/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.cells.openapi.ApiCallback;
import com.pydio.cells.openapi.ApiClient;
import com.pydio.cells.openapi.ApiException;
import com.pydio.cells.openapi.ApiResponse;
import com.pydio.cells.openapi.Configuration;
import com.pydio.cells.openapi.Pair;
import com.pydio.cells.openapi.model.IdmRole;
import com.pydio.cells.openapi.model.RestRolesCollection;
import com.pydio.cells.openapi.model.RestSearchRoleRequest;
import com.pydio.cells.openapi.model.SetRoleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoleServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteRole
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/role/{Uuid}"
            .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Label", label));
        }

        if (isTeam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsTeam", isTeam));
        }

        if (groupRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupRole", groupRole));
        }

        if (userRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserRole", userRole));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastUpdated", lastUpdated));
        }

        if (autoApplies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AutoApplies", autoApplies));
        }

        if (policiesContextEditable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PoliciesContextEditable", policiesContextEditable));
        }

        if (forceOverride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceOverride", forceOverride));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling deleteRole(Async)");
        }

        return deleteRoleCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride, _callback);

    }

    /**
     * Delete a Role by ID
     * 
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @return IdmRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public IdmRole deleteRole(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride) throws ApiException {
        ApiResponse<IdmRole> localVarResp = deleteRoleWithHttpInfo(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride);
        return localVarResp.getData();
    }

    /**
     * Delete a Role by ID
     * 
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @return ApiResponse&lt;IdmRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdmRole> deleteRoleWithHttpInfo(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride, null);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Role by ID (asynchronously)
     * 
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride, final ApiCallback<IdmRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride, _callback);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRole
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCall(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/role/{Uuid}"
            .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Label", label));
        }

        if (isTeam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsTeam", isTeam));
        }

        if (groupRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupRole", groupRole));
        }

        if (userRole != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserRole", userRole));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastUpdated", lastUpdated));
        }

        if (autoApplies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AutoApplies", autoApplies));
        }

        if (policiesContextEditable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PoliciesContextEditable", policiesContextEditable));
        }

        if (forceOverride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceOverride", forceOverride));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getRole(Async)");
        }

        return getRoleCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride, _callback);

    }

    /**
     * Get a Role by ID
     * 
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @return IdmRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public IdmRole getRole(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride) throws ApiException {
        ApiResponse<IdmRole> localVarResp = getRoleWithHttpInfo(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride);
        return localVarResp.getData();
    }

    /**
     * Get a Role by ID
     * 
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @return ApiResponse&lt;IdmRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdmRole> getRoleWithHttpInfo(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride, null);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Role by ID (asynchronously)
     * 
     * @param uuid Unique identifier of this role (required)
     * @param label Label of this role. (optional)
     * @param isTeam Whether this role represents a user team or not. (optional)
     * @param groupRole Whether this role is attached to a Group object. (optional)
     * @param userRole Whether this role is attached to a User object. (optional)
     * @param lastUpdated Last modification date of the role. (optional)
     * @param autoApplies List of profiles (standard, shared, admin) on which the role will be automatically applied. (optional)
     * @param policiesContextEditable Whether the policies resolve into an editable state. (optional)
     * @param forceOverride Is used in a stack of roles, this one will always be applied last. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAsync(String uuid, String label, Boolean isTeam, Boolean groupRole, Boolean userRole, Integer lastUpdated, List<String> autoApplies, Boolean policiesContextEditable, Boolean forceOverride, final ApiCallback<IdmRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleValidateBeforeCall(uuid, label, isTeam, groupRole, userRole, lastUpdated, autoApplies, policiesContextEditable, forceOverride, _callback);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRoles
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRolesCall(RestSearchRoleRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRolesValidateBeforeCall(RestSearchRoleRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchRoles(Async)");
        }

        return searchRolesCall(body, _callback);

    }

    /**
     * Search Roles
     * 
     * @param body  (required)
     * @return RestRolesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestRolesCollection searchRoles(RestSearchRoleRequest body) throws ApiException {
        ApiResponse<RestRolesCollection> localVarResp = searchRolesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Search Roles
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestRolesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestRolesCollection> searchRolesWithHttpInfo(RestSearchRoleRequest body) throws ApiException {
        okhttp3.Call localVarCall = searchRolesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestRolesCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Roles (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRolesAsync(RestSearchRoleRequest body, final ApiCallback<RestRolesCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRolesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestRolesCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRole
     * @param uuid Unique identifier of this role (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleCall(String uuid, SetRoleRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/role/{Uuid}"
            .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRoleValidateBeforeCall(String uuid, SetRoleRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling setRole(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setRole(Async)");
        }

        return setRoleCall(uuid, body, _callback);

    }

    /**
     * Create or update a Role
     * 
     * @param uuid Unique identifier of this role (required)
     * @param body  (required)
     * @return IdmRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public IdmRole setRole(String uuid, SetRoleRequest body) throws ApiException {
        ApiResponse<IdmRole> localVarResp = setRoleWithHttpInfo(uuid, body);
        return localVarResp.getData();
    }

    /**
     * Create or update a Role
     * 
     * @param uuid Unique identifier of this role (required)
     * @param body  (required)
     * @return ApiResponse&lt;IdmRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdmRole> setRoleWithHttpInfo(String uuid, SetRoleRequest body) throws ApiException {
        okhttp3.Call localVarCall = setRoleValidateBeforeCall(uuid, body, null);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a Role (asynchronously)
     * 
     * @param uuid Unique identifier of this role (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleAsync(String uuid, SetRoleRequest body, final ApiCallback<IdmRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRoleValidateBeforeCall(uuid, body, _callback);
        Type localVarReturnType = new TypeToken<IdmRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
