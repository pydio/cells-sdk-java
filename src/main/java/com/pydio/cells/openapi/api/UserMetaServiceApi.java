/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.api;

import com.pydio.cells.openapi.ApiCallback;
import com.pydio.cells.openapi.ApiClient;
import com.pydio.cells.openapi.ApiException;
import com.pydio.cells.openapi.ApiResponse;
import com.pydio.cells.openapi.Configuration;
import com.pydio.cells.openapi.Pair;
import com.pydio.cells.openapi.ProgressRequestBody;
import com.pydio.cells.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pydio.cells.openapi.model.IdmSearchUserMetaRequest;
import com.pydio.cells.openapi.model.IdmUpdateUserMetaNamespaceRequest;
import com.pydio.cells.openapi.model.IdmUpdateUserMetaNamespaceResponse;
import com.pydio.cells.openapi.model.IdmUpdateUserMetaRequest;
import com.pydio.cells.openapi.model.IdmUpdateUserMetaResponse;
import com.pydio.cells.openapi.model.RestBulkMetaResponse;
import com.pydio.cells.openapi.model.RestDeleteUserMetaTagsResponse;
import com.pydio.cells.openapi.model.RestError;
import com.pydio.cells.openapi.model.RestListUserMetaTagsResponse;
import com.pydio.cells.openapi.model.RestPutUserMetaTagRequest;
import com.pydio.cells.openapi.model.RestPutUserMetaTagResponse;
import com.pydio.cells.openapi.model.RestUserBookmarksRequest;
import com.pydio.cells.openapi.model.RestUserMetaCollection;
import com.pydio.cells.openapi.model.RestUserMetaNamespaceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserMetaServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserMetaServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserMetaServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUserMetaTags
     * @param namespace Delete tags from this namespace (required)
     * @param tags Delete this tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserMetaTagsCall(String namespace, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-meta/tags/{Namespace}/{Tags}"
            .replaceAll("\\{" + "Namespace" + "\\}", localVarApiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "Tags" + "\\}", localVarApiClient.escapeString(tags.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserMetaTagsValidateBeforeCall(String namespace, String tags, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling deleteUserMetaTags(Async)");
        }
        
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling deleteUserMetaTags(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserMetaTagsCall(namespace, tags, _callback);
        return localVarCall;

    }

    /**
     * Delete one or all tags for a given namespace (use * for all tags)
     * 
     * @param namespace Delete tags from this namespace (required)
     * @param tags Delete this tag (required)
     * @return RestDeleteUserMetaTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestDeleteUserMetaTagsResponse deleteUserMetaTags(String namespace, String tags) throws ApiException {
        ApiResponse<RestDeleteUserMetaTagsResponse> localVarResp = deleteUserMetaTagsWithHttpInfo(namespace, tags);
        return localVarResp.getData();
    }

    /**
     * Delete one or all tags for a given namespace (use * for all tags)
     * 
     * @param namespace Delete tags from this namespace (required)
     * @param tags Delete this tag (required)
     * @return ApiResponse&lt;RestDeleteUserMetaTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestDeleteUserMetaTagsResponse> deleteUserMetaTagsWithHttpInfo(String namespace, String tags) throws ApiException {
        okhttp3.Call localVarCall = deleteUserMetaTagsValidateBeforeCall(namespace, tags, null);
        Type localVarReturnType = new TypeToken<RestDeleteUserMetaTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete one or all tags for a given namespace (use * for all tags) (asynchronously)
     * 
     * @param namespace Delete tags from this namespace (required)
     * @param tags Delete this tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserMetaTagsAsync(String namespace, String tags, final ApiCallback<RestDeleteUserMetaTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserMetaTagsValidateBeforeCall(namespace, tags, _callback);
        Type localVarReturnType = new TypeToken<RestDeleteUserMetaTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserMetaNamespace
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserMetaNamespaceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-meta/namespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserMetaNamespaceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listUserMetaNamespaceCall(_callback);
        return localVarCall;

    }

    /**
     * List defined meta namespaces
     * 
     * @return RestUserMetaNamespaceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestUserMetaNamespaceCollection listUserMetaNamespace() throws ApiException {
        ApiResponse<RestUserMetaNamespaceCollection> localVarResp = listUserMetaNamespaceWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List defined meta namespaces
     * 
     * @return ApiResponse&lt;RestUserMetaNamespaceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestUserMetaNamespaceCollection> listUserMetaNamespaceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listUserMetaNamespaceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestUserMetaNamespaceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List defined meta namespaces (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserMetaNamespaceAsync(final ApiCallback<RestUserMetaNamespaceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserMetaNamespaceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestUserMetaNamespaceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserMetaTags
     * @param namespace List user meta tags for this namespace (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserMetaTagsCall(String namespace, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-meta/tags/{Namespace}"
            .replaceAll("\\{" + "Namespace" + "\\}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserMetaTagsValidateBeforeCall(String namespace, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling listUserMetaTags(Async)");
        }
        

        okhttp3.Call localVarCall = listUserMetaTagsCall(namespace, _callback);
        return localVarCall;

    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace List user meta tags for this namespace (required)
     * @return RestListUserMetaTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestListUserMetaTagsResponse listUserMetaTags(String namespace) throws ApiException {
        ApiResponse<RestListUserMetaTagsResponse> localVarResp = listUserMetaTagsWithHttpInfo(namespace);
        return localVarResp.getData();
    }

    /**
     * List Tags for a given namespace
     * 
     * @param namespace List user meta tags for this namespace (required)
     * @return ApiResponse&lt;RestListUserMetaTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestListUserMetaTagsResponse> listUserMetaTagsWithHttpInfo(String namespace) throws ApiException {
        okhttp3.Call localVarCall = listUserMetaTagsValidateBeforeCall(namespace, null);
        Type localVarReturnType = new TypeToken<RestListUserMetaTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Tags for a given namespace (asynchronously)
     * 
     * @param namespace List user meta tags for this namespace (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserMetaTagsAsync(String namespace, final ApiCallback<RestListUserMetaTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserMetaTagsValidateBeforeCall(namespace, _callback);
        Type localVarReturnType = new TypeToken<RestListUserMetaTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putUserMetaTag
     * @param namespace Add a tag value for this namespace (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putUserMetaTagCall(String namespace, RestPutUserMetaTagRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/tags/{Namespace}"
            .replaceAll("\\{" + "Namespace" + "\\}", localVarApiClient.escapeString(namespace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putUserMetaTagValidateBeforeCall(String namespace, RestPutUserMetaTagRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling putUserMetaTag(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putUserMetaTag(Async)");
        }
        

        okhttp3.Call localVarCall = putUserMetaTagCall(namespace, body, _callback);
        return localVarCall;

    }

    /**
     * Add a new value to Tags for a given namespace
     * 
     * @param namespace Add a tag value for this namespace (required)
     * @param body  (required)
     * @return RestPutUserMetaTagResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestPutUserMetaTagResponse putUserMetaTag(String namespace, RestPutUserMetaTagRequest body) throws ApiException {
        ApiResponse<RestPutUserMetaTagResponse> localVarResp = putUserMetaTagWithHttpInfo(namespace, body);
        return localVarResp.getData();
    }

    /**
     * Add a new value to Tags for a given namespace
     * 
     * @param namespace Add a tag value for this namespace (required)
     * @param body  (required)
     * @return ApiResponse&lt;RestPutUserMetaTagResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestPutUserMetaTagResponse> putUserMetaTagWithHttpInfo(String namespace, RestPutUserMetaTagRequest body) throws ApiException {
        okhttp3.Call localVarCall = putUserMetaTagValidateBeforeCall(namespace, body, null);
        Type localVarReturnType = new TypeToken<RestPutUserMetaTagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new value to Tags for a given namespace (asynchronously)
     * 
     * @param namespace Add a tag value for this namespace (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putUserMetaTagAsync(String namespace, RestPutUserMetaTagRequest body, final ApiCallback<RestPutUserMetaTagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putUserMetaTagValidateBeforeCall(namespace, body, _callback);
        Type localVarReturnType = new TypeToken<RestPutUserMetaTagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchUserMeta
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserMetaCall(IdmSearchUserMetaRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUserMetaValidateBeforeCall(IdmSearchUserMetaRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchUserMeta(Async)");
        }
        

        okhttp3.Call localVarCall = searchUserMetaCall(body, _callback);
        return localVarCall;

    }

    /**
     * Search a list of meta by node Id or by User id and by namespace
     * 
     * @param body  (required)
     * @return RestUserMetaCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestUserMetaCollection searchUserMeta(IdmSearchUserMetaRequest body) throws ApiException {
        ApiResponse<RestUserMetaCollection> localVarResp = searchUserMetaWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Search a list of meta by node Id or by User id and by namespace
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestUserMetaCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestUserMetaCollection> searchUserMetaWithHttpInfo(IdmSearchUserMetaRequest body) throws ApiException {
        okhttp3.Call localVarCall = searchUserMetaValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestUserMetaCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search a list of meta by node Id or by User id and by namespace (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchUserMetaAsync(IdmSearchUserMetaRequest body, final ApiCallback<RestUserMetaCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUserMetaValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestUserMetaCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserMeta
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserMetaCall(IdmUpdateUserMetaRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserMetaValidateBeforeCall(IdmUpdateUserMetaRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserMeta(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserMetaCall(body, _callback);
        return localVarCall;

    }

    /**
     * Update/delete user meta
     * 
     * @param body  (required)
     * @return IdmUpdateUserMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public IdmUpdateUserMetaResponse updateUserMeta(IdmUpdateUserMetaRequest body) throws ApiException {
        ApiResponse<IdmUpdateUserMetaResponse> localVarResp = updateUserMetaWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Update/delete user meta
     * 
     * @param body  (required)
     * @return ApiResponse&lt;IdmUpdateUserMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdmUpdateUserMetaResponse> updateUserMetaWithHttpInfo(IdmUpdateUserMetaRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateUserMetaValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update/delete user meta (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserMetaAsync(IdmUpdateUserMetaRequest body, final ApiCallback<IdmUpdateUserMetaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserMetaValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserMetaNamespace
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserMetaNamespaceCall(IdmUpdateUserMetaNamespaceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/namespace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserMetaNamespaceValidateBeforeCall(IdmUpdateUserMetaNamespaceRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserMetaNamespace(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserMetaNamespaceCall(body, _callback);
        return localVarCall;

    }

    /**
     * Admin: update namespaces
     * 
     * @param body  (required)
     * @return IdmUpdateUserMetaNamespaceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public IdmUpdateUserMetaNamespaceResponse updateUserMetaNamespace(IdmUpdateUserMetaNamespaceRequest body) throws ApiException {
        ApiResponse<IdmUpdateUserMetaNamespaceResponse> localVarResp = updateUserMetaNamespaceWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Admin: update namespaces
     * 
     * @param body  (required)
     * @return ApiResponse&lt;IdmUpdateUserMetaNamespaceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdmUpdateUserMetaNamespaceResponse> updateUserMetaNamespaceWithHttpInfo(IdmUpdateUserMetaNamespaceRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateUserMetaNamespaceValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaNamespaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Admin: update namespaces (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserMetaNamespaceAsync(IdmUpdateUserMetaNamespaceRequest body, final ApiCallback<IdmUpdateUserMetaNamespaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserMetaNamespaceValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<IdmUpdateUserMetaNamespaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userBookmarks
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userBookmarksCall(RestUserBookmarksRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user-meta/bookmarks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userBookmarksValidateBeforeCall(RestUserBookmarksRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userBookmarks(Async)");
        }
        

        okhttp3.Call localVarCall = userBookmarksCall(body, _callback);
        return localVarCall;

    }

    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * 
     * @param body  (required)
     * @return RestBulkMetaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestBulkMetaResponse userBookmarks(RestUserBookmarksRequest body) throws ApiException {
        ApiResponse<RestBulkMetaResponse> localVarResp = userBookmarksWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestBulkMetaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestBulkMetaResponse> userBookmarksWithHttpInfo(RestUserBookmarksRequest body) throws ApiException {
        okhttp3.Call localVarCall = userBookmarksValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestBulkMetaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userBookmarksAsync(RestUserBookmarksRequest body, final ApiCallback<RestBulkMetaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userBookmarksValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestBulkMetaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
