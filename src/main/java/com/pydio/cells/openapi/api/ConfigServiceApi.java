/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.cells.openapi.ApiCallback;
import com.pydio.cells.openapi.ApiClient;
import com.pydio.cells.openapi.ApiException;
import com.pydio.cells.openapi.ApiResponse;
import com.pydio.cells.openapi.Configuration;
import com.pydio.cells.openapi.Pair;
import com.pydio.cells.openapi.model.ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue;
import com.pydio.cells.openapi.model.CtlService;
import com.pydio.cells.openapi.model.DataSourceObjectDescription;
import com.pydio.cells.openapi.model.EncryptionAdminCreateKeyRequest;
import com.pydio.cells.openapi.model.EncryptionAdminCreateKeyResponse;
import com.pydio.cells.openapi.model.EncryptionAdminDeleteKeyRequest;
import com.pydio.cells.openapi.model.EncryptionAdminDeleteKeyResponse;
import com.pydio.cells.openapi.model.EncryptionAdminExportKeyRequest;
import com.pydio.cells.openapi.model.EncryptionAdminExportKeyResponse;
import com.pydio.cells.openapi.model.EncryptionAdminImportKeyRequest;
import com.pydio.cells.openapi.model.EncryptionAdminImportKeyResponse;
import com.pydio.cells.openapi.model.EncryptionAdminListKeysRequest;
import com.pydio.cells.openapi.model.EncryptionAdminListKeysResponse;
import com.pydio.cells.openapi.model.ObjectDataSource;
import com.pydio.cells.openapi.model.RegistryListRequest;
import com.pydio.cells.openapi.model.RegistryListResponse;
import com.pydio.cells.openapi.model.RestConfiguration;
import com.pydio.cells.openapi.model.RestControlServiceRequest;
import com.pydio.cells.openapi.model.RestCreatePeerFolderRequest;
import com.pydio.cells.openapi.model.RestCreatePeerFolderResponse;
import com.pydio.cells.openapi.model.RestCreateStorageBucketRequest;
import com.pydio.cells.openapi.model.RestCreateStorageBucketResponse;
import com.pydio.cells.openapi.model.RestDataSourceCollection;
import com.pydio.cells.openapi.model.RestDeleteDataSourceResponse;
import com.pydio.cells.openapi.model.RestDiscoveryResponse;
import com.pydio.cells.openapi.model.RestListPeerFoldersRequest;
import com.pydio.cells.openapi.model.RestListPeersAddressesResponse;
import com.pydio.cells.openapi.model.RestListProcessesRequest;
import com.pydio.cells.openapi.model.RestListProcessesResponse;
import com.pydio.cells.openapi.model.RestListSitesResponse;
import com.pydio.cells.openapi.model.RestListStorageBucketsRequest;
import com.pydio.cells.openapi.model.RestNodesCollection;
import com.pydio.cells.openapi.model.RestOpenApiResponse;
import com.pydio.cells.openapi.model.RestSchedulerActionFormResponse;
import com.pydio.cells.openapi.model.RestSchedulerActionsResponse;
import com.pydio.cells.openapi.model.RestServiceCollection;
import com.pydio.cells.openapi.model.RestVersioningPolicyCollection;
import com.pydio.cells.openapi.model.TreeVersioningPolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for configFormsDiscovery
     *
     * @param serviceName Retrieve a configuration form for a given service (required)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call configFormsDiscoveryCall(String serviceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/discovery/forms/{ServiceName}"
                .replace("{" + "ServiceName" + "}", localVarApiClient.escapeString(serviceName));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configFormsDiscoveryValidateBeforeCall(String serviceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling configFormsDiscovery(Async)");
        }

        return configFormsDiscoveryCall(serviceName, _callback);

    }

    /**
     * Publish Forms definition for building screens in frontend
     *
     * @param serviceName Retrieve a configuration form for a given service (required)
     * @return RestDiscoveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestDiscoveryResponse configFormsDiscovery(String serviceName) throws ApiException {
        ApiResponse<RestDiscoveryResponse> localVarResp = configFormsDiscoveryWithHttpInfo(serviceName);
        return localVarResp.getData();
    }

    /**
     * Publish Forms definition for building screens in frontend
     *
     * @param serviceName Retrieve a configuration form for a given service (required)
     * @return ApiResponse&lt;RestDiscoveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestDiscoveryResponse> configFormsDiscoveryWithHttpInfo(String serviceName) throws ApiException {
        okhttp3.Call localVarCall = configFormsDiscoveryValidateBeforeCall(serviceName, null);
        Type localVarReturnType = new TypeToken<RestDiscoveryResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish Forms definition for building screens in frontend (asynchronously)
     *
     * @param serviceName Retrieve a configuration form for a given service (required)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call configFormsDiscoveryAsync(String serviceName, final ApiCallback<RestDiscoveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = configFormsDiscoveryValidateBeforeCall(serviceName, _callback);
        Type localVarReturnType = new TypeToken<RestDiscoveryResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for controlService
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call controlServiceCall(RestControlServiceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/ctl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controlServiceValidateBeforeCall(RestControlServiceRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling controlService(Async)");
        }

        return controlServiceCall(body, _callback);

    }

    /**
     * [Not Implemented]  Start/Stop a service
     *
     * @param body (required)
     * @return CtlService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public CtlService controlService(RestControlServiceRequest body) throws ApiException {
        ApiResponse<CtlService> localVarResp = controlServiceWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * [Not Implemented]  Start/Stop a service
     *
     * @param body (required)
     * @return ApiResponse&lt;CtlService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CtlService> controlServiceWithHttpInfo(RestControlServiceRequest body) throws ApiException {
        okhttp3.Call localVarCall = controlServiceValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CtlService>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [Not Implemented]  Start/Stop a service (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call controlServiceAsync(RestControlServiceRequest body, final ApiCallback<CtlService> _callback) throws ApiException {

        okhttp3.Call localVarCall = controlServiceValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CtlService>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createEncryptionKey
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createEncryptionKeyCall(EncryptionAdminCreateKeyRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEncryptionKeyValidateBeforeCall(EncryptionAdminCreateKeyRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEncryptionKey(Async)");
        }

        return createEncryptionKeyCall(body, _callback);

    }

    /**
     * Create a new master key
     *
     * @param body (required)
     * @return EncryptionAdminCreateKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public EncryptionAdminCreateKeyResponse createEncryptionKey(EncryptionAdminCreateKeyRequest body) throws ApiException {
        ApiResponse<EncryptionAdminCreateKeyResponse> localVarResp = createEncryptionKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new master key
     *
     * @param body (required)
     * @return ApiResponse&lt;EncryptionAdminCreateKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EncryptionAdminCreateKeyResponse> createEncryptionKeyWithHttpInfo(EncryptionAdminCreateKeyRequest body) throws ApiException {
        okhttp3.Call localVarCall = createEncryptionKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptionAdminCreateKeyResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new master key (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createEncryptionKeyAsync(EncryptionAdminCreateKeyRequest body, final ApiCallback<EncryptionAdminCreateKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEncryptionKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptionAdminCreateKeyResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createPeerFolder
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPeerFolderCall(String peerAddress, RestCreatePeerFolderRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/peers/{PeerAddress}"
                .replace("{" + "PeerAddress" + "}", localVarApiClient.escapeString(peerAddress));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPeerFolderValidateBeforeCall(String peerAddress, RestCreatePeerFolderRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'peerAddress' is set
        if (peerAddress == null) {
            throw new ApiException("Missing the required parameter 'peerAddress' when calling createPeerFolder(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPeerFolder(Async)");
        }

        return createPeerFolderCall(peerAddress, body, _callback);

    }

    /**
     * Create a folder on a given path for a given peer (filesystem)
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @return RestCreatePeerFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestCreatePeerFolderResponse createPeerFolder(String peerAddress, RestCreatePeerFolderRequest body) throws ApiException {
        ApiResponse<RestCreatePeerFolderResponse> localVarResp = createPeerFolderWithHttpInfo(peerAddress, body);
        return localVarResp.getData();
    }

    /**
     * Create a folder on a given path for a given peer (filesystem)
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @return ApiResponse&lt;RestCreatePeerFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestCreatePeerFolderResponse> createPeerFolderWithHttpInfo(String peerAddress, RestCreatePeerFolderRequest body) throws ApiException {
        okhttp3.Call localVarCall = createPeerFolderValidateBeforeCall(peerAddress, body, null);
        Type localVarReturnType = new TypeToken<RestCreatePeerFolderResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a folder on a given path for a given peer (filesystem) (asynchronously)
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPeerFolderAsync(String peerAddress, RestCreatePeerFolderRequest body, final ApiCallback<RestCreatePeerFolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPeerFolderValidateBeforeCall(peerAddress, body, _callback);
        Type localVarReturnType = new TypeToken<RestCreatePeerFolderResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createStorageBucket
     *
     * @param bucketName (required)
     * @param body       (required)
     * @param _callback  Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createStorageBucketCall(String bucketName, RestCreateStorageBucketRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/buckets/{BucketName}"
                .replace("{" + "BucketName" + "}", localVarApiClient.escapeString(bucketName));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createStorageBucketValidateBeforeCall(String bucketName, RestCreateStorageBucketRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bucketName' is set
        if (bucketName == null) {
            throw new ApiException("Missing the required parameter 'bucketName' when calling createStorageBucket(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createStorageBucket(Async)");
        }

        return createStorageBucketCall(bucketName, body, _callback);

    }

    /**
     * List Buckets on a given object storage
     *
     * @param bucketName (required)
     * @param body       (required)
     * @return RestCreateStorageBucketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestCreateStorageBucketResponse createStorageBucket(String bucketName, RestCreateStorageBucketRequest body) throws ApiException {
        ApiResponse<RestCreateStorageBucketResponse> localVarResp = createStorageBucketWithHttpInfo(bucketName, body);
        return localVarResp.getData();
    }

    /**
     * List Buckets on a given object storage
     *
     * @param bucketName (required)
     * @param body       (required)
     * @return ApiResponse&lt;RestCreateStorageBucketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestCreateStorageBucketResponse> createStorageBucketWithHttpInfo(String bucketName, RestCreateStorageBucketRequest body) throws ApiException {
        okhttp3.Call localVarCall = createStorageBucketValidateBeforeCall(bucketName, body, null);
        Type localVarReturnType = new TypeToken<RestCreateStorageBucketResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Buckets on a given object storage (asynchronously)
     *
     * @param bucketName (required)
     * @param body       (required)
     * @param _callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createStorageBucketAsync(String bucketName, RestCreateStorageBucketRequest body, final ApiCallback<RestCreateStorageBucketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createStorageBucketValidateBeforeCall(bucketName, body, _callback);
        Type localVarReturnType = new TypeToken<RestCreateStorageBucketResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteDataSource
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteDataSourceCall(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/datasource/{Name}"
                .replace("{" + "Name" + "}", localVarApiClient.escapeString(name));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (disabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Disabled", disabled));
        }

        if (storageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageType", storageType));
        }

        if (objectsServiceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsServiceName", objectsServiceName));
        }

        if (objectsHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsHost", objectsHost));
        }

        if (objectsPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsPort", objectsPort));
        }

        if (objectsSecure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsSecure", objectsSecure));
        }

        if (objectsBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsBucket", objectsBucket));
        }

        if (objectsBaseFolder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsBaseFolder", objectsBaseFolder));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApiKey", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApiSecret", apiSecret));
        }

        if (peerAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PeerAddress", peerAddress));
        }

        if (watch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Watch", watch));
        }

        if (flatStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FlatStorage", flatStorage));
        }

        if (skipSyncOnRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipSyncOnRestart", skipSyncOnRestart));
        }

        if (encryptionMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EncryptionMode", encryptionMode));
        }

        if (encryptionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EncryptionKey", encryptionKey));
        }

        if (versioningPolicyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersioningPolicyName", versioningPolicyName));
        }

        if (creationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CreationDate", creationDate));
        }

        if (lastSynchronizationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastSynchronizationDate", lastSynchronizationDate));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataSourceValidateBeforeCall(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDataSource(Async)");
        }

        return deleteDataSourceCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, _callback);

    }

    /**
     * Delete a datasource
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @return RestDeleteDataSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestDeleteDataSourceResponse deleteDataSource(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate) throws ApiException {
        ApiResponse<RestDeleteDataSourceResponse> localVarResp = deleteDataSourceWithHttpInfo(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate);
        return localVarResp.getData();
    }

    /**
     * Delete a datasource
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @return ApiResponse&lt;RestDeleteDataSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestDeleteDataSourceResponse> deleteDataSourceWithHttpInfo(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate) throws ApiException {
        okhttp3.Call localVarCall = deleteDataSourceValidateBeforeCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, null);
        Type localVarReturnType = new TypeToken<RestDeleteDataSourceResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a datasource (asynchronously)
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteDataSourceAsync(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ApiCallback<RestDeleteDataSourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataSourceValidateBeforeCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, _callback);
        Type localVarReturnType = new TypeToken<RestDeleteDataSourceResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteEncryptionKey
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteEncryptionKeyCall(EncryptionAdminDeleteKeyRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEncryptionKeyValidateBeforeCall(EncryptionAdminDeleteKeyRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteEncryptionKey(Async)");
        }

        return deleteEncryptionKeyCall(body, _callback);

    }

    /**
     * Delete an existing master key
     *
     * @param body (required)
     * @return EncryptionAdminDeleteKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public EncryptionAdminDeleteKeyResponse deleteEncryptionKey(EncryptionAdminDeleteKeyRequest body) throws ApiException {
        ApiResponse<EncryptionAdminDeleteKeyResponse> localVarResp = deleteEncryptionKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Delete an existing master key
     *
     * @param body (required)
     * @return ApiResponse&lt;EncryptionAdminDeleteKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EncryptionAdminDeleteKeyResponse> deleteEncryptionKeyWithHttpInfo(EncryptionAdminDeleteKeyRequest body) throws ApiException {
        okhttp3.Call localVarCall = deleteEncryptionKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptionAdminDeleteKeyResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing master key (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteEncryptionKeyAsync(EncryptionAdminDeleteKeyRequest body, final ApiCallback<EncryptionAdminDeleteKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEncryptionKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptionAdminDeleteKeyResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for endpointsDiscovery
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call endpointsDiscoveryCall(String endpointType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/discovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpointType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndpointType", endpointType));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsDiscoveryValidateBeforeCall(String endpointType, final ApiCallback _callback) throws ApiException {
        return endpointsDiscoveryCall(endpointType, _callback);

    }

    /**
     * Publish available endpoints
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @return RestDiscoveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestDiscoveryResponse endpointsDiscovery(String endpointType) throws ApiException {
        ApiResponse<RestDiscoveryResponse> localVarResp = endpointsDiscoveryWithHttpInfo(endpointType);
        return localVarResp.getData();
    }

    /**
     * Publish available endpoints
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @return ApiResponse&lt;RestDiscoveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestDiscoveryResponse> endpointsDiscoveryWithHttpInfo(String endpointType) throws ApiException {
        okhttp3.Call localVarCall = endpointsDiscoveryValidateBeforeCall(endpointType, null);
        Type localVarReturnType = new TypeToken<RestDiscoveryResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish available endpoints (asynchronously)
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call endpointsDiscoveryAsync(String endpointType, final ApiCallback<RestDiscoveryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsDiscoveryValidateBeforeCall(endpointType, _callback);
        Type localVarReturnType = new TypeToken<RestDiscoveryResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for exportEncryptionKey
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call exportEncryptionKeyCall(EncryptionAdminExportKeyRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportEncryptionKeyValidateBeforeCall(EncryptionAdminExportKeyRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling exportEncryptionKey(Async)");
        }

        return exportEncryptionKeyCall(body, _callback);

    }

    /**
     * Export a master key for backup purpose, protected with a password
     *
     * @param body (required)
     * @return EncryptionAdminExportKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public EncryptionAdminExportKeyResponse exportEncryptionKey(EncryptionAdminExportKeyRequest body) throws ApiException {
        ApiResponse<EncryptionAdminExportKeyResponse> localVarResp = exportEncryptionKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Export a master key for backup purpose, protected with a password
     *
     * @param body (required)
     * @return ApiResponse&lt;EncryptionAdminExportKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EncryptionAdminExportKeyResponse> exportEncryptionKeyWithHttpInfo(EncryptionAdminExportKeyRequest body) throws ApiException {
        okhttp3.Call localVarCall = exportEncryptionKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptionAdminExportKeyResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export a master key for backup purpose, protected with a password (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call exportEncryptionKeyAsync(EncryptionAdminExportKeyRequest body, final ApiCallback<EncryptionAdminExportKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportEncryptionKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptionAdminExportKeyResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getConfig
     *
     * @param fullPath  Full slash-separated path to the config key (required)
     * @param data      JSON-encoded data to store (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getConfigCall(String fullPath, String data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/{FullPath}"
                .replace("{" + "FullPath" + "}", localVarApiClient.escapeString(fullPath));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (data != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Data", data));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigValidateBeforeCall(String fullPath, String data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fullPath' is set
        if (fullPath == null) {
            throw new ApiException("Missing the required parameter 'fullPath' when calling getConfig(Async)");
        }

        return getConfigCall(fullPath, data, _callback);

    }

    /**
     * Generic config Get using a full path in the config tree
     *
     * @param fullPath Full slash-separated path to the config key (required)
     * @param data     JSON-encoded data to store (optional)
     * @return RestConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestConfiguration getConfig(String fullPath, String data) throws ApiException {
        ApiResponse<RestConfiguration> localVarResp = getConfigWithHttpInfo(fullPath, data);
        return localVarResp.getData();
    }

    /**
     * Generic config Get using a full path in the config tree
     *
     * @param fullPath Full slash-separated path to the config key (required)
     * @param data     JSON-encoded data to store (optional)
     * @return ApiResponse&lt;RestConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestConfiguration> getConfigWithHttpInfo(String fullPath, String data) throws ApiException {
        okhttp3.Call localVarCall = getConfigValidateBeforeCall(fullPath, data, null);
        Type localVarReturnType = new TypeToken<RestConfiguration>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generic config Get using a full path in the config tree (asynchronously)
     *
     * @param fullPath  Full slash-separated path to the config key (required)
     * @param data      JSON-encoded data to store (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getConfigAsync(String fullPath, String data, final ApiCallback<RestConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigValidateBeforeCall(fullPath, data, _callback);
        Type localVarReturnType = new TypeToken<RestConfiguration>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getDataSource
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDataSourceCall(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/datasource/{Name}"
                .replace("{" + "Name" + "}", localVarApiClient.escapeString(name));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (disabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Disabled", disabled));
        }

        if (storageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageType", storageType));
        }

        if (objectsServiceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsServiceName", objectsServiceName));
        }

        if (objectsHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsHost", objectsHost));
        }

        if (objectsPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsPort", objectsPort));
        }

        if (objectsSecure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsSecure", objectsSecure));
        }

        if (objectsBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsBucket", objectsBucket));
        }

        if (objectsBaseFolder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ObjectsBaseFolder", objectsBaseFolder));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApiKey", apiKey));
        }

        if (apiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApiSecret", apiSecret));
        }

        if (peerAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PeerAddress", peerAddress));
        }

        if (watch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Watch", watch));
        }

        if (flatStorage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FlatStorage", flatStorage));
        }

        if (skipSyncOnRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipSyncOnRestart", skipSyncOnRestart));
        }

        if (encryptionMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EncryptionMode", encryptionMode));
        }

        if (encryptionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EncryptionKey", encryptionKey));
        }

        if (versioningPolicyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersioningPolicyName", versioningPolicyName));
        }

        if (creationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CreationDate", creationDate));
        }

        if (lastSynchronizationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastSynchronizationDate", lastSynchronizationDate));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSourceValidateBeforeCall(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDataSource(Async)");
        }

        return getDataSourceCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, _callback);

    }

    /**
     * Load datasource information
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @return ObjectDataSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ObjectDataSource getDataSource(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate) throws ApiException {
        ApiResponse<ObjectDataSource> localVarResp = getDataSourceWithHttpInfo(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate);
        return localVarResp.getData();
    }

    /**
     * Load datasource information
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @return ApiResponse&lt;ObjectDataSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ObjectDataSource> getDataSourceWithHttpInfo(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate) throws ApiException {
        okhttp3.Call localVarCall = getDataSourceValidateBeforeCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, null);
        Type localVarReturnType = new TypeToken<ObjectDataSource>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load datasource information (asynchronously)
     *
     * @param name                    Name of the data source (max length 34) (required)
     * @param disabled                Whether this data source is disabled or running (optional)
     * @param storageType             Type of underlying storage (LOCAL, S3, AZURE, GCS) (optional, default to LOCAL)
     * @param objectsServiceName      Corresponding objects service name (underlying s3 service) (optional)
     * @param objectsHost             Corresponding objects service host (optional)
     * @param objectsPort             Corresponding objects service port (optional)
     * @param objectsSecure           Corresponding objects service connection type (optional)
     * @param objectsBucket           Corresponding objects service bucket (optional)
     * @param objectsBaseFolder       Corresponding objects service base folder inside the bucket (optional)
     * @param apiKey                  Corresponding objects service api key (optional)
     * @param apiSecret               Corresponding objects service api secret (optional)
     * @param peerAddress             Peer address of the data source (optional)
     * @param watch                   Not implemented, whether to watch for underlying changes on the FS (optional)
     * @param flatStorage             Store data in flat format (object-storage like) (optional)
     * @param skipSyncOnRestart       Do not trigger resync at start (optional)
     * @param encryptionMode          Type of encryption applied before sending data to storage (optional, default to CLEAR)
     * @param encryptionKey           Encryption key used for encrypting data (optional)
     * @param versioningPolicyName    Versioning policy describes how files are kept in the versioning queue (optional)
     * @param creationDate            Data Source creation date (optional)
     * @param lastSynchronizationDate Data Source last synchronization date (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getDataSourceAsync(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, Boolean flatStorage, Boolean skipSyncOnRestart, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ApiCallback<ObjectDataSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSourceValidateBeforeCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, flatStorage, skipSyncOnRestart, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, _callback);
        Type localVarReturnType = new TypeToken<ObjectDataSource>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getVersioningPolicy
     *
     * @param uuid                     (required)
     * @param name                     (optional)
     * @param description              (optional)
     * @param versionsDataSourceName   (optional)
     * @param versionsDataSourceBucket (optional)
     * @param maxTotalSize             (optional)
     * @param maxSizePerFile           (optional)
     * @param ignoreFilesGreaterThan   (optional)
     * @param nodeDeletedStrategy      (optional, default to KeepAll)
     * @param _callback                Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getVersioningPolicyCall(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, String nodeDeletedStrategy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/versioning/{Uuid}"
                .replace("{" + "Uuid" + "}", localVarApiClient.escapeString(uuid));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (versionsDataSourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionsDataSourceName", versionsDataSourceName));
        }

        if (versionsDataSourceBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionsDataSourceBucket", versionsDataSourceBucket));
        }

        if (maxTotalSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxTotalSize", maxTotalSize));
        }

        if (maxSizePerFile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxSizePerFile", maxSizePerFile));
        }

        if (ignoreFilesGreaterThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IgnoreFilesGreaterThan", ignoreFilesGreaterThan));
        }

        if (nodeDeletedStrategy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NodeDeletedStrategy", nodeDeletedStrategy));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersioningPolicyValidateBeforeCall(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, String nodeDeletedStrategy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getVersioningPolicy(Async)");
        }

        return getVersioningPolicyCall(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan, nodeDeletedStrategy, _callback);

    }

    /**
     * Load a given versioning policy
     *
     * @param uuid                     (required)
     * @param name                     (optional)
     * @param description              (optional)
     * @param versionsDataSourceName   (optional)
     * @param versionsDataSourceBucket (optional)
     * @param maxTotalSize             (optional)
     * @param maxSizePerFile           (optional)
     * @param ignoreFilesGreaterThan   (optional)
     * @param nodeDeletedStrategy      (optional, default to KeepAll)
     * @return TreeVersioningPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public TreeVersioningPolicy getVersioningPolicy(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, String nodeDeletedStrategy) throws ApiException {
        ApiResponse<TreeVersioningPolicy> localVarResp = getVersioningPolicyWithHttpInfo(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan, nodeDeletedStrategy);
        return localVarResp.getData();
    }

    /**
     * Load a given versioning policy
     *
     * @param uuid                     (required)
     * @param name                     (optional)
     * @param description              (optional)
     * @param versionsDataSourceName   (optional)
     * @param versionsDataSourceBucket (optional)
     * @param maxTotalSize             (optional)
     * @param maxSizePerFile           (optional)
     * @param ignoreFilesGreaterThan   (optional)
     * @param nodeDeletedStrategy      (optional, default to KeepAll)
     * @return ApiResponse&lt;TreeVersioningPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TreeVersioningPolicy> getVersioningPolicyWithHttpInfo(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, String nodeDeletedStrategy) throws ApiException {
        okhttp3.Call localVarCall = getVersioningPolicyValidateBeforeCall(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan, nodeDeletedStrategy, null);
        Type localVarReturnType = new TypeToken<TreeVersioningPolicy>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load a given versioning policy (asynchronously)
     *
     * @param uuid                     (required)
     * @param name                     (optional)
     * @param description              (optional)
     * @param versionsDataSourceName   (optional)
     * @param versionsDataSourceBucket (optional)
     * @param maxTotalSize             (optional)
     * @param maxSizePerFile           (optional)
     * @param ignoreFilesGreaterThan   (optional)
     * @param nodeDeletedStrategy      (optional, default to KeepAll)
     * @param _callback                The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getVersioningPolicyAsync(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, String nodeDeletedStrategy, final ApiCallback<TreeVersioningPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersioningPolicyValidateBeforeCall(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan, nodeDeletedStrategy, _callback);
        Type localVarReturnType = new TypeToken<TreeVersioningPolicy>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for importEncryptionKey
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call importEncryptionKeyCall(EncryptionAdminImportKeyRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importEncryptionKeyValidateBeforeCall(EncryptionAdminImportKeyRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importEncryptionKey(Async)");
        }

        return importEncryptionKeyCall(body, _callback);

    }

    /**
     * Import a previously exported master key, requires the password created at export time
     *
     * @param body (required)
     * @return EncryptionAdminImportKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public EncryptionAdminImportKeyResponse importEncryptionKey(EncryptionAdminImportKeyRequest body) throws ApiException {
        ApiResponse<EncryptionAdminImportKeyResponse> localVarResp = importEncryptionKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Import a previously exported master key, requires the password created at export time
     *
     * @param body (required)
     * @return ApiResponse&lt;EncryptionAdminImportKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EncryptionAdminImportKeyResponse> importEncryptionKeyWithHttpInfo(EncryptionAdminImportKeyRequest body) throws ApiException {
        okhttp3.Call localVarCall = importEncryptionKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptionAdminImportKeyResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import a previously exported master key, requires the password created at export time (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call importEncryptionKeyAsync(EncryptionAdminImportKeyRequest body, final ApiCallback<EncryptionAdminImportKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importEncryptionKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptionAdminImportKeyResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listDataSources
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDataSourcesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/datasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataSourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listDataSourcesCall(_callback);

    }

    /**
     * List all defined datasources
     *
     * @return RestDataSourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestDataSourceCollection listDataSources() throws ApiException {
        ApiResponse<RestDataSourceCollection> localVarResp = listDataSourcesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all defined datasources
     *
     * @return ApiResponse&lt;RestDataSourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestDataSourceCollection> listDataSourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listDataSourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestDataSourceCollection>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all defined datasources (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listDataSourcesAsync(final ApiCallback<RestDataSourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataSourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestDataSourceCollection>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listEncryptionKeys
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listEncryptionKeysCall(EncryptionAdminListKeysRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEncryptionKeysValidateBeforeCall(EncryptionAdminListKeysRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listEncryptionKeys(Async)");
        }

        return listEncryptionKeysCall(body, _callback);

    }

    /**
     * List registered master keys
     *
     * @param body (required)
     * @return EncryptionAdminListKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public EncryptionAdminListKeysResponse listEncryptionKeys(EncryptionAdminListKeysRequest body) throws ApiException {
        ApiResponse<EncryptionAdminListKeysResponse> localVarResp = listEncryptionKeysWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * List registered master keys
     *
     * @param body (required)
     * @return ApiResponse&lt;EncryptionAdminListKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<EncryptionAdminListKeysResponse> listEncryptionKeysWithHttpInfo(EncryptionAdminListKeysRequest body) throws ApiException {
        okhttp3.Call localVarCall = listEncryptionKeysValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptionAdminListKeysResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List registered master keys (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listEncryptionKeysAsync(EncryptionAdminListKeysRequest body, final ApiCallback<EncryptionAdminListKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEncryptionKeysValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptionAdminListKeysResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listPeerFolders
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @param _callback   Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listPeerFoldersCall(String peerAddress, RestListPeerFoldersRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/peers/{PeerAddress}"
                .replace("{" + "PeerAddress" + "}", localVarApiClient.escapeString(peerAddress));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPeerFoldersValidateBeforeCall(String peerAddress, RestListPeerFoldersRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'peerAddress' is set
        if (peerAddress == null) {
            throw new ApiException("Missing the required parameter 'peerAddress' when calling listPeerFolders(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listPeerFolders(Async)");
        }

        return listPeerFoldersCall(peerAddress, body, _callback);

    }

    /**
     * List folders on a peer, starting from root
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @return RestNodesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestNodesCollection listPeerFolders(String peerAddress, RestListPeerFoldersRequest body) throws ApiException {
        ApiResponse<RestNodesCollection> localVarResp = listPeerFoldersWithHttpInfo(peerAddress, body);
        return localVarResp.getData();
    }

    /**
     * List folders on a peer, starting from root
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @return ApiResponse&lt;RestNodesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestNodesCollection> listPeerFoldersWithHttpInfo(String peerAddress, RestListPeerFoldersRequest body) throws ApiException {
        okhttp3.Call localVarCall = listPeerFoldersValidateBeforeCall(peerAddress, body, null);
        Type localVarReturnType = new TypeToken<RestNodesCollection>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List folders on a peer, starting from root (asynchronously)
     *
     * @param peerAddress Restrict listing to a given peer (required)
     * @param body        (required)
     * @param _callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listPeerFoldersAsync(String peerAddress, RestListPeerFoldersRequest body, final ApiCallback<RestNodesCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPeerFoldersValidateBeforeCall(peerAddress, body, _callback);
        Type localVarReturnType = new TypeToken<RestNodesCollection>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listPeersAddresses
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listPeersAddressesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/peers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPeersAddressesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listPeersAddressesCall(_callback);

    }

    /**
     * List all detected peers (servers on which the app is running)
     *
     * @return RestListPeersAddressesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestListPeersAddressesResponse listPeersAddresses() throws ApiException {
        ApiResponse<RestListPeersAddressesResponse> localVarResp = listPeersAddressesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all detected peers (servers on which the app is running)
     *
     * @return ApiResponse&lt;RestListPeersAddressesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestListPeersAddressesResponse> listPeersAddressesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listPeersAddressesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestListPeersAddressesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all detected peers (servers on which the app is running) (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listPeersAddressesAsync(final ApiCallback<RestListPeersAddressesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPeersAddressesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestListPeersAddressesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listProcesses
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listProcessesCall(RestListProcessesRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProcessesValidateBeforeCall(RestListProcessesRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listProcesses(Async)");
        }

        return listProcessesCall(body, _callback);

    }

    /**
     * List running Processes, with option PeerId or ServiceName filter
     *
     * @param body (required)
     * @return RestListProcessesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestListProcessesResponse listProcesses(RestListProcessesRequest body) throws ApiException {
        ApiResponse<RestListProcessesResponse> localVarResp = listProcessesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * List running Processes, with option PeerId or ServiceName filter
     *
     * @param body (required)
     * @return ApiResponse&lt;RestListProcessesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestListProcessesResponse> listProcessesWithHttpInfo(RestListProcessesRequest body) throws ApiException {
        okhttp3.Call localVarCall = listProcessesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestListProcessesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List running Processes, with option PeerId or ServiceName filter (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listProcessesAsync(RestListProcessesRequest body, final ApiCallback<RestListProcessesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProcessesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestListProcessesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listRegistry
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listRegistryCall(RegistryListRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/registry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRegistryValidateBeforeCall(RegistryListRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listRegistry(Async)");
        }

        return listRegistryCall(body, _callback);

    }

    /**
     * @param body (required)
     * @return RegistryListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RegistryListResponse listRegistry(RegistryListRequest body) throws ApiException {
        ApiResponse<RegistryListResponse> localVarResp = listRegistryWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * @param body (required)
     * @return ApiResponse&lt;RegistryListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RegistryListResponse> listRegistryWithHttpInfo(RegistryListRequest body) throws ApiException {
        okhttp3.Call localVarCall = listRegistryValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RegistryListResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listRegistryAsync(RegistryListRequest body, final ApiCallback<RegistryListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRegistryValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RegistryListResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listServices
     *
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING) (optional, default to ANY)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listServicesCall(String statusFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/ctl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statusFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StatusFilter", statusFilter));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServicesValidateBeforeCall(String statusFilter, final ApiCallback _callback) throws ApiException {
        return listServicesCall(statusFilter, _callback);

    }

    /**
     * List all services and their status
     *
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING) (optional, default to ANY)
     * @return RestServiceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestServiceCollection listServices(String statusFilter) throws ApiException {
        ApiResponse<RestServiceCollection> localVarResp = listServicesWithHttpInfo(statusFilter);
        return localVarResp.getData();
    }

    /**
     * List all services and their status
     *
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING) (optional, default to ANY)
     * @return ApiResponse&lt;RestServiceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestServiceCollection> listServicesWithHttpInfo(String statusFilter) throws ApiException {
        okhttp3.Call localVarCall = listServicesValidateBeforeCall(statusFilter, null);
        Type localVarReturnType = new TypeToken<RestServiceCollection>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all services and their status (asynchronously)
     *
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING) (optional, default to ANY)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listServicesAsync(String statusFilter, final ApiCallback<RestServiceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServicesValidateBeforeCall(statusFilter, _callback);
        Type localVarReturnType = new TypeToken<RestServiceCollection>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listSites
     *
     * @param filter    (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSitesCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/sites/{Filter}"
                .replace("{" + "Filter" + "}", localVarApiClient.escapeString(filter));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSitesValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling listSites(Async)");
        }

        return listSitesCall(filter, _callback);

    }

    /**
     * List configured sites
     *
     * @param filter (required)
     * @return RestListSitesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestListSitesResponse listSites(String filter) throws ApiException {
        ApiResponse<RestListSitesResponse> localVarResp = listSitesWithHttpInfo(filter);
        return localVarResp.getData();
    }

    /**
     * List configured sites
     *
     * @param filter (required)
     * @return ApiResponse&lt;RestListSitesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestListSitesResponse> listSitesWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listSitesValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<RestListSitesResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List configured sites (asynchronously)
     *
     * @param filter    (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listSitesAsync(String filter, final ApiCallback<RestListSitesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSitesValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<RestListSitesResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listStorageBuckets
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listStorageBucketsCall(RestListStorageBucketsRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/buckets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listStorageBucketsValidateBeforeCall(RestListStorageBucketsRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listStorageBuckets(Async)");
        }

        return listStorageBucketsCall(body, _callback);

    }

    /**
     * List Buckets on a given object storage
     *
     * @param body (required)
     * @return RestNodesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestNodesCollection listStorageBuckets(RestListStorageBucketsRequest body) throws ApiException {
        ApiResponse<RestNodesCollection> localVarResp = listStorageBucketsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * List Buckets on a given object storage
     *
     * @param body (required)
     * @return ApiResponse&lt;RestNodesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestNodesCollection> listStorageBucketsWithHttpInfo(RestListStorageBucketsRequest body) throws ApiException {
        okhttp3.Call localVarCall = listStorageBucketsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestNodesCollection>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Buckets on a given object storage (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listStorageBucketsAsync(RestListStorageBucketsRequest body, final ApiCallback<RestNodesCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listStorageBucketsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestNodesCollection>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listVersioningPolicies
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listVersioningPoliciesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/versioning";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVersioningPoliciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listVersioningPoliciesCall(_callback);

    }

    /**
     * List all defined versioning policies
     *
     * @return RestVersioningPolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestVersioningPolicyCollection listVersioningPolicies() throws ApiException {
        ApiResponse<RestVersioningPolicyCollection> localVarResp = listVersioningPoliciesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all defined versioning policies
     *
     * @return ApiResponse&lt;RestVersioningPolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestVersioningPolicyCollection> listVersioningPoliciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listVersioningPoliciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestVersioningPolicyCollection>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all defined versioning policies (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listVersioningPoliciesAsync(final ApiCallback<RestVersioningPolicyCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVersioningPoliciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestVersioningPolicyCollection>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for listVirtualNodes
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listVirtualNodesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/virtualnodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVirtualNodesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listVirtualNodesCall(_callback);

    }

    /**
     * List all defined virtual nodes
     *
     * @return RestNodesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestNodesCollection listVirtualNodes() throws ApiException {
        ApiResponse<RestNodesCollection> localVarResp = listVirtualNodesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all defined virtual nodes
     *
     * @return ApiResponse&lt;RestNodesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestNodesCollection> listVirtualNodesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listVirtualNodesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestNodesCollection>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all defined virtual nodes (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call listVirtualNodesAsync(final ApiCallback<RestNodesCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVirtualNodesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestNodesCollection>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for openApiDiscovery
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call openApiDiscoveryCall(String endpointType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/discovery/openapi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpointType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndpointType", endpointType));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openApiDiscoveryValidateBeforeCall(String endpointType, final ApiCallback _callback) throws ApiException {
        return openApiDiscoveryCall(endpointType, _callback);

    }

    /**
     * Publish available REST APIs
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @return RestOpenApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestOpenApiResponse openApiDiscovery(String endpointType) throws ApiException {
        ApiResponse<RestOpenApiResponse> localVarResp = openApiDiscoveryWithHttpInfo(endpointType);
        return localVarResp.getData();
    }

    /**
     * Publish available REST APIs
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @return ApiResponse&lt;RestOpenApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestOpenApiResponse> openApiDiscoveryWithHttpInfo(String endpointType) throws ApiException {
        okhttp3.Call localVarCall = openApiDiscoveryValidateBeforeCall(endpointType, null);
        Type localVarReturnType = new TypeToken<RestOpenApiResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish available REST APIs (asynchronously)
     *
     * @param endpointType Filter result to a specific endpoint type (optional)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call openApiDiscoveryAsync(String endpointType, final ApiCallback<RestOpenApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openApiDiscoveryValidateBeforeCall(endpointType, _callback);
        Type localVarReturnType = new TypeToken<RestOpenApiResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for putConfig
     *
     * @param fullPath  Full slash-separated path to the config key (required)
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putConfigCall(String fullPath, ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/{FullPath}"
                .replace("{" + "FullPath" + "}", localVarApiClient.escapeString(fullPath));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putConfigValidateBeforeCall(String fullPath, ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fullPath' is set
        if (fullPath == null) {
            throw new ApiException("Missing the required parameter 'fullPath' when calling putConfig(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putConfig(Async)");
        }

        return putConfigCall(fullPath, body, _callback);

    }

    /**
     * Generic config Put, using a full path in the config tree
     *
     * @param fullPath Full slash-separated path to the config key (required)
     * @param body     (required)
     * @return RestConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestConfiguration putConfig(String fullPath, ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue body) throws ApiException {
        ApiResponse<RestConfiguration> localVarResp = putConfigWithHttpInfo(fullPath, body);
        return localVarResp.getData();
    }

    /**
     * Generic config Put, using a full path in the config tree
     *
     * @param fullPath Full slash-separated path to the config key (required)
     * @param body     (required)
     * @return ApiResponse&lt;RestConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestConfiguration> putConfigWithHttpInfo(String fullPath, ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue body) throws ApiException {
        okhttp3.Call localVarCall = putConfigValidateBeforeCall(fullPath, body, null);
        Type localVarReturnType = new TypeToken<RestConfiguration>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generic config Put, using a full path in the config tree (asynchronously)
     *
     * @param fullPath  Full slash-separated path to the config key (required)
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putConfigAsync(String fullPath, ConfigurationMessageDataIsAnJsonRepresentationOfAnyValue body, final ApiCallback<RestConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = putConfigValidateBeforeCall(fullPath, body, _callback);
        Type localVarReturnType = new TypeToken<RestConfiguration>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for putDataSource
     *
     * @param name      Name of the data source (max length 34) (required)
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putDataSourceCall(String name, DataSourceObjectDescription body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/datasource/{Name}"
                .replace("{" + "Name" + "}", localVarApiClient.escapeString(name));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDataSourceValidateBeforeCall(String name, DataSourceObjectDescription body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putDataSource(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putDataSource(Async)");
        }

        return putDataSourceCall(name, body, _callback);

    }

    /**
     * Create or update a datasource
     *
     * @param name Name of the data source (max length 34) (required)
     * @param body (required)
     * @return ObjectDataSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ObjectDataSource putDataSource(String name, DataSourceObjectDescription body) throws ApiException {
        ApiResponse<ObjectDataSource> localVarResp = putDataSourceWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * Create or update a datasource
     *
     * @param name Name of the data source (max length 34) (required)
     * @param body (required)
     * @return ApiResponse&lt;ObjectDataSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<ObjectDataSource> putDataSourceWithHttpInfo(String name, DataSourceObjectDescription body) throws ApiException {
        okhttp3.Call localVarCall = putDataSourceValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<ObjectDataSource>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a datasource (asynchronously)
     *
     * @param name      Name of the data source (max length 34) (required)
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putDataSourceAsync(String name, DataSourceObjectDescription body, final ApiCallback<ObjectDataSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDataSourceValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<ObjectDataSource>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for schedulerActionFormDiscovery
     *
     * @param actionName Name of the action to load (required)
     * @param _callback  Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call schedulerActionFormDiscoveryCall(String actionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/scheduler/actions/{ActionName}"
                .replace("{" + "ActionName" + "}", localVarApiClient.escapeString(actionName));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerActionFormDiscoveryValidateBeforeCall(String actionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling schedulerActionFormDiscovery(Async)");
        }

        return schedulerActionFormDiscoveryCall(actionName, _callback);

    }

    /**
     * Publish scheduler action XML form for building screens in frontend
     *
     * @param actionName Name of the action to load (required)
     * @return RestSchedulerActionFormResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestSchedulerActionFormResponse schedulerActionFormDiscovery(String actionName) throws ApiException {
        ApiResponse<RestSchedulerActionFormResponse> localVarResp = schedulerActionFormDiscoveryWithHttpInfo(actionName);
        return localVarResp.getData();
    }

    /**
     * Publish scheduler action XML form for building screens in frontend
     *
     * @param actionName Name of the action to load (required)
     * @return ApiResponse&lt;RestSchedulerActionFormResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestSchedulerActionFormResponse> schedulerActionFormDiscoveryWithHttpInfo(String actionName) throws ApiException {
        okhttp3.Call localVarCall = schedulerActionFormDiscoveryValidateBeforeCall(actionName, null);
        Type localVarReturnType = new TypeToken<RestSchedulerActionFormResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish scheduler action XML form for building screens in frontend (asynchronously)
     *
     * @param actionName Name of the action to load (required)
     * @param _callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call schedulerActionFormDiscoveryAsync(String actionName, final ApiCallback<RestSchedulerActionFormResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerActionFormDiscoveryValidateBeforeCall(actionName, _callback);
        Type localVarReturnType = new TypeToken<RestSchedulerActionFormResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for schedulerActionsDiscovery
     *
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call schedulerActionsDiscoveryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/scheduler/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerActionsDiscoveryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return schedulerActionsDiscoveryCall(_callback);

    }

    /**
     * Publish scheduler registered actions
     *
     * @return RestSchedulerActionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestSchedulerActionsResponse schedulerActionsDiscovery() throws ApiException {
        ApiResponse<RestSchedulerActionsResponse> localVarResp = schedulerActionsDiscoveryWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Publish scheduler registered actions
     *
     * @return ApiResponse&lt;RestSchedulerActionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestSchedulerActionsResponse> schedulerActionsDiscoveryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = schedulerActionsDiscoveryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RestSchedulerActionsResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish scheduler registered actions (asynchronously)
     *
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call schedulerActionsDiscoveryAsync(final ApiCallback<RestSchedulerActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerActionsDiscoveryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RestSchedulerActionsResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
