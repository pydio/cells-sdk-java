/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.cells.openapi.ApiCallback;
import com.pydio.cells.openapi.ApiClient;
import com.pydio.cells.openapi.ApiException;
import com.pydio.cells.openapi.ApiResponse;
import com.pydio.cells.openapi.Configuration;
import com.pydio.cells.openapi.Pair;
import com.pydio.cells.openapi.model.IdmUser;
import com.pydio.cells.openapi.model.RestDeleteResponse;
import com.pydio.cells.openapi.model.RestSearchUserRequest;
import com.pydio.cells.openapi.model.RestUsersCollection;
import com.pydio.cells.openapi.model.UserServicePutRolesBody;
import com.pydio.cells.openapi.model.UserServicePutUserBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUser
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUserCall(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{Login}"
                .replace("{" + "Login" + "}", localVarApiClient.escapeString(login));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Uuid", uuid));
        }

        if (groupPath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupPath", groupPath));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Password", password));
        }

        if (oldPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OldPassword", oldPassword));
        }

        if (isGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsGroup", isGroup));
        }

        if (groupLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupLabel", groupLabel));
        }

        if (lastConnected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastConnected", lastConnected));
        }

        if (policiesContextEditable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PoliciesContextEditable", policiesContextEditable));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling deleteUser(Async)");
        }

        return deleteUserCall(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable, _callback);

    }

    /**
     * Delete a user
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @return RestDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestDeleteResponse deleteUser(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable) throws ApiException {
        ApiResponse<RestDeleteResponse> localVarResp = deleteUserWithHttpInfo(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable);
        return localVarResp.getData();
    }

    /**
     * Delete a user
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @return ApiResponse&lt;RestDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestDeleteResponse> deleteUserWithHttpInfo(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable, null);
        Type localVarReturnType = new TypeToken<RestDeleteResponse>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a user (asynchronously)
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteUserAsync(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable, final ApiCallback<RestDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable, _callback);
        Type localVarReturnType = new TypeToken<RestDeleteResponse>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getUser
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @param _callback               Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserCall(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/{Login}"
                .replace("{" + "Login" + "}", localVarApiClient.escapeString(login));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Uuid", uuid));
        }

        if (groupPath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupPath", groupPath));
        }

        if (attributes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Attributes", attributes));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Password", password));
        }

        if (oldPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OldPassword", oldPassword));
        }

        if (isGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsGroup", isGroup));
        }

        if (groupLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GroupLabel", groupLabel));
        }

        if (lastConnected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LastConnected", lastConnected));
        }

        if (policiesContextEditable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PoliciesContextEditable", policiesContextEditable));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling getUser(Async)");
        }

        return getUserCall(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable, _callback);

    }

    /**
     * Get a user by login
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @return IdmUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public IdmUser getUser(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable) throws ApiException {
        ApiResponse<IdmUser> localVarResp = getUserWithHttpInfo(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable);
        return localVarResp.getData();
    }

    /**
     * Get a user by login
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @return ApiResponse&lt;IdmUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdmUser> getUserWithHttpInfo(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable, null);
        Type localVarReturnType = new TypeToken<IdmUser>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user by login (asynchronously)
     *
     * @param login                   User login is used to connect, field is empty for groups (required)
     * @param uuid                    User unique identifier (optional)
     * @param groupPath               Path to the parent group (optional)
     * @param attributes              A free list of attributes  This is a request variable of the map type. The query format is \&quot;map_name[key]&#x3D;value\&quot;, e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\&quot;bob\&quot;]&#x3D;18 (optional)
     * @param password                Password can be passed to be updated (but never read back), field is empty for groups (optional)
     * @param oldPassword             OldPassword must be set when a user updates her own password (optional)
     * @param isGroup                 Whether this object is a group or a user (optional)
     * @param groupLabel              Label of the group, field is empty for users (optional)
     * @param lastConnected           Last successful connection timestamp (optional)
     * @param policiesContextEditable Context-resolved to quickly check if user is editable or not. (optional)
     * @param _callback               The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getUserAsync(String login, String uuid, String groupPath, String attributes, String password, String oldPassword, Boolean isGroup, String groupLabel, Integer lastConnected, Boolean policiesContextEditable, final ApiCallback<IdmUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(login, uuid, groupPath, attributes, password, oldPassword, isGroup, groupLabel, lastConnected, policiesContextEditable, _callback);
        Type localVarReturnType = new TypeToken<IdmUser>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for putRoles
     *
     * @param login     User login is used to connect, field is empty for groups (required)
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putRolesCall(String login, UserServicePutRolesBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/roles/{Login}"
                .replace("{" + "Login" + "}", localVarApiClient.escapeString(login));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRolesValidateBeforeCall(String login, UserServicePutRolesBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling putRoles(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putRoles(Async)");
        }

        return putRolesCall(login, body, _callback);

    }

    /**
     * Just save a user roles, without other datas
     *
     * @param login User login is used to connect, field is empty for groups (required)
     * @param body  (required)
     * @return IdmUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public IdmUser putRoles(String login, UserServicePutRolesBody body) throws ApiException {
        ApiResponse<IdmUser> localVarResp = putRolesWithHttpInfo(login, body);
        return localVarResp.getData();
    }

    /**
     * Just save a user roles, without other datas
     *
     * @param login User login is used to connect, field is empty for groups (required)
     * @param body  (required)
     * @return ApiResponse&lt;IdmUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdmUser> putRolesWithHttpInfo(String login, UserServicePutRolesBody body) throws ApiException {
        okhttp3.Call localVarCall = putRolesValidateBeforeCall(login, body, null);
        Type localVarReturnType = new TypeToken<IdmUser>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Just save a user roles, without other datas (asynchronously)
     *
     * @param login     User login is used to connect, field is empty for groups (required)
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putRolesAsync(String login, UserServicePutRolesBody body, final ApiCallback<IdmUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRolesValidateBeforeCall(login, body, _callback);
        Type localVarReturnType = new TypeToken<IdmUser>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for putUser
     *
     * @param login     User login is used to connect, field is empty for groups (required)
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putUserCall(String login, UserServicePutUserBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/{Login}"
                .replace("{" + "Login" + "}", localVarApiClient.escapeString(login));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putUserValidateBeforeCall(String login, UserServicePutUserBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling putUser(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putUser(Async)");
        }

        return putUserCall(login, body, _callback);

    }

    /**
     * Create or update a user
     *
     * @param login User login is used to connect, field is empty for groups (required)
     * @param body  (required)
     * @return IdmUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public IdmUser putUser(String login, UserServicePutUserBody body) throws ApiException {
        ApiResponse<IdmUser> localVarResp = putUserWithHttpInfo(login, body);
        return localVarResp.getData();
    }

    /**
     * Create or update a user
     *
     * @param login User login is used to connect, field is empty for groups (required)
     * @param body  (required)
     * @return ApiResponse&lt;IdmUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<IdmUser> putUserWithHttpInfo(String login, UserServicePutUserBody body) throws ApiException {
        okhttp3.Call localVarCall = putUserValidateBeforeCall(login, body, null);
        Type localVarReturnType = new TypeToken<IdmUser>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a user (asynchronously)
     *
     * @param login     User login is used to connect, field is empty for groups (required)
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call putUserAsync(String login, UserServicePutUserBody body, final ApiCallback<IdmUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = putUserValidateBeforeCall(login, body, _callback);
        Type localVarReturnType = new TypeToken<IdmUser>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for searchUsers
     *
     * @param body      (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call searchUsersCall(RestSearchUserRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchUsersValidateBeforeCall(RestSearchUserRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchUsers(Async)");
        }

        return searchUsersCall(body, _callback);

    }

    /**
     * List/Search users
     *
     * @param body (required)
     * @return RestUsersCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public RestUsersCollection searchUsers(RestSearchUserRequest body) throws ApiException {
        ApiResponse<RestUsersCollection> localVarResp = searchUsersWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * List/Search users
     *
     * @param body (required)
     * @return ApiResponse&lt;RestUsersCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<RestUsersCollection> searchUsersWithHttpInfo(RestSearchUserRequest body) throws ApiException {
        okhttp3.Call localVarCall = searchUsersValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestUsersCollection>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List/Search users (asynchronously)
     *
     * @param body      (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
     * <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call searchUsersAsync(RestSearchUserRequest body, final ApiCallback<RestUsersCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchUsersValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestUsersCollection>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
