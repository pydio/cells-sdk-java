/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.api;

import com.google.gson.reflect.TypeToken;
import com.pydio.cells.openapi.ApiCallback;
import com.pydio.cells.openapi.ApiClient;
import com.pydio.cells.openapi.ApiException;
import com.pydio.cells.openapi.ApiResponse;
import com.pydio.cells.openapi.Configuration;
import com.pydio.cells.openapi.Pair;
import com.pydio.cells.openapi.model.IdmACL;
import com.pydio.cells.openapi.model.RestACLCollection;
import com.pydio.cells.openapi.model.RestDeleteResponse;
import com.pydio.cells.openapi.model.RestSearchACLRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AclServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AclServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AclServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAcl
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAclCall(IdmACL body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/acl/bulk/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAclValidateBeforeCall(IdmACL body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteAcl(Async)");
        }

        return deleteAclCall(body, _callback);

    }

    /**
     * Delete one or more ACLs
     * 
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @return RestDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestDeleteResponse deleteAcl(IdmACL body) throws ApiException {
        ApiResponse<RestDeleteResponse> localVarResp = deleteAclWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Delete one or more ACLs
     * 
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @return ApiResponse&lt;RestDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestDeleteResponse> deleteAclWithHttpInfo(IdmACL body) throws ApiException {
        okhttp3.Call localVarCall = deleteAclValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete one or more ACLs (asynchronously)
     * 
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAclAsync(IdmACL body, final ApiCallback<RestDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAclValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAcl
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAclCall(IdmACL body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/acl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAclValidateBeforeCall(IdmACL body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAcl(Async)");
        }

        return putAclCall(body, _callback);

    }

    /**
     * Store an ACL
     * 
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @return IdmACL
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public IdmACL putAcl(IdmACL body) throws ApiException {
        ApiResponse<IdmACL> localVarResp = putAclWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Store an ACL
     * 
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @return ApiResponse&lt;IdmACL&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdmACL> putAclWithHttpInfo(IdmACL body) throws ApiException {
        okhttp3.Call localVarCall = putAclValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<IdmACL>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store an ACL (asynchronously)
     * 
     * @param body ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role. The context of how they apply can be fine-tuned by workspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putAclAsync(IdmACL body, final ApiCallback<IdmACL> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAclValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<IdmACL>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAcls
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAclsCall(RestSearchACLRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/acl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAclsValidateBeforeCall(RestSearchACLRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchAcls(Async)");
        }

        return searchAclsCall(body, _callback);

    }

    /**
     * Search Acls
     * 
     * @param body  (required)
     * @return RestACLCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public RestACLCollection searchAcls(RestSearchACLRequest body) throws ApiException {
        ApiResponse<RestACLCollection> localVarResp = searchAclsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Search Acls
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestACLCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestACLCollection> searchAclsWithHttpInfo(RestSearchACLRequest body) throws ApiException {
        okhttp3.Call localVarCall = searchAclsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RestACLCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Acls (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> User is not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User has no permission to access this particular resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist in the system </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal error occurred in the backend </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAclsAsync(RestSearchACLRequest body, final ApiCallback<RestACLCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAclsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RestACLCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
