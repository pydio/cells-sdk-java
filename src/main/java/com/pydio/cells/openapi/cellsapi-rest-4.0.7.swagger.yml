openapi: 3.0.1
info:
  title: Pydio Cells Rest API
  contact:
    name: Pydio
    url: https://pydio.com
  version: '4.0'
externalDocs:
  description: More about Pydio Cells Apis
  url: https://pydio.com
servers:
  - url: /
tags:
  - name: ConfigService
  - name: RoleService
  - name: UserService
  - name: ACLService
  - name: PolicyService
  - name: WorkspaceService
  - name: ActivityService
  - name: LogService
  - name: TokenService
  - name: MailerService
  - name: SearchService
  - name: TreeService
  - name: TemplatesService
  - name: MetaService
  - name: UserMetaService
  - name: JobsService
  - name: AdminTreeService
  - name: GraphService
  - name: ShareService
  - name: InstallService
  - name: UpdateService
  - name: FrontendService
paths:
  /acl:
    put:
      tags:
        - ACLService
      summary: Store an ACL
      operationId: PutAcl
      requestBody:
        description: >-
          ACL are the basic flags that can be put anywhere in the tree to
          provide some specific rights to a given role.

          The context of how they apply can be fine-tuned by workspace.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idmACL'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmACL'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
    post:
      tags:
        - ACLService
      summary: Search Acls
      operationId: SearchAcls
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restSearchACLRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restACLCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /acl/bulk/delete:
    post:
      tags:
        - ACLService
      summary: Delete one or more ACLs
      operationId: DeleteAcl
      requestBody:
        description: >-
          ACL are the basic flags that can be put anywhere in the tree to
          provide some specific rights to a given role.

          The context of how they apply can be fine-tuned by workspace.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idmACL'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /activity/stream:
    post:
      tags:
        - ActivityService
      summary: Load the the feeds of the currently logged user
      operationId: Stream
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activityStreamActivitiesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/activityObject'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /activity/subscribe:
    post:
      tags:
        - ActivityService
      summary: Manage subscriptions to other users/nodes feeds
      operationId: Subscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activitySubscription'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/activitySubscription'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /activity/subscriptions:
    post:
      tags:
        - ActivityService
      summary: Load subscriptions to other users/nodes feeds
      operationId: SearchSubscriptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/activitySearchSubscriptionsRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restSubscriptionsCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /auth/reset-password:
    post:
      tags:
        - TokenService
      summary: Finish up the reset password process by providing the unique token
      operationId: ResetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restResetPasswordRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restResetPasswordResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /auth/reset-password-token/{UserLogin}:
    put:
      tags:
        - TokenService
      summary: Generate a unique token for the reset password process
      operationId: ResetPasswordToken
      parameters:
        - name: UserLogin
          in: path
          description: Start a ResetPassword workflow for this user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Create:
                  type: boolean
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restResetPasswordTokenResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /auth/token/document:
    post:
      tags:
        - TokenService
      summary: >-
        Generate a temporary access token for a specific document for the
        current user
      operationId: GenerateDocumentAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restDocumentAccessTokenRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDocumentAccessTokenResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /auth/token/revoke:
    post:
      tags:
        - TokenService
      summary: Revoke a JWT token
      operationId: Revoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restRevokeRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restRevokeResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/buckets:
    post:
      tags:
        - ConfigService
      summary: List Buckets on a given object storage
      operationId: ListStorageBuckets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restListStorageBucketsRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restNodesCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/buckets/{BucketName}:
    put:
      tags:
        - ConfigService
      summary: List Buckets on a given object storage
      operationId: CreateStorageBucket
      parameters:
        - name: BucketName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestCreateStorageBucketRequest
              type: object
              properties:
                DataSource:
                  $ref: '#/components/schemas/objectDataSource'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restCreateStorageBucketResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/ctl:
    get:
      tags:
        - ConfigService
      summary: List all services and their status
      operationId: ListServices
      parameters:
        - name: StatusFilter
          in: query
          description: Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING)
          schema:
            type: string
            default: ANY
            enum:
              - ANY
              - STOPPED
              - STARTING
              - STOPPING
              - STARTED
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restServiceCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    post:
      tags:
        - ConfigService
      summary: '[Not Implemented]  Start/Stop a service'
      operationId: ControlService
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restControlServiceRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ctlService'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/datasource:
    get:
      tags:
        - ConfigService
      summary: List all defined datasources
      operationId: ListDataSources
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDataSourceCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/datasource/{Name}:
    get:
      tags:
        - ConfigService
      summary: Load datasource information
      operationId: GetDataSource
      parameters:
        - name: Name
          in: path
          description: Name of the data source (max length 34)
          required: true
          schema:
            type: string
        - name: Disabled
          in: query
          description: Whether this data source is disabled or running
          schema:
            type: boolean
        - name: StorageType
          in: query
          description: Type of underlying storage (LOCAL, S3, AZURE, GCS)
          schema:
            type: string
            default: LOCAL
            enum:
              - LOCAL
              - S3
              - SMB
              - CELLS
              - AZURE
              - GCS
              - B2
              - MANTA
              - SIA
        - name: ObjectsServiceName
          in: query
          description: Corresponding objects service name (underlying s3 service)
          schema:
            type: string
        - name: ObjectsHost
          in: query
          description: Corresponding objects service host
          schema:
            type: string
        - name: ObjectsPort
          in: query
          description: Corresponding objects service port
          schema:
            type: integer
            format: int32
        - name: ObjectsSecure
          in: query
          description: Corresponding objects service connection type
          schema:
            type: boolean
        - name: ObjectsBucket
          in: query
          description: Corresponding objects service bucket
          schema:
            type: string
        - name: ObjectsBaseFolder
          in: query
          description: Corresponding objects service base folder inside the bucket
          schema:
            type: string
        - name: ApiKey
          in: query
          description: Corresponding objects service api key
          schema:
            type: string
        - name: ApiSecret
          in: query
          description: Corresponding objects service api secret
          schema:
            type: string
        - name: PeerAddress
          in: query
          description: Peer address of the data source
          schema:
            type: string
        - name: Watch
          in: query
          description: Not implemented, whether to watch for underlying changes on the FS
          schema:
            type: boolean
        - name: FlatStorage
          in: query
          description: Store data in flat format (object-storage like)
          schema:
            type: boolean
        - name: SkipSyncOnRestart
          in: query
          description: Do not trigger resync at start
          schema:
            type: boolean
        - name: EncryptionMode
          in: query
          description: Type of encryption applied before sending data to storage
          schema:
            type: string
            default: CLEAR
            enum:
              - CLEAR
              - MASTER
              - USER
              - USER_PWD
        - name: EncryptionKey
          in: query
          description: Encryption key used for encrypting data
          schema:
            type: string
        - name: VersioningPolicyName
          in: query
          description: >-
            Versioning policy describes how files are kept in the versioning
            queue
          schema:
            type: string
        - name: CreationDate
          in: query
          description: Data Source creation date
          schema:
            type: integer
            format: int32
        - name: LastSynchronizationDate
          in: query
          description: Data Source last synchronization date
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectDataSource'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    post:
      tags:
        - ConfigService
      summary: Create or update a datasource
      operationId: PutDataSource
      parameters:
        - name: Name
          in: path
          description: Name of the data source (max length 34)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: DataSource Object description
              type: object
              properties:
                ApiKey:
                  title: Corresponding objects service api key
                  type: string
                ApiSecret:
                  title: Corresponding objects service api secret
                  type: string
                CreationDate:
                  title: Data Source creation date
                  type: integer
                  format: int32
                Disabled:
                  title: Whether this data source is disabled or running
                  type: boolean
                EncryptionKey:
                  title: Encryption key used for encrypting data
                  type: string
                EncryptionMode:
                  $ref: '#/components/schemas/objectEncryptionMode'
                FlatStorage:
                  title: Store data in flat format (object-storage like)
                  type: boolean
                LastSynchronizationDate:
                  title: Data Source last synchronization date
                  type: integer
                  format: int32
                ObjectsBaseFolder:
                  title: Corresponding objects service base folder inside the bucket
                  type: string
                ObjectsBucket:
                  title: Corresponding objects service bucket
                  type: string
                ObjectsHost:
                  title: Corresponding objects service host
                  type: string
                ObjectsPort:
                  title: Corresponding objects service port
                  type: integer
                  format: int32
                ObjectsSecure:
                  title: Corresponding objects service connection type
                  type: boolean
                ObjectsServiceName:
                  title: Corresponding objects service name (underlying s3 service)
                  type: string
                PeerAddress:
                  title: Peer address of the data source
                  type: string
                SkipSyncOnRestart:
                  title: Do not trigger resync at start
                  type: boolean
                StorageConfiguration:
                  title: List of key values describing storage configuration
                  type: object
                  additionalProperties:
                    type: string
                StorageType:
                  $ref: '#/components/schemas/objectStorageType'
                VersioningPolicyName:
                  title: >-
                    Versioning policy describes how files are kept in the
                    versioning queue
                  type: string
                Watch:
                  title: >-
                    Not implemented, whether to watch for underlying changes on
                    the FS
                  type: boolean
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/objectDataSource'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
    delete:
      tags:
        - ConfigService
      summary: Delete a datasource
      operationId: DeleteDataSource
      parameters:
        - name: Name
          in: path
          description: Name of the data source (max length 34)
          required: true
          schema:
            type: string
        - name: Disabled
          in: query
          description: Whether this data source is disabled or running
          schema:
            type: boolean
        - name: StorageType
          in: query
          description: Type of underlying storage (LOCAL, S3, AZURE, GCS)
          schema:
            type: string
            default: LOCAL
            enum:
              - LOCAL
              - S3
              - SMB
              - CELLS
              - AZURE
              - GCS
              - B2
              - MANTA
              - SIA
        - name: ObjectsServiceName
          in: query
          description: Corresponding objects service name (underlying s3 service)
          schema:
            type: string
        - name: ObjectsHost
          in: query
          description: Corresponding objects service host
          schema:
            type: string
        - name: ObjectsPort
          in: query
          description: Corresponding objects service port
          schema:
            type: integer
            format: int32
        - name: ObjectsSecure
          in: query
          description: Corresponding objects service connection type
          schema:
            type: boolean
        - name: ObjectsBucket
          in: query
          description: Corresponding objects service bucket
          schema:
            type: string
        - name: ObjectsBaseFolder
          in: query
          description: Corresponding objects service base folder inside the bucket
          schema:
            type: string
        - name: ApiKey
          in: query
          description: Corresponding objects service api key
          schema:
            type: string
        - name: ApiSecret
          in: query
          description: Corresponding objects service api secret
          schema:
            type: string
        - name: PeerAddress
          in: query
          description: Peer address of the data source
          schema:
            type: string
        - name: Watch
          in: query
          description: Not implemented, whether to watch for underlying changes on the FS
          schema:
            type: boolean
        - name: FlatStorage
          in: query
          description: Store data in flat format (object-storage like)
          schema:
            type: boolean
        - name: SkipSyncOnRestart
          in: query
          description: Do not trigger resync at start
          schema:
            type: boolean
        - name: EncryptionMode
          in: query
          description: Type of encryption applied before sending data to storage
          schema:
            type: string
            default: CLEAR
            enum:
              - CLEAR
              - MASTER
              - USER
              - USER_PWD
        - name: EncryptionKey
          in: query
          description: Encryption key used for encrypting data
          schema:
            type: string
        - name: VersioningPolicyName
          in: query
          description: >-
            Versioning policy describes how files are kept in the versioning
            queue
          schema:
            type: string
        - name: CreationDate
          in: query
          description: Data Source creation date
          schema:
            type: integer
            format: int32
        - name: LastSynchronizationDate
          in: query
          description: Data Source last synchronization date
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteDataSourceResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/discovery:
    get:
      tags:
        - ConfigService
      summary: Publish available endpoints
      operationId: EndpointsDiscovery
      parameters:
        - name: EndpointType
          in: query
          description: Filter result to a specific endpoint type
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDiscoveryResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/discovery/forms/{ServiceName}:
    get:
      tags:
        - ConfigService
      summary: Publish Forms definition for building screens in frontend
      operationId: ConfigFormsDiscovery
      parameters:
        - name: ServiceName
          in: path
          description: Retrieve a configuration form for a given service
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDiscoveryResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/discovery/openapi:
    get:
      tags:
        - ConfigService
      summary: Publish available REST APIs
      operationId: OpenApiDiscovery
      parameters:
        - name: EndpointType
          in: query
          description: Filter result to a specific endpoint type
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restOpenApiResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/encryption/create:
    post:
      tags:
        - ConfigService
      summary: Create a new master key
      operationId: CreateEncryptionKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/encryptionAdminCreateKeyRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/encryptionAdminCreateKeyResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/encryption/delete:
    post:
      tags:
        - ConfigService
      summary: Delete an existing master key
      operationId: DeleteEncryptionKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/encryptionAdminDeleteKeyRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/encryptionAdminDeleteKeyResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/encryption/export:
    post:
      tags:
        - ConfigService
      summary: Export a master key for backup purpose, protected with a password
      operationId: ExportEncryptionKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/encryptionAdminExportKeyRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/encryptionAdminExportKeyResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/encryption/import:
    put:
      tags:
        - ConfigService
      summary: >-
        Import a previously exported master key, requires the password created
        at export time
      operationId: ImportEncryptionKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/encryptionAdminImportKeyRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/encryptionAdminImportKeyResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/encryption/list:
    post:
      tags:
        - ConfigService
      summary: List registered master keys
      operationId: ListEncryptionKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/encryptionAdminListKeysRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/encryptionAdminListKeysResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/peers:
    get:
      tags:
        - ConfigService
      summary: List all detected peers (servers on which the app is running)
      operationId: ListPeersAddresses
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restListPeersAddressesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/peers/{PeerAddress}:
    put:
      tags:
        - ConfigService
      summary: Create a folder on a given path for a given peer (filesystem)
      operationId: CreatePeerFolder
      parameters:
        - name: PeerAddress
          in: path
          description: Restrict listing to a given peer
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestCreatePeerFolderRequest
              type: object
              properties:
                Path:
                  title: Path to the folder to be created
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restCreatePeerFolderResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
    post:
      tags:
        - ConfigService
      summary: List folders on a peer, starting from root
      operationId: ListPeerFolders
      parameters:
        - name: PeerAddress
          in: path
          description: Restrict listing to a given peer
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestListPeerFoldersRequest
              type: object
              properties:
                Path:
                  title: Path to the parent folder for listing
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restNodesCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/processes:
    post:
      tags:
        - ConfigService
      summary: List running Processes, with option PeerId or ServiceName filter
      operationId: ListProcesses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restListProcessesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restListProcessesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/registry:
    post:
      tags:
        - ConfigService
      operationId: ListRegistry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registryListRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registryListResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /config/scheduler/actions:
    get:
      tags:
        - ConfigService
      summary: Publish scheduler registered actions
      operationId: SchedulerActionsDiscovery
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restSchedulerActionsResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/scheduler/actions/{ActionName}:
    get:
      tags:
        - ConfigService
      summary: Publish scheduler action XML form for building screens in frontend
      operationId: SchedulerActionFormDiscovery
      parameters:
        - name: ActionName
          in: path
          description: Name of the action to load
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restSchedulerActionFormResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/sites/{Filter}:
    get:
      tags:
        - ConfigService
      summary: List configured sites
      operationId: ListSites
      parameters:
        - name: Filter
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restListSitesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/versioning:
    get:
      tags:
        - ConfigService
      summary: List all defined versioning policies
      operationId: ListVersioningPolicies
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restVersioningPolicyCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/versioning/{Uuid}:
    get:
      tags:
        - ConfigService
      summary: Load a given versioning policy
      operationId: GetVersioningPolicy
      parameters:
        - name: Uuid
          in: path
          required: true
          schema:
            type: string
        - name: Name
          in: query
          schema:
            type: string
        - name: Description
          in: query
          schema:
            type: string
        - name: VersionsDataSourceName
          in: query
          schema:
            type: string
        - name: VersionsDataSourceBucket
          in: query
          schema:
            type: string
        - name: MaxTotalSize
          in: query
          schema:
            type: string
            format: int64
        - name: MaxSizePerFile
          in: query
          schema:
            type: string
            format: int64
        - name: IgnoreFilesGreaterThan
          in: query
          schema:
            type: string
            format: int64
        - name: NodeDeletedStrategy
          in: query
          schema:
            type: string
            default: KeepAll
            enum:
              - KeepAll
              - KeepLast
              - KeepNone
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/treeVersioningPolicy'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/virtualnodes:
    get:
      tags:
        - ConfigService
      summary: List all defined virtual nodes
      operationId: ListVirtualNodes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restNodesCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /config/{FullPath}:
    get:
      tags:
        - ConfigService
      summary: Generic config Get using a full path in the config tree
      operationId: GetConfig
      parameters:
        - name: FullPath
          in: path
          description: Full slash-separated path to the config key
          required: true
          schema:
            type: string
        - name: Data
          in: query
          description: JSON-encoded data to store
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restConfiguration'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    put:
      tags:
        - ConfigService
      summary: Generic config Put, using a full path in the config tree
      operationId: PutConfig
      parameters:
        - name: FullPath
          in: path
          description: Full slash-separated path to the config key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: >-
                Configuration message. Data is an Json representation of any
                value
              type: object
              properties:
                Data:
                  title: JSON-encoded data to store
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restConfiguration'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /frontend/binaries/{BinaryType}/{Uuid}:
    get:
      tags:
        - FrontendService
      summary: Serve frontend binaries directly (avatars / logos / bg images)
      operationId: FrontServeBinary
      parameters:
        - name: BinaryType
          in: path
          description: Currently supported values are USER and GLOBAL
          required: true
          schema:
            type: string
        - name: Uuid
          in: path
          description: Id of the binary
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontBinaryResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    post:
      tags:
        - FrontendService
      summary: Upload frontend binaries (avatars / logos / bg images)
      operationId: FrontPutBinary
      parameters:
        - name: BinaryType
          in: path
          description: Currently supported values are USER and GLOBAL
          required: true
          schema:
            type: string
        - name: Uuid
          in: path
          description: Id of the binary
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontBinaryResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /frontend/bootconf:
    get:
      tags:
        - FrontendService
      summary: Add some data to the initial set of parameters loaded by the frontend
      operationId: FrontBootConf
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontBootConfResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /frontend/enroll:
    post:
      tags:
        - FrontendService
      summary: Generic endpoint that can be implemented by 2FA systems for enrollment
      operationId: FrontEnrollAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restFrontEnrollAuthRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontEnrollAuthResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /frontend/messages/{Lang}:
    get:
      tags:
        - FrontendService
      summary: Serve list of I18n messages
      operationId: FrontMessages
      parameters:
        - name: Lang
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontMessagesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /frontend/plugins/{Lang}:
    get:
      tags:
        - FrontendService
      summary: Serve list of I18n messages
      operationId: FrontPlugins
      parameters:
        - name: Lang
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontPluginsResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /frontend/session:
    post:
      tags:
        - FrontendService
      summary: Handle JWT
      operationId: FrontSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restFrontSessionRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontSessionResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /frontend/settings-menu:
    get:
      tags:
        - FrontendService
      summary: Sends a tree of nodes to be used a menu in the Settings panel
      operationId: SettingsMenu
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restSettingsMenuResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /frontend/state:
    get:
      tags:
        - FrontendService
      summary: Send XML state registry
      operationId: FrontState
      parameters:
        - name: XPath
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restFrontStateResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /graph/recommend:
    post:
      tags:
        - GraphService
      operationId: Recommend
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restRecommendRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restRecommendResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /graph/relation/{UserId}:
    get:
      tags:
        - GraphService
      summary: Compute relation of context user with another user
      operationId: Relation
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restRelationResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /graph/state/{Segment}:
    get:
      tags:
        - GraphService
      summary: Compute accessible workspaces for a given user
      operationId: UserState
      parameters:
        - name: Segment
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restUserStateResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /install:
    get:
      tags:
        - InstallService
      summary: Loads default values for install form
      operationId: GetInstall
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installGetDefaultsResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    post:
      tags:
        - InstallService
      summary: Post values to be saved for install
      operationId: PostInstall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/installInstallRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installInstallResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /install/agreement:
    get:
      tags:
        - InstallService
      summary: Load a textual agreement for using the software
      operationId: GetAgreement
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installGetAgreementResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /install/check:
    post:
      tags:
        - InstallService
      summary: Perform a check during install (like a valid DB connection)
      operationId: PerformInstallCheck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/installPerformCheckRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installPerformCheckResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /install/events:
    get:
      tags:
        - InstallService
      operationId: InstallEvents
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installInstallEventsResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /jobs/tasks/delete:
    post:
      tags:
        - JobsService
      summary: Send a control command to clean tasks on a given job
      operationId: UserDeleteTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobsDeleteTasksRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobsDeleteTasksResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /jobs/tasks/logs:
    post:
      tags:
        - JobsService
      summary: Technical Logs, in Json or CSV format
      operationId: ListTasksLogs
      requestBody:
        description: >-
          ListLogRequest launches a parameterised query in the log repository
          and streams the results.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logListLogRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restLogMessageCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /jobs/user:
    put:
      tags:
        - JobsService
      summary: Send Control Commands to one or many jobs / tasks
      operationId: UserControlJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobsCtrlCommand'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobsCtrlCommandResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
    post:
      tags:
        - JobsService
      summary: List jobs associated with current user
      operationId: UserListJobs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/jobsListJobsRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restUserJobsCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /jobs/user/{JobName}:
    put:
      tags:
        - JobsService
      summary: Create a predefined job to be run directly
      operationId: UserCreateJob
      parameters:
        - name: JobName
          in: path
          description: Name of the job to create in the user space
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestUserJobRequest
              type: object
              properties:
                JobName:
                  title: Also add JobName in body to keep backward compatibility with pre v4 versions
                  type: string
                JsonParameters:
                  title: Json-encoded parameters for this job
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restUserJobResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /log/sys:
    post:
      tags:
        - LogService
      summary: Technical Logs, in Json or CSV format
      operationId: Syslog
      requestBody:
        description: >-
          ListLogRequest launches a parameterised query in the log repository
          and streams the results.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/logListLogRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restLogMessageCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /mailer/send:
    post:
      tags:
        - MailerService
      summary: Send an email to a user or any email address
      operationId: Send
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mailerMail'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mailerSendMailResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /meta/bulk/get:
    post:
      tags:
        - MetaService
      summary: List meta for a list of nodes, or a full directory using /path/* syntax
      operationId: GetBulkMeta
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restGetBulkMetaRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restBulkMetaResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /meta/delete/{NodePath}:
    post:
      tags:
        - MetaService
      summary: Delete metadata of a given node
      operationId: DeleteMeta
      parameters:
        - name: NodePath
          in: path
          description: Path to the requested node
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestMetaNamespaceRequest
              type: object
              properties:
                Namespace:
                  title: List of namespaces to load
                  type: array
                  items:
                    type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/treeNode'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /meta/get/{NodePath}:
    post:
      tags:
        - MetaService
      summary: Load metadata for a given node
      operationId: GetMeta
      parameters:
        - name: NodePath
          in: path
          description: Path to the requested node
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestMetaNamespaceRequest
              type: object
              properties:
                Namespace:
                  title: List of namespaces to load
                  type: array
                  items:
                    type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/treeNode'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /meta/set/{NodePath}:
    post:
      tags:
        - MetaService
      summary: Update metadata for a given node
      operationId: SetMeta
      parameters:
        - name: NodePath
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestMetaCollection
              type: object
              properties:
                Metadatas:
                  type: array
                  items:
                    $ref: '#/components/schemas/restMetadata'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/treeNode'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /policy:
    post:
      tags:
        - PolicyService
      summary: List all defined security policies
      operationId: ListPolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idmListPolicyGroupsRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmListPolicyGroupsResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /role:
    post:
      tags:
        - RoleService
      summary: Search Roles
      operationId: SearchRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restSearchRoleRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restRolesCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /role/{Uuid}:
    get:
      tags:
        - RoleService
      summary: Get a Role by ID
      operationId: GetRole
      parameters:
        - name: Uuid
          in: path
          description: Unique identifier of this role
          required: true
          schema:
            type: string
        - name: Label
          in: query
          description: Label of this role
          schema:
            type: string
        - name: IsTeam
          in: query
          description: Whether this role represents a user team or not
          schema:
            type: boolean
        - name: GroupRole
          in: query
          description: Whether this role is attached to a Group object
          schema:
            type: boolean
        - name: UserRole
          in: query
          description: Whether this role is attached to a User object
          schema:
            type: boolean
        - name: LastUpdated
          in: query
          description: Last modification date of the role
          schema:
            type: integer
            format: int32
        - name: AutoApplies
          in: query
          description: >-
            List of profiles (standard, shared, admin) on which the role will be
            automatically applied
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: PoliciesContextEditable
          in: query
          description: Whether the policies resolve into an editable state
          schema:
            type: boolean
        - name: ForceOverride
          in: query
          description: Is used in a stack of roles, this one will always be applied last.
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmRole'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    put:
      tags:
        - RoleService
      summary: Create or update a Role
      operationId: SetRole
      parameters:
        - name: Uuid
          in: path
          description: Unique identifier of this role
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                AutoApplies:
                  title: >-
                    List of profiles (standard, shared, admin) on which the role
                    will be automatically applied
                  type: array
                  items:
                    type: string
                ForceOverride:
                  type: boolean
                  description: >-
                    Is used in a stack of roles, this one will always be applied
                    last.
                GroupRole:
                  title: Whether this role is attached to a Group object
                  type: boolean
                IsTeam:
                  title: Whether this role represents a user team or not
                  type: boolean
                Label:
                  title: Label of this role
                  type: string
                LastUpdated:
                  title: Last modification date of the role
                  type: integer
                  format: int32
                Policies:
                  title: List of policies for securing this role access
                  type: array
                  items:
                    $ref: '#/components/schemas/serviceResourcePolicy'
                PoliciesContextEditable:
                  title: Whether the policies resolve into an editable state
                  type: boolean
                UserRole:
                  title: Whether this role is attached to a User object
                  type: boolean
              description: >-
                Role represents a generic set of permissions that can be applied
                to any users or groups.
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmRole'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
    delete:
      tags:
        - RoleService
      summary: Delete a Role by ID
      operationId: DeleteRole
      parameters:
        - name: Uuid
          in: path
          description: Unique identifier of this role
          required: true
          schema:
            type: string
        - name: Label
          in: query
          description: Label of this role
          schema:
            type: string
        - name: IsTeam
          in: query
          description: Whether this role represents a user team or not
          schema:
            type: boolean
        - name: GroupRole
          in: query
          description: Whether this role is attached to a Group object
          schema:
            type: boolean
        - name: UserRole
          in: query
          description: Whether this role is attached to a User object
          schema:
            type: boolean
        - name: LastUpdated
          in: query
          description: Last modification date of the role
          schema:
            type: integer
            format: int32
        - name: AutoApplies
          in: query
          description: >-
            List of profiles (standard, shared, admin) on which the role will be
            automatically applied
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: PoliciesContextEditable
          in: query
          description: Whether the policies resolve into an editable state
          schema:
            type: boolean
        - name: ForceOverride
          in: query
          description: Is used in a stack of roles, this one will always be applied last.
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmRole'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /search/nodes:
    post:
      tags:
        - SearchService
      summary: Search indexed nodes (files/folders) on various aspects
      operationId: Nodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/treeSearchRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restSearchResults'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /share/cell:
    put:
      tags:
        - ShareService
      summary: Put or Create a share room
      operationId: PutCell
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restPutCellRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restCell'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /share/cell/{Uuid}:
    get:
      tags:
        - ShareService
      summary: Load a share room
      operationId: GetCell
      parameters:
        - name: Uuid
          in: path
          description: Cell Uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restCell'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    delete:
      tags:
        - ShareService
      summary: Delete a share room
      operationId: DeleteCell
      parameters:
        - name: Uuid
          in: path
          description: Cell Uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteCellResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /share/link:
    put:
      tags:
        - ShareService
      summary: Put or Create a share room
      operationId: PutShareLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restPutShareLinkRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restShareLink'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /share/link/{Uuid}:
    get:
      tags:
        - ShareService
      summary: Load a share link with all infos
      operationId: GetShareLink
      parameters:
        - name: Uuid
          in: path
          description: Link Uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restShareLink'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    delete:
      tags:
        - ShareService
      summary: Delete Share Link
      operationId: DeleteShareLink
      parameters:
        - name: Uuid
          in: path
          description: Id of Link to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteShareLinkResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /share/policies:
    put:
      tags:
        - ShareService
      summary: >-
        Updates policies associated to the underlying workspace for a Cell or a
        ShareLink
      operationId: UpdateSharePolicies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restUpdateSharePoliciesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restUpdateSharePoliciesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /share/resources:
    post:
      tags:
        - ShareService
      summary: List Shared Resources for current user or all users
      operationId: ListSharedResources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restListSharedResourcesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restListSharedResourcesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /templates:
    get:
      tags:
        - TemplatesService
      summary: List available templates
      operationId: ListTemplates
      parameters:
        - name: TemplateType
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restListTemplatesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /tree/admin/list:
    post:
      tags:
        - AdminTreeService
      summary: >-
        List files and folders starting at the root (first level lists the
        datasources)
      operationId: ListAdminTree
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/treeListNodesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restNodesCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /tree/admin/stat:
    post:
      tags:
        - AdminTreeService
      summary: Read a node information inside the admin tree
      operationId: StatAdminTree
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/treeReadNodeRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/treeReadNodeResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /tree/create:
    post:
      tags:
        - TreeService
      summary: Create dirs or empty files inside the tree
      operationId: CreateNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restCreateNodesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restNodesCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /tree/delete:
    post:
      tags:
        - TreeService
      summary: Handle nodes deletion
      operationId: DeleteNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restDeleteNodesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteNodesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /tree/restore:
    post:
      tags:
        - TreeService
      summary: Handle nodes restoration from recycle bin
      operationId: RestoreNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restRestoreNodesRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restRestoreNodesResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /tree/selection:
    post:
      tags:
        - TreeService
      summary: Create a temporary selection for further action (namely download)
      operationId: CreateSelection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restCreateSelectionRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restCreateSelectionResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /tree/stat/{Node}:
    get:
      tags:
        - TreeService
      summary: Return node meta without the node content itself
      operationId: HeadNode
      parameters:
        - name: Node
          in: path
          description: The node to state
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restHeadNodeResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /tree/stats:
    post:
      tags:
        - TreeService
      summary: List meta for a list of nodes, or a full directory using /path/* syntax
      operationId: BulkStatNodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restGetBulkMetaRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restBulkMetaResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /update:
    post:
      tags:
        - UpdateService
      summary: Check the remote server to see if there are available binaries
      operationId: UpdateRequired
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUpdateRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUpdateResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /update/{TargetVersion}:
    patch:
      tags:
        - UpdateService
      summary: Apply an update to a given version
      operationId: ApplyUpdate
      parameters:
        - name: TargetVersion
          in: path
          description: Version of the target binary
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateApplyUpdateRequest
              type: object
              properties:
                PackageName:
                  title: >-
                    Name of the package if it's not the same as the current
                    binary
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateApplyUpdateResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user:
    post:
      tags:
        - UserService
      summary: List/Search users
      operationId: SearchUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restSearchUserRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restUsersCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user-meta/bookmarks:
    post:
      tags:
        - UserMetaService
      summary: >-
        Special API for Bookmarks, will load userMeta and the associated nodes,
        and return

        as a node list
      operationId: UserBookmarks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restUserBookmarksRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restBulkMetaResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user-meta/namespace:
    get:
      tags:
        - UserMetaService
      summary: List defined meta namespaces
      operationId: ListUserMetaNamespace
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restUserMetaNamespaceCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    put:
      tags:
        - UserMetaService
      summary: 'Admin: update namespaces'
      operationId: UpdateUserMetaNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idmUpdateUserMetaNamespaceRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmUpdateUserMetaNamespaceResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user-meta/search:
    post:
      tags:
        - UserMetaService
      summary: Search a list of meta by node Id or by User id and by namespace
      operationId: SearchUserMeta
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idmSearchUserMetaRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restUserMetaCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user-meta/tags/{Namespace}:
    get:
      tags:
        - UserMetaService
      summary: List Tags for a given namespace
      operationId: ListUserMetaTags
      parameters:
        - name: Namespace
          in: path
          description: List user meta tags for this namespace
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restListUserMetaTagsResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    post:
      tags:
        - UserMetaService
      summary: Add a new value to Tags for a given namespace
      operationId: PutUserMetaTag
      parameters:
        - name: Namespace
          in: path
          description: Add a tag value for this namespace
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: RestPutUserMetaTagRequest
              type: object
              properties:
                Tag:
                  title: New tag value
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restPutUserMetaTagResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user-meta/tags/{Namespace}/{Tags}:
    delete:
      tags:
        - UserMetaService
      summary: Delete one or all tags for a given namespace (use * for all tags)
      operationId: DeleteUserMetaTags
      parameters:
        - name: Namespace
          in: path
          description: Delete tags from this namespace
          required: true
          schema:
            type: string
        - name: Tags
          in: path
          description: Delete this tag
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteUserMetaTagsResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /user-meta/update:
    put:
      tags:
        - UserMetaService
      summary: Update/delete user meta
      operationId: UpdateUserMeta
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/idmUpdateUserMetaRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmUpdateUserMetaResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user/roles/{Login}:
    put:
      tags:
        - UserService
      summary: Just save a user roles, without other datas
      operationId: PutRoles
      parameters:
        - name: Login
          in: path
          description: User login is used to connect, field is empty for groups
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: User can represent either a User or a Group
              type: object
              properties:
                Attributes:
                  title: A free list of attributes
                  type: object
                  additionalProperties:
                    type: string
                GroupLabel:
                  title: Label of the group, field is empty for users
                  type: string
                GroupPath:
                  title: Path to the parent group
                  type: string
                IsGroup:
                  title: Whether this object is a group or a user
                  type: boolean
                LastConnected:
                  title: Last successful connection timestamp
                  type: integer
                  format: int32
                OldPassword:
                  title: OldPassword must be set when a user updates her own password
                  type: string
                Password:
                  title: >-
                    Password can be passed to be updated (but never read back),
                    field is empty for groups
                  type: string
                Policies:
                  title: Policies securing access to this user
                  type: array
                  items:
                    $ref: '#/components/schemas/serviceResourcePolicy'
                PoliciesContextEditable:
                  type: boolean
                  description: >-
                    Context-resolved to quickly check if user is editable or
                    not.
                Roles:
                  title: List of roles applied to this user or group
                  type: array
                  items:
                    $ref: '#/components/schemas/idmRole'
                Uuid:
                  title: User unique identifier
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmUser'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /user/{Login}:
    get:
      tags:
        - UserService
      summary: Get a user by login
      operationId: GetUser
      parameters:
        - name: Login
          in: path
          description: User login is used to connect, field is empty for groups
          required: true
          schema:
            type: string
        - name: Uuid
          in: query
          description: User unique identifier
          schema:
            type: string
        - name: GroupPath
          in: query
          description: Path to the parent group
          schema:
            type: string
        - name: Password
          in: query
          description: >-
            Password can be passed to be updated (but never read back), field is
            empty for groups
          schema:
            type: string
        - name: OldPassword
          in: query
          description: OldPassword must be set when a user updates her own password
          schema:
            type: string
        - name: IsGroup
          in: query
          description: Whether this object is a group or a user
          schema:
            type: boolean
        - name: GroupLabel
          in: query
          description: Label of the group, field is empty for users
          schema:
            type: string
        - name: LastConnected
          in: query
          description: Last successful connection timestamp
          schema:
            type: integer
            format: int32
        - name: PoliciesContextEditable
          in: query
          description: Context-resolved to quickly check if user is editable or not.
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmUser'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
    put:
      tags:
        - UserService
      summary: Create or update a user
      operationId: PutUser
      parameters:
        - name: Login
          in: path
          description: User login is used to connect, field is empty for groups
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              title: User can represent either a User or a Group
              type: object
              properties:
                Attributes:
                  title: A free list of attributes
                  type: object
                  additionalProperties:
                    type: string
                GroupLabel:
                  title: Label of the group, field is empty for users
                  type: string
                GroupPath:
                  title: Path to the parent group
                  type: string
                IsGroup:
                  title: Whether this object is a group or a user
                  type: boolean
                LastConnected:
                  title: Last successful connection timestamp
                  type: integer
                  format: int32
                OldPassword:
                  title: OldPassword must be set when a user updates her own password
                  type: string
                Password:
                  title: >-
                    Password can be passed to be updated (but never read back),
                    field is empty for groups
                  type: string
                Policies:
                  title: Policies securing access to this user
                  type: array
                  items:
                    $ref: '#/components/schemas/serviceResourcePolicy'
                PoliciesContextEditable:
                  type: boolean
                  description: >-
                    Context-resolved to quickly check if user is editable or
                    not.
                Roles:
                  title: List of roles applied to this user or group
                  type: array
                  items:
                    $ref: '#/components/schemas/idmRole'
                Uuid:
                  title: User unique identifier
                  type: string
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmUser'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
    delete:
      tags:
        - UserService
      summary: Delete a user
      operationId: DeleteUser
      parameters:
        - name: Login
          in: path
          description: User login is used to connect, field is empty for groups
          required: true
          schema:
            type: string
        - name: Uuid
          in: query
          description: User unique identifier
          schema:
            type: string
        - name: GroupPath
          in: query
          description: Path to the parent group
          schema:
            type: string
        - name: Password
          in: query
          description: >-
            Password can be passed to be updated (but never read back), field is
            empty for groups
          schema:
            type: string
        - name: OldPassword
          in: query
          description: OldPassword must be set when a user updates her own password
          schema:
            type: string
        - name: IsGroup
          in: query
          description: Whether this object is a group or a user
          schema:
            type: boolean
        - name: GroupLabel
          in: query
          description: Label of the group, field is empty for users
          schema:
            type: string
        - name: LastConnected
          in: query
          description: Last successful connection timestamp
          schema:
            type: integer
            format: int32
        - name: PoliciesContextEditable
          in: query
          description: Context-resolved to quickly check if user is editable or not.
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
  /workspace:
    post:
      tags:
        - WorkspaceService
      summary: Search workspaces on certain keys
      operationId: SearchWorkspaces
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restSearchWorkspaceRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restWorkspaceCollection'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
  /workspace/{Slug}:
    put:
      tags:
        - WorkspaceService
      summary: Create or update a workspace
      operationId: PutWorkspace
      parameters:
        - name: Slug
          in: path
          description: >-
            Slug is an url-compatible form of the workspace label, or can be
            freely modified (max length 500)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Attributes:
                  title: JSON-encoded list of attributes
                  type: string
                Description:
                  title: Description of the workspace (max length 1000)
                  type: string
                Label:
                  title: Label of the workspace (max length 500)
                  type: string
                LastUpdated:
                  title: Last modification time
                  type: integer
                  format: int32
                Policies:
                  title: Policies for securing access
                  type: array
                  items:
                    $ref: '#/components/schemas/serviceResourcePolicy'
                PoliciesContextEditable:
                  title: >-
                    Context-resolved to quickly check if workspace is editable
                    or not
                  type: boolean
                RootNodes:
                  title: >-
                    List of the Root Nodes in the tree that compose this
                    workspace
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/treeNode'
                RootUUIDs:
                  title: Quick list of the RootNodes uuids
                  type: array
                  items:
                    type: string
                Scope:
                  $ref: '#/components/schemas/idmWorkspaceScope'
                UUID:
                  title: Unique identifier of the workspace
                  type: string
              description: >-
                A Workspace is composed of a set of nodes UUIDs and is used to
                provide accesses to the tree via ACLs.
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/idmWorkspace'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
      x-codegen-request-body-name: body
    delete:
      tags:
        - WorkspaceService
      summary: Delete an existing workspace
      operationId: DeleteWorkspace
      parameters:
        - name: Slug
          in: path
          description: >-
            Slug is an url-compatible form of the workspace label, or can be
            freely modified (max length 500)
          required: true
          schema:
            type: string
        - name: UUID
          in: query
          description: Unique identifier of the workspace
          schema:
            type: string
        - name: Label
          in: query
          description: Label of the workspace (max length 500)
          schema:
            type: string
        - name: Description
          in: query
          description: Description of the workspace (max length 1000)
          schema:
            type: string
        - name: Scope
          in: query
          description: Scope can be ADMIN, ROOM (=CELL) or LINK
          schema:
            type: string
            default: ANY
            enum:
              - ANY
              - ADMIN
              - ROOM
              - LINK
        - name: LastUpdated
          in: query
          description: Last modification time
          schema:
            type: integer
            format: int32
        - name: Attributes
          in: query
          description: JSON-encoded list of attributes
          schema:
            type: string
        - name: RootUUIDs
          in: query
          description: Quick list of the RootNodes uuids
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: PoliciesContextEditable
          in: query
          description: Context-resolved to quickly check if workspace is editable or not
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restDeleteResponse'
        '401':
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '403':
          description: User has no permission to access this particular resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '404':
          description: Resource does not exist in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
        '500':
          description: An internal error occurred in the backend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restError'
components:
  schemas:
    ListLogRequestLogFormat:
      title: Output Format
      type: string
      default: JSON
      enum:
        - JSON
        - CSV
        - XLSX
    ListSharedResourcesRequestListShareType:
      type: string
      default: ANY
      enum:
        - ANY
        - LINKS
        - CELLS
    ListSharedResourcesResponseSharedResource:
      title: Container for ShareLink or Cell
      type: object
      properties:
        Cells:
          type: array
          items:
            $ref: '#/components/schemas/restCell'
        Link:
          $ref: '#/components/schemas/restShareLink'
        Node:
          $ref: '#/components/schemas/treeNode'
    PackagePackageStatus:
      type: string
      default: Draft
      enum:
        - Draft
        - Pending
        - Released
    ResourcePolicyQueryQueryType:
      type: string
      default: CONTEXT
      enum:
        - CONTEXT
        - ANY
        - NONE
        - USER
    UpdateUserMetaNamespaceRequestUserMetaNsOp:
      type: string
      default: PUT
      enum:
        - PUT
        - DELETE
    UpdateUserMetaRequestUserMetaOp:
      type: string
      default: PUT
      enum:
        - PUT
        - DELETE
    activityObject:
      type: object
      properties:
        '@context':
          type: string
        accuracy:
          title: Place Properties
          type: number
          format: float
        actor:
          $ref: '#/components/schemas/activityObject'
        altitude:
          type: number
          format: float
        anyOf:
          $ref: '#/components/schemas/activityObject'
        attachment:
          $ref: '#/components/schemas/activityObject'
        attributedTo:
          $ref: '#/components/schemas/activityObject'
        audience:
          $ref: '#/components/schemas/activityObject'
        bcc:
          $ref: '#/components/schemas/activityObject'
        bto:
          $ref: '#/components/schemas/activityObject'
        cc:
          $ref: '#/components/schemas/activityObject'
        closed:
          type: string
          format: date-time
        content:
          $ref: '#/components/schemas/activityObject'
        context:
          $ref: '#/components/schemas/activityObject'
        current:
          $ref: '#/components/schemas/activityObject'
        deleted:
          type: string
          format: date-time
        duration:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        first:
          $ref: '#/components/schemas/activityObject'
        formerType:
          $ref: '#/components/schemas/activityObjectType'
        generator:
          $ref: '#/components/schemas/activityObject'
        height:
          type: integer
          format: int32
        href:
          title: Link Properties
          type: string
        hreflang:
          type: string
        icon:
          $ref: '#/components/schemas/activityObject'
        id:
          type: string
        image:
          $ref: '#/components/schemas/activityObject'
        inReplyTo:
          $ref: '#/components/schemas/activityObject'
        instrument:
          $ref: '#/components/schemas/activityObject'
        items:
          title: Collection Properties
          type: array
          items:
            $ref: '#/components/schemas/activityObject'
        last:
          $ref: '#/components/schemas/activityObject'
        latitude:
          type: number
          format: float
        location:
          $ref: '#/components/schemas/activityObject'
        longitude:
          type: number
          format: float
        markdown:
          type: string
        mediaType:
          type: string
        name:
          type: string
        next:
          $ref: '#/components/schemas/activityObject'
        object:
          $ref: '#/components/schemas/activityObject'
        oneOf:
          $ref: '#/components/schemas/activityObject'
        origin:
          $ref: '#/components/schemas/activityObject'
        partOf:
          $ref: '#/components/schemas/activityObject'
        prev:
          $ref: '#/components/schemas/activityObject'
        preview:
          $ref: '#/components/schemas/activityObject'
        published:
          type: string
          format: date-time
        radius:
          type: number
          format: float
        rel:
          type: string
        relationship:
          $ref: '#/components/schemas/activityObject'
        replies:
          $ref: '#/components/schemas/activityObject'
        result:
          $ref: '#/components/schemas/activityObject'
        startTime:
          type: string
          format: date-time
        subject:
          $ref: '#/components/schemas/activityObject'
        summary:
          type: string
        tag:
          $ref: '#/components/schemas/activityObject'
        target:
          $ref: '#/components/schemas/activityObject'
        to:
          $ref: '#/components/schemas/activityObject'
        totalItems:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/activityObjectType'
        units:
          type: string
        updated:
          type: string
          format: date-time
        url:
          $ref: '#/components/schemas/activityObject'
        width:
          type: integer
          format: int32
    activityObjectType:
      title: |-
        - Collection: CollectionTypes
         - Application: Actor Types
         - Article: Objects Types
         - Accept: Activity Types
         - Workspace: Pydio Types
      type: string
      default: BaseObject
      enum:
        - BaseObject
        - Activity
        - Link
        - Mention
        - Collection
        - OrderedCollection
        - CollectionPage
        - OrderedCollectionPage
        - Application
        - Group
        - Organization
        - Person
        - Service
        - Article
        - Audio
        - Document
        - Event
        - Image
        - Note
        - Page
        - Place
        - Profile
        - Relationship
        - Tombstone
        - Video
        - Accept
        - Add
        - Announce
        - Arrive
        - Block
        - Create
        - Delete
        - Dislike
        - Flag
        - Follow
        - Ignore
        - Invite
        - Join
        - Leave
        - Like
        - Listen
        - Move
        - Offer
        - Question
        - Reject
        - Read
        - Remove
        - TentativeReject
        - TentativeAccept
        - Travel
        - Undo
        - Update
        - UpdateComment
        - UpdateMeta
        - View
        - Workspace
        - Digest
        - Folder
        - Cell
        - Share
    activityOwnerType:
      type: string
      default: NODE
      enum:
        - NODE
        - USER
    activitySearchSubscriptionsRequest:
      type: object
      properties:
        ObjectIds:
          title: Filter by object Ids
          type: array
          items:
            type: string
        ObjectTypes:
          title: Filter by type of objects
          type: array
          items:
            $ref: '#/components/schemas/activityOwnerType'
        UserIds:
          title: List of UserIds for which we want to list
          type: array
          items:
            type: string
    activityStreamActivitiesRequest:
      type: object
      properties:
        AsDigest:
          title: Compute a digest of all unread activities
          type: boolean
        BoxName:
          title: Target inbox or outbox for the given object
          type: string
        Context:
          $ref: '#/components/schemas/activityStreamContext'
        ContextData:
          title: Value for the context (e.g. User Id, Node Id)
          type: string
        Language:
          type: string
          description: >-
            Provide language information for building the human-readable
            strings.
        Limit:
          title: Limit the number of results
          type: string
          format: int64
        Offset:
          title: Start listing at a given position
          type: string
          format: int64
        PointOfView:
          $ref: '#/components/schemas/activitySummaryPointOfView'
        StreamFilter:
          title: Json-encoded filter
          type: string
        UnreadCountOnly:
          title: Count last activities that were not loaded yet
          type: boolean
    activityStreamContext:
      type: string
      default: MYFEED
      enum:
        - MYFEED
        - USER_ID
        - NODE_ID
    activitySubscription:
      type: object
      properties:
        Events:
          title: List of events to listen to
          type: array
          items:
            type: string
        ObjectId:
          title: If of the owner
          type: string
        ObjectType:
          $ref: '#/components/schemas/activityOwnerType'
        UserId:
          title: Id of the user for this subscription
          type: string
    activitySummaryPointOfView:
      type: string
      default: GENERIC
      enum:
        - GENERIC
        - ACTOR
        - SUBJECT
    authToken:
      type: object
      properties:
        AccessToken:
          type: string
        ExpiresAt:
          type: string
        IDToken:
          type: string
        RefreshToken:
          type: string
    ctlPeer:
      type: object
      properties:
        Address:
          type: string
        Id:
          type: string
        Metadata:
          type: object
          additionalProperties:
            type: string
        Port:
          type: integer
          format: int32
    ctlService:
      type: object
      properties:
        Controllable:
          type: boolean
        Description:
          type: string
        Metadata:
          type: object
          additionalProperties:
            type: string
        Name:
          type: string
        RunningPeers:
          type: array
          items:
            $ref: '#/components/schemas/ctlPeer'
        Status:
          $ref: '#/components/schemas/ctlServiceStatus'
        Tag:
          type: string
        Version:
          type: string
    ctlServiceCommand:
      type: string
      default: START
      enum:
        - START
        - STOP
    ctlServiceStatus:
      type: string
      default: ANY
      enum:
        - ANY
        - STOPPED
        - STARTING
        - STOPPING
        - STARTED
    encryptionAdminCreateKeyRequest:
      type: object
      properties:
        KeyID:
          title: Create a key with this ID
          type: string
        Label:
          title: Provide label for the newly created key
          type: string
    encryptionAdminCreateKeyResponse:
      type: object
      properties:
        Success:
          type: boolean
    encryptionAdminDeleteKeyRequest:
      type: object
      properties:
        KeyID:
          title: Id of the key to delete
          type: string
    encryptionAdminDeleteKeyResponse:
      type: object
      properties:
        Success:
          type: boolean
    encryptionAdminExportKeyRequest:
      type: object
      properties:
        KeyID:
          title: Id of the key to export
          type: string
        StrPassword:
          title: Associated password as string
          type: string
    encryptionAdminExportKeyResponse:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/encryptionKey'
    encryptionAdminImportKeyRequest:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/encryptionKey'
        Override:
          title: Whether to override if a key with same ID already exists
          type: boolean
        StrPassword:
          title: Key password
          type: string
    encryptionAdminImportKeyResponse:
      type: object
      properties:
        Success:
          type: boolean
    encryptionAdminListKeysRequest:
      type: object
      properties:
        All:
          type: boolean
    encryptionAdminListKeysResponse:
      type: object
      properties:
        Keys:
          type: array
          items:
            $ref: '#/components/schemas/encryptionKey'
    encryptionExport:
      type: object
      properties:
        By:
          title: Name of exporter
          type: string
        Date:
          title: Date of export
          type: integer
          format: int32
    encryptionImport:
      type: object
      properties:
        By:
          title: Name of importer
          type: string
        Date:
          title: Date of import
          type: integer
          format: int32
    encryptionKey:
      type: object
      properties:
        Content:
          title: Key content
          type: string
        CreationDate:
          title: Key creation date
          type: integer
          format: int32
        ID:
          title: Key ID
          type: string
        Info:
          $ref: '#/components/schemas/encryptionKeyInfo'
        Label:
          title: Key label
          type: string
        Owner:
          title: Key owner
          type: string
    encryptionKeyInfo:
      type: object
      properties:
        Exports:
          type: array
          items:
            $ref: '#/components/schemas/encryptionExport'
        Imports:
          type: array
          items:
            $ref: '#/components/schemas/encryptionImport'
    idmACL:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/idmACLAction'
        ID:
          title: Unique ID of this ACL
          type: string
        NodeID:
          title: Associated Node
          type: string
        RoleID:
          title: Associated Role
          type: string
        WorkspaceID:
          title: Associated Workspace
          type: string
      description: >-
        ACL are the basic flags that can be put anywhere in the tree to provide
        some specific rights to a given role.

        The context of how they apply can be fine-tuned by workspace.
    idmACLAction:
      type: object
      properties:
        Name:
          title: ACL Action name, most frequent values are "read" or "write"
          type: string
        Value:
          title: ACL Action value
          type: string
    idmACLSingleQuery:
      type: object
      properties:
        Actions:
          title: List of Actions to lookup
          type: array
          items:
            $ref: '#/components/schemas/idmACLAction'
        NodeIDs:
          title: Filter by one or more node UUID
          type: array
          items:
            type: string
        RoleIDs:
          title: Filter by one or more role UUID
          type: array
          items:
            type: string
        WorkspaceIDs:
          title: Filter by one or more workspace UUID
          type: array
          items:
            type: string
        not:
          title: Internal - Negate query
          type: boolean
    idmListPolicyGroupsRequest:
      type: object
      properties:
        Filter:
          type: string
    idmListPolicyGroupsResponse:
      type: object
      properties:
        PolicyGroups:
          type: array
          items:
            $ref: '#/components/schemas/idmPolicyGroup'
        Total:
          type: integer
          format: int32
    idmNodeType:
      type: string
      default: UNKNOWN
      enum:
        - UNKNOWN
        - USER
        - GROUP
    idmPolicy:
      type: object
      properties:
        actions:
          type: array
          items:
            type: string
        conditions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/idmPolicyCondition'
        description:
          type: string
        effect:
          $ref: '#/components/schemas/idmPolicyEffect'
        id:
          type: string
        resources:
          type: array
          items:
            type: string
        subjects:
          type: array
          items:
            type: string
    idmPolicyCondition:
      type: object
      properties:
        jsonOptions:
          type: string
        type:
          type: string
    idmPolicyEffect:
      type: string
      default: unknown
      enum:
        - unknown
        - deny
        - allow
    idmPolicyGroup:
      type: object
      properties:
        Description:
          type: string
        LastUpdated:
          type: integer
          format: int32
        Name:
          type: string
        OwnerUuid:
          type: string
        Policies:
          type: array
          items:
            $ref: '#/components/schemas/idmPolicy'
        ResourceGroup:
          $ref: '#/components/schemas/idmPolicyResourceGroup'
        Uuid:
          type: string
    idmPolicyResourceGroup:
      type: string
      default: rest
      enum:
        - rest
        - acl
        - oidc
    idmRole:
      type: object
      properties:
        AutoApplies:
          title: >-
            List of profiles (standard, shared, admin) on which the role will be
            automatically applied
          type: array
          items:
            type: string
        ForceOverride:
          type: boolean
          description: Is used in a stack of roles, this one will always be applied last.
        GroupRole:
          title: Whether this role is attached to a Group object
          type: boolean
        IsTeam:
          title: Whether this role represents a user team or not
          type: boolean
        Label:
          title: Label of this role
          type: string
        LastUpdated:
          title: Last modification date of the role
          type: integer
          format: int32
        Policies:
          title: List of policies for securing this role access
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          title: Whether the policies resolve into an editable state
          type: boolean
        UserRole:
          title: Whether this role is attached to a User object
          type: boolean
        Uuid:
          title: Unique identifier of this role
          type: string
      description: >-
        Role represents a generic set of permissions that can be applied to any
        users or groups.
    idmRoleSingleQuery:
      type: object
      properties:
        HasAutoApply:
          title: Look for roles that have any value in the autoApplies field
          type: boolean
        IsGroupRole:
          title: Look for roles associated with a Group
          type: boolean
        IsTeam:
          title: Look up for roles associated with a Team
          type: boolean
        IsUserRole:
          title: Look for roles associated with a User
          type: boolean
        Label:
          title: Look for roles by label, eventually using "wildchar"
          type: string
        Uuid:
          title: Look for roles by Uuid
          type: array
          items:
            type: string
        not:
          title: Internal - Negate the query
          type: boolean
      description: RoleSingleQuery is the basic unit for building queries to Roles.
    idmSearchUserMetaRequest:
      title: Request for searching UserMeta by NodeUuid or by Namespace
      type: object
      properties:
        MetaUuids:
          title: Look for meta by their unique identifier
          type: array
          items:
            type: string
        Namespace:
          title: Filter meta by their namespace
          type: string
        NodeUuids:
          title: Look for all meta for a list of nodes
          type: array
          items:
            type: string
        ResourceQuery:
          $ref: '#/components/schemas/serviceResourcePolicyQuery'
        ResourceSubjectOwner:
          title: Filter meta by owner (in the sense of the policies)
          type: string
    idmUpdateUserMetaNamespaceRequest:
      title: Modify UserMetaNamespaces
      type: object
      properties:
        Namespaces:
          type: array
          items:
            $ref: '#/components/schemas/idmUserMetaNamespace'
        Operation:
          $ref: '#/components/schemas/UpdateUserMetaNamespaceRequestUserMetaNsOp'
    idmUpdateUserMetaNamespaceResponse:
      title: Response of the
      type: object
      properties:
        Namespaces:
          type: array
          items:
            $ref: '#/components/schemas/idmUserMetaNamespace'
    idmUpdateUserMetaRequest:
      title: Request for modifying UserMeta
      type: object
      properties:
        MetaDatas:
          title: List of metadatas to update or delete
          type: array
          items:
            $ref: '#/components/schemas/idmUserMeta'
        Operation:
          $ref: '#/components/schemas/UpdateUserMetaRequestUserMetaOp'
    idmUpdateUserMetaResponse:
      title: Response of UpdateUserMeta service
      type: object
      properties:
        MetaDatas:
          title: List of metadatas
          type: array
          items:
            $ref: '#/components/schemas/idmUserMeta'
    idmUser:
      title: User can represent either a User or a Group
      type: object
      properties:
        Attributes:
          title: A free list of attributes
          type: object
          additionalProperties:
            type: string
        GroupLabel:
          title: Label of the group, field is empty for users
          type: string
        GroupPath:
          title: Path to the parent group
          type: string
        IsGroup:
          title: Whether this object is a group or a user
          type: boolean
        LastConnected:
          title: Last successful connection timestamp
          type: integer
          format: int32
        Login:
          title: User login is used to connect, field is empty for groups
          type: string
        OldPassword:
          title: OldPassword must be set when a user updates her own password
          type: string
        Password:
          title: >-
            Password can be passed to be updated (but never read back), field is
            empty for groups
          type: string
        Policies:
          title: Policies securing access to this user
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          type: boolean
          description: Context-resolved to quickly check if user is editable or not.
        Roles:
          title: List of roles applied to this user or group
          type: array
          items:
            $ref: '#/components/schemas/idmRole'
        Uuid:
          title: User unique identifier
          type: string
    idmUserMeta:
      title: Piece of metadata attached to a node
      type: object
      properties:
        JsonValue:
          title: Json encoded value used to pass any type of values
          type: string
        Namespace:
          title: Namespace for the metadata
          type: string
        NodeUuid:
          title: Unique identifier of the node to which meta is attached
          type: string
        Policies:
          title: Policies for securing access
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          title: Context-resolved to quickly check if this meta is editable or not
          type: boolean
        ResolvedNode:
          $ref: '#/components/schemas/treeNode'
        Uuid:
          title: Unique identifier of the metadata
          type: string
    idmUserMetaNamespace:
      title: Globally declared Namespace with associated policies
      type: object
      properties:
        Indexable:
          title: >-
            Whether a modification of a metadata value for this namespace should
            trigger an indexation by the search engine
          type: boolean
        JsonDefinition:
          title: Json-encoded type to provide accurate interface for edition
          type: string
        Label:
          title: Human-readable Label
          type: string
        Namespace:
          title: Namespace identifier, must be unique
          type: string
        Order:
          title: Order is used for sorting lists of namesapces
          type: integer
          format: int32
        Policies:
          title: Policies securing this namespace
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          title: Context-resolved to quickly check if this meta is editable or not
          type: boolean
    idmUserSingleQuery:
      type: object
      properties:
        AttributeAnyValue:
          title: Search for the existence of the AttributeName, whatever its value
          type: boolean
        AttributeName:
          title: Search on attribute, to be combined with AttributeValue
          type: string
        AttributeValue:
          title: Value used for comparison
          type: string
        ConnectedSince:
          title: >-
            Lookup by last connection date. Must be a timestamp with a leading
            comparison symbol ('<' or '>')
          type: string
        FullPath:
          title: Search one specific Group by its path
          type: string
        GroupPath:
          title: List users below a specific on group path
          type: string
        HasProfile:
          title: >-
            Lookup by profile name (e.g. admin, standard, shared). This is a
            shortcut for searching on the pydio:profile attribute
          type: string
        HasRole:
          title: Search users having a specific role UUID
          type: string
        Login:
          title: Lookup a user by Login
          type: string
        NodeType:
          $ref: '#/components/schemas/idmNodeType'
        Password:
          title: Lookup by hashed password, probably never used
          type: string
        Recursive:
          title: When searching on group path, load all users and groups recursively
          type: boolean
        Uuid:
          title: Lookup a user by its Uuid
          type: string
        not:
          title: Internal - Negate the query/filter result
          type: boolean
    idmWorkspace:
      type: object
      properties:
        Attributes:
          title: JSON-encoded list of attributes
          type: string
        Description:
          title: Description of the workspace (max length 1000)
          type: string
        Label:
          title: Label of the workspace (max length 500)
          type: string
        LastUpdated:
          title: Last modification time
          type: integer
          format: int32
        Policies:
          title: Policies for securing access
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          title: Context-resolved to quickly check if workspace is editable or not
          type: boolean
        RootNodes:
          title: List of the Root Nodes in the tree that compose this workspace
          type: object
          additionalProperties:
            $ref: '#/components/schemas/treeNode'
        RootUUIDs:
          title: Quick list of the RootNodes uuids
          type: array
          items:
            type: string
        Scope:
          $ref: '#/components/schemas/idmWorkspaceScope'
        Slug:
          title: >-
            Slug is an url-compatible form of the workspace label, or can be
            freely modified (max length 500)
          type: string
        UUID:
          title: Unique identifier of the workspace
          type: string
      description: >-
        A Workspace is composed of a set of nodes UUIDs and is used to provide
        accesses to the tree via ACLs.
    idmWorkspaceScope:
      type: string
      default: ANY
      enum:
        - ANY
        - ADMIN
        - ROOM
        - LINK
    idmWorkspaceSingleQuery:
      type: object
      properties:
        AttributeName:
          title: >-
            Lookup for an attribute, to be used in combination with
            AttributeValue
          type: string
        AttributeValue:
          title: Value used for comparison
          type: string
        HasAttribute:
          title: Lookup for the presence of a specific attribute, whatever its value
          type: string
        LastUpdated:
          title: >-
            Compared to workspace update date (Golang duration with a leading
            comparator < or >)
          type: string
        description:
          title: Lookup by description
          type: string
        label:
          title: Lookup by workspace Label
          type: string
        not:
          title: Internal - Negate the query result
          type: boolean
        scope:
          $ref: '#/components/schemas/idmWorkspaceScope'
        slug:
          title: Select workspace by slug
          type: string
        uuid:
          title: Lookup by workspace Uuid
          type: string
    installCheckResult:
      type: object
      properties:
        JsonResult:
          type: string
        Name:
          type: string
        Success:
          type: boolean
    installGetAgreementResponse:
      type: object
      properties:
        Text:
          type: string
    installGetDefaultsResponse:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/installInstallConfig'
    installInstallConfig:
      type: object
      properties:
        CheckResults:
          type: array
          items:
            $ref: '#/components/schemas/installCheckResult'
        DocumentsDSN:
          title: Additional Documents DSN data
          type: string
        ProxyConfig:
          $ref: '#/components/schemas/installProxyConfig'
        UseDocumentsDSN:
          type: boolean
        dbConnectionType:
          type: string
        dbManualDSN:
          type: string
        dbSocketFile:
          type: string
        dbSocketName:
          type: string
        dbSocketPassword:
          type: string
        dbSocketUser:
          type: string
        dbTCPHostname:
          type: string
        dbTCPName:
          type: string
        dbTCPPassword:
          type: string
        dbTCPPort:
          type: string
        dbTCPUser:
          type: string
        dbUseDefaults:
          type: boolean
        dsFolder:
          type: string
        dsName:
          type: string
        dsPort:
          type: string
        dsS3ApiKey:
          type: string
        dsS3ApiSecret:
          type: string
        dsS3BucketBinaries:
          type: string
        dsS3BucketCells:
          type: string
        dsS3BucketDefault:
          type: string
        dsS3BucketPersonal:
          type: string
        dsS3BucketThumbs:
          type: string
        dsS3BucketVersions:
          type: string
        dsS3Custom:
          type: string
        dsS3CustomRegion:
          type: string
        dsType:
          type: string
        frontendApplicationTitle:
          type: string
        frontendDefaultLanguage:
          type: string
        frontendHosts:
          type: string
        frontendLogin:
          type: string
        frontendPassword:
          type: string
        frontendRepeatPassword:
          type: string
        internalUrl:
          type: string
        licenseRequired:
          type: boolean
        licenseString:
          type: string
    installInstallEventsResponse:
      type: object
      properties:
        Success:
          type: boolean
    installInstallRequest:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/installInstallConfig'
    installInstallResponse:
      type: object
      properties:
        success:
          type: boolean
    installPerformCheckRequest:
      type: object
      properties:
        Config:
          $ref: '#/components/schemas/installInstallConfig'
        Name:
          type: string
    installPerformCheckResponse:
      type: object
      properties:
        Result:
          $ref: '#/components/schemas/installCheckResult'
    installProxyConfig:
      title: ProxyConfig gives necessary URL and TLS configurations to start proxy
      type: object
      properties:
        Binds:
          title: A list of [host]:port to bind to
          type: array
          items:
            type: string
        Certificate:
          $ref: '#/components/schemas/installTLSCertificate'
        LetsEncrypt:
          $ref: '#/components/schemas/installTLSLetsEncrypt'
        Maintenance:
          title: If set, this site will be in maintenance mode
          type: boolean
        MaintenanceConditions:
          title: Append caddy directive to restrict maintenance mode
          type: array
          items:
            type: string
        ReverseProxyURL:
          title: Optional URL of reverse proxy exposing this site
          type: string
        SSLRedirect:
          title: >-
            If TLS is set, whether to automatically redirect each
            http://host:port to https://host:port
          type: boolean
        SelfSigned:
          $ref: '#/components/schemas/installTLSSelfSigned'
    installTLSCertificate:
      title: TLSCertificate is a TLSConfig where user passes
      type: object
      properties:
        CellsRootCA:
          type: string
        CertFile:
          type: string
        KeyFile:
          type: string
    installTLSLetsEncrypt:
      title: >-
        TLSLetsEncrypt set up proxy to automatically get a valid certificate
        from let's encrypt servers
      type: object
      properties:
        AcceptEULA:
          type: boolean
        Email:
          type: string
        StagingCA:
          type: boolean
    installTLSSelfSigned:
      title: TLSSelfSigned generates a selfsigned certificate
      type: object
      properties:
        Hostnames:
          type: array
          items:
            type: string
    jobsAction:
      type: object
      properties:
        ActionOutputFilter:
          $ref: '#/components/schemas/jobsActionOutputFilter'
        BreakAfter:
          title: 'Stop full chain now : do not carry on executing next actions'
          type: boolean
        Bypass:
          title: Bypass this action (forward input to output and do nothing)
          type: boolean
        ChainedActions:
          title: |-
            Other actions to perform after this one is finished,
            using the Output of this action as Input for the next.
            If there are many, it is considered they can be triggered
            in parallel
          type: array
          items:
            $ref: '#/components/schemas/jobsAction'
        ContextMetaFilter:
          $ref: '#/components/schemas/jobsContextMetaFilter'
        DataSourceFilter:
          $ref: '#/components/schemas/jobsDataSourceSelector'
        DataSourceSelector:
          $ref: '#/components/schemas/jobsDataSourceSelector'
        Description:
          title: User-defined comment for this action
          type: string
        FailedFilterActions:
          title: |-
            If any Filter is used, next actions can be triggered on Failure
            This adds ability to create conditional Yes/No branches
          type: array
          items:
            $ref: '#/components/schemas/jobsAction'
        ID:
          title: String Identifier for specific action
          type: string
        IdmFilter:
          $ref: '#/components/schemas/jobsIdmSelector'
        IdmSelector:
          $ref: '#/components/schemas/jobsIdmSelector'
        Label:
          title: User-defined label for this action
          type: string
        MergeAction:
          $ref: '#/components/schemas/jobsAction'
        NodesFilter:
          $ref: '#/components/schemas/jobsNodesSelector'
        NodesSelector:
          $ref: '#/components/schemas/jobsNodesSelector'
        Parameters:
          title: Defined parameters for this action
          type: object
          additionalProperties:
            type: string
        Timeout:
          title: Optional timeout for this action
          type: string
        TriggerFilter:
          $ref: '#/components/schemas/jobsTriggerFilter'
        UsersFilter:
          $ref: '#/components/schemas/jobsUsersSelector'
        UsersSelector:
          $ref: '#/components/schemas/jobsUsersSelector'
    jobsActionLog:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/jobsAction'
        InputMessage:
          $ref: '#/components/schemas/jobsActionMessage'
        OutputMessage:
          $ref: '#/components/schemas/jobsActionMessage'
    jobsActionMessage:
      title: |-
        Message passed along from one action to another, main properties
        are modified by the various actions.
        OutputChain is being stacked up when passing through actions
      type: object
      properties:
        Acls:
          title: One or more ACL
          type: array
          items:
            $ref: '#/components/schemas/idmACL'
        Activities:
          title: One or more Activity
          type: array
          items:
            $ref: '#/components/schemas/activityObject'
        DataSources:
          title: One or more DataSource
          type: array
          items:
            $ref: '#/components/schemas/objectDataSource'
        Event:
          $ref: '#/components/schemas/protobufAny'
        Nodes:
          title: One or more Node
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        OutputChain:
          title: Stack of ActionOutput messages appended by all previous actions
          type: array
          items:
            $ref: '#/components/schemas/jobsActionOutput'
        Roles:
          title: One or more Role
          type: array
          items:
            $ref: '#/components/schemas/idmRole'
        Users:
          title: One or more User
          type: array
          items:
            $ref: '#/components/schemas/idmUser'
        Workspaces:
          title: One or more Workspace
          type: array
          items:
            $ref: '#/components/schemas/idmWorkspace'
    jobsActionOutput:
      title: |-
        Standard output of an action. Success value is required
        other are optional
      type: object
      properties:
        ErrorString:
          title: Error
          type: string
        Ignored:
          title: If action was returned WithIgnore()
          type: boolean
        JsonBody:
          title: Arbitrary JSON-encoded bytes
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        RawBody:
          title: Arbitrary bytes sequence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        StringBody:
          title: Arbitrary string
          type: string
        Success:
          title: True if action succeeded
          type: boolean
        Time:
          title: Time taken to run the action
          type: integer
          format: int32
        Vars:
          type: object
          additionalProperties:
            type: string
          description: Vars container, values are json-encoded.
    jobsActionOutputFilter:
      title: ActionOutputFilter can be used to filter last message output
      type: object
      properties:
        Description:
          title: Selector additional description
          type: string
        Label:
          title: Selector custom label
          type: string
        Query:
          $ref: '#/components/schemas/serviceQuery'
    jobsCommand:
      type: string
      default: None
      enum:
        - None
        - Pause
        - Resume
        - Stop
        - Delete
        - RunOnce
        - Inactive
        - Active
    jobsContextMetaFilter:
      title: PolicyContextFilter can be used to filter request metadata
      type: object
      properties:
        Description:
          title: Selector additional description
          type: string
        Label:
          title: Selector custom label
          type: string
        Query:
          $ref: '#/components/schemas/serviceQuery'
        Type:
          $ref: '#/components/schemas/jobsContextMetaFilterType'
    jobsContextMetaFilterType:
      type: string
      default: RequestMeta
      enum:
        - RequestMeta
        - ContextUser
    jobsCtrlCommand:
      title: Command sent to control a job or a task
      type: object
      properties:
        Cmd:
          $ref: '#/components/schemas/jobsCommand'
        JobId:
          title: Id of the job
          type: string
        OwnerId:
          title: Owner of the job
          type: string
        RunParameters:
          title: Parameters used for RunOnce command
          type: object
          additionalProperties:
            type: string
        TaskId:
          title: Id of the associated task
          type: string
    jobsCtrlCommandResponse:
      title: Response to the CtrlCommand
      type: object
      properties:
        Msg:
          type: string
    jobsDataSourceSelector:
      title: Selector/Filter for DataSource objects
      type: object
      properties:
        All:
          title: Select all
          type: boolean
        Collect:
          title: Collect results
          type: boolean
        Description:
          title: Selector additional description
          type: string
        FanOutInput:
          title: Ignore query and just fan out input.DataSources
          type: boolean
        Label:
          title: Selector custom label
          type: string
        Query:
          $ref: '#/components/schemas/serviceQuery'
        Timeout:
          title: Optional Timeout for this selector
          type: string
        Type:
          $ref: '#/components/schemas/jobsDataSourceSelectorType'
    jobsDataSourceSelectorType:
      type: string
      default: DataSource
      enum:
        - DataSource
        - Object
    jobsDeleteTasksRequest:
      type: object
      properties:
        JobId:
          title: Id of the job
          type: string
        PruneLimit:
          title: If deleting by status, optionally keep only a number of tasks
          type: integer
          format: int32
        Status:
          title: If no TaskID and/or no JobID are passed, delete tasks by status
          type: array
          items:
            $ref: '#/components/schemas/jobsTaskStatus'
        TaskID:
          title: Ids of tasks to delete
          type: array
          items:
            type: string
    jobsDeleteTasksResponse:
      type: object
      properties:
        Deleted:
          type: array
          items:
            type: string
    jobsIdmSelector:
      title: Generic container for select/filter idm objects
      type: object
      properties:
        All:
          title: Load all objects
          type: boolean
        Collect:
          title: >-
            Pass a slice of objects to one action, or trigger all actions in
            parallel
          type: boolean
        Description:
          title: Selector additional description
          type: string
        FanOutInput:
          title: Ignore query and just fan out input.[Type]
          type: boolean
        Label:
          title: Selector custom label
          type: string
        Query:
          $ref: '#/components/schemas/serviceQuery'
        Timeout:
          title: Optional Timeout for this selector
          type: string
        Type:
          $ref: '#/components/schemas/jobsIdmSelectorType'
    jobsIdmSelectorType:
      title: Possible values for IdmSelector.Type
      type: string
      default: User
      enum:
        - User
        - Role
        - Workspace
        - Acl
    jobsJob:
      type: object
      properties:
        Actions:
          title: Chain of actions to perform
          type: array
          items:
            $ref: '#/components/schemas/jobsAction'
        AutoClean:
          title: Remove job automatically once it is finished (success only)
          type: boolean
        AutoStart:
          title: Start task as soon as job is inserted
          type: boolean
        ContextMetaFilter:
          $ref: '#/components/schemas/jobsContextMetaFilter'
        CreatedAt:
          title: Timestamp for creation time
          type: integer
          format: int32
        Custom:
          title: Job created by application or by administrator
          type: boolean
        DataSourceFilter:
          $ref: '#/components/schemas/jobsDataSourceSelector'
        EventNames:
          title: |-
            How the job will be triggered.
            One of these must be set (not exclusive)
            Listen to a given set of events
          type: array
          items:
            type: string
        Hooks:
          title: Expose this job through one or more-userspace APIs
          type: array
          items:
            $ref: '#/components/schemas/jobsJobHook'
        ID:
          title: Unique ID for this Job
          type: string
        IdmFilter:
          $ref: '#/components/schemas/jobsIdmSelector'
        Inactive:
          title: Admin can temporarily disable this job
          type: boolean
        Label:
          title: Human-readable Label
          type: string
        Languages:
          title: Optional list of languages detected in the context at launch time
          type: array
          items:
            type: string
        MaxConcurrency:
          title: Task properties
          type: integer
          format: int32
        MergeAction:
          $ref: '#/components/schemas/jobsAction'
        ModifiedAt:
          title: Timestamp for modification time
          type: integer
          format: int32
        NodeEventFilter:
          $ref: '#/components/schemas/jobsNodesSelector'
        Owner:
          title: Who created this Job
          type: string
        Parameters:
          title: Job-level parameters that can be passed to underlying actions
          type: array
          items:
            $ref: '#/components/schemas/jobsJobParameter'
        ResourcesDependencies:
          title: Additional dependencies that may be required when running the job
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
        Schedule:
          $ref: '#/components/schemas/jobsSchedule'
        Tasks:
          title: Filled with currently running tasks
          type: array
          items:
            $ref: '#/components/schemas/jobsTask'
        TasksSilentUpdate:
          title: Do not send notification on task update
          type: boolean
        Timeout:
          title: Optional Timeout any running job
          type: string
        UserEventFilter:
          $ref: '#/components/schemas/jobsUsersSelector'
        VersionMeta:
          title: Additional Versioning Metadata
          type: object
          additionalProperties:
            type: string
    jobsJobHook:
      title: Dynamically expose a job trigger via API
      type: object
      properties:
        AllowOverridePresets:
          title: Allow trigger parameters to override default presets
          type: boolean
        ApiSlug:
          title: Custom ApiSlug, otherwise use the job UUID
          type: string
        Metadata:
          title: Additional arbitrary metadata attached to this hook
          type: object
          additionalProperties:
            type: string
        Policies:
          title: Set permissions for accessing this endpoint
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PresetParameters:
          title: >-
            Preset parameters values when calling this endpoint. May be
            overriden by a map[string]string in the body
          type: object
          additionalProperties:
            type: string
    jobsJobParameter:
      type: object
      properties:
        Description:
          title: Additional description
          type: string
        JsonChoices:
          title: Additional data used by GUI elements
          type: string
        Mandatory:
          title: If mandatory, job cannot start without a value
          type: boolean
        Name:
          title: Parameter name
          type: string
        Type:
          title: Parameter type used in GUI forms
          type: string
        Value:
          title: Value saved for this parameter
          type: string
    jobsListJobsRequest:
      type: object
      properties:
        EventsOnly:
          title: Filter with only event-based jobs
          type: boolean
        JobIDs:
          title: Load jobs by their ID
          type: array
          items:
            type: string
        LoadTasks:
          $ref: '#/components/schemas/jobsTaskStatus'
        Owner:
          title: Restrict to a specific owner (current user by default)
          type: string
        TasksLimit:
          title: Lmit the number of results
          type: integer
          format: int32
        TasksOffset:
          title: Start listing at a given position
          type: integer
          format: int32
        TimersOnly:
          title: Filter with only timer-based jobs
          type: boolean
    jobsNodesSelector:
      title: |-
        /////////////////
        JOB  SERVICE  //
        /////////////////
      type: object
      properties:
        All:
          title: Select all files - ignore any other condition
          type: boolean
        Collect:
          title: |-
            Whether to trigger one action per node or one action
            with all nodes as selection
          type: boolean
        Description:
          title: Selector additional description
          type: string
        FanOutInput:
          title: Ignore query and just fan out input.Nodes
          type: boolean
        Label:
          title: Selector custom label
          type: string
        Pathes:
          title: Preset list of node pathes
          type: array
          items:
            type: string
        Query:
          $ref: '#/components/schemas/serviceQuery'
        Timeout:
          title: Optional Timeout for this selector
          type: string
    jobsSchedule:
      type: object
      properties:
        Iso8601MinDelta:
          title: Minimum time between two runs
          type: string
        Iso8601Schedule:
          type: string
          description: >-
            ISO 8601 Description of the scheduling for instance
            "R2/2015-06-04T19:25:16.828696-07:00/PT4S"

            where first part is the number of repetitions (if 0, infinite
            repetition), 

            second part the starting date and last part, the duration between 2
            occurrences.
    jobsTask:
      type: object
      properties:
        ActionsLogs:
          title: Logs of all the actions performed
          type: array
          items:
            $ref: '#/components/schemas/jobsActionLog'
        CanPause:
          title: Can be paused/resumed
          type: boolean
        CanStop:
          title: Can be interrupted
          type: boolean
        EndTime:
          type: integer
          format: int32
        HasProgress:
          title: Tasks publish a progress
          type: boolean
        ID:
          type: string
        JobID:
          type: string
        Progress:
          title: Float value of the progress between 0 and 1
          type: number
          format: float
        StartTime:
          type: integer
          format: int32
        Status:
          $ref: '#/components/schemas/jobsTaskStatus'
        StatusMessage:
          type: string
        TriggerOwner:
          type: string
    jobsTaskStatus:
      title: |-
        /////////////////
        TASK SERVICE  //
        /////////////////
      type: string
      default: Unknown
      enum:
        - Unknown
        - Idle
        - Running
        - Finished
        - Interrupted
        - Paused
        - Any
        - Error
        - Queued
    jobsTriggerFilter:
      title: Filter for events, can be applied on action branches
      type: object
      properties:
        Description:
          title: Filter additional description
          type: string
        Label:
          title: Filter custom label
          type: string
        Query:
          $ref: '#/components/schemas/serviceQuery'
    jobsUsersSelector:
      title: Select or filter users - should be replaced by more generic IdmSelector
      type: object
      properties:
        All:
          title: Select all users
          type: boolean
        Collect:
          title: |-
            Wether to trigger one action per user or one action
            with all user as a selection
          type: boolean
        Description:
          title: Selector additional description
          type: string
        Label:
          title: Selector custom label
          type: string
        Query:
          $ref: '#/components/schemas/serviceQuery'
        Timeout:
          title: Optional Timeout for this selector
          type: string
        Users:
          title: Preset set of Users
          type: array
          items:
            $ref: '#/components/schemas/idmUser'
    logListLogRequest:
      type: object
      properties:
        Format:
          $ref: '#/components/schemas/ListLogRequestLogFormat'
        Page:
          title: Start at page
          type: integer
          format: int32
        Query:
          title: Bleve-type Query stsring
          type: string
        Size:
          title: Number of results
          type: integer
          format: int32
      description: >-
        ListLogRequest launches a parameterised query in the log repository and
        streams the results.
    logLogMessage:
      type: object
      properties:
        GroupPath:
          type: string
        HttpProtocol:
          type: string
        JsonZaps:
          title: Other Unkown Fields
          type: string
        Level:
          type: string
        Logger:
          type: string
        Msg:
          type: string
        MsgId:
          title: Pydio specific
          type: string
        NodePath:
          type: string
        NodeUuid:
          title: Tree Info
          type: string
        OperationLabel:
          type: string
        OperationUuid:
          title: High Level Operation Info
          type: string
        Profile:
          type: string
        RemoteAddress:
          title: Client info
          type: string
        RoleUuids:
          type: array
          items:
            type: string
        SchedulerJobUuid:
          type: string
        SchedulerTaskActionPath:
          type: string
        SchedulerTaskUuid:
          type: string
        SpanParentUuid:
          type: string
        SpanRootUuid:
          type: string
        SpanUuid:
          title: Span Info
          type: string
        Ts:
          title: Generic zap fields
          type: integer
          format: int32
        UserAgent:
          type: string
        UserName:
          title: User Info
          type: string
        UserUuid:
          type: string
        WsScope:
          type: string
        WsUuid:
          type: string
      description: >-
        LogMessage is the format used to transmit log messages to clients via
        the REST API.
    mailerMail:
      type: object
      properties:
        Attachments:
          title: List of attachments
          type: array
          items:
            type: string
        Cc:
          title: List of target users to put in CC
          type: array
          items:
            $ref: '#/components/schemas/mailerUser'
        ContentHtml:
          title: HTML content used for the body
          type: string
        ContentMarkdown:
          title: Markdown content used for the body
          type: string
        ContentPlain:
          title: >-
            Plain-text content used for the body, if not set will be generated
            from the ContentHtml
          type: string
        DateSent:
          title: Date of sending
          type: string
          format: int64
        From:
          $ref: '#/components/schemas/mailerUser'
        Retries:
          title: Number of retries after failed attempts (used internally)
          type: integer
          format: int32
        Sender:
          $ref: '#/components/schemas/mailerUser'
        Subject:
          title: String used as subject for the email
          type: string
        TemplateData:
          title: Key/values to pass to the template
          type: object
          additionalProperties:
            type: string
        TemplateId:
          title: Mail Template Id refers to predefined templates
          type: string
        ThreadIndex:
          title: Not used, could be used to create conversations
          type: string
        ThreadUuid:
          title: Not used, could be used to create conversations
          type: string
        To:
          title: List of target users to send the mail to
          type: array
          items:
            $ref: '#/components/schemas/mailerUser'
        sendErrors:
          title: Errors stacked on failed attempts
          type: array
          items:
            type: string
    mailerSendMailResponse:
      type: object
      properties:
        Success:
          type: boolean
    mailerUser:
      type: object
      properties:
        Address:
          type: string
        Language:
          type: string
        Name:
          type: string
        Uuid:
          type: string
    objectDataSource:
      title: DataSource Object description
      type: object
      properties:
        ApiKey:
          title: Corresponding objects service api key
          type: string
        ApiSecret:
          title: Corresponding objects service api secret
          type: string
        CreationDate:
          title: Data Source creation date
          type: integer
          format: int32
        Disabled:
          title: Whether this data source is disabled or running
          type: boolean
        EncryptionKey:
          title: Encryption key used for encrypting data
          type: string
        EncryptionMode:
          $ref: '#/components/schemas/objectEncryptionMode'
        FlatStorage:
          title: Store data in flat format (object-storage like)
          type: boolean
        LastSynchronizationDate:
          title: Data Source last synchronization date
          type: integer
          format: int32
        Name:
          title: Name of the data source (max length 34)
          type: string
        ObjectsBaseFolder:
          title: Corresponding objects service base folder inside the bucket
          type: string
        ObjectsBucket:
          title: Corresponding objects service bucket
          type: string
        ObjectsHost:
          title: Corresponding objects service host
          type: string
        ObjectsPort:
          title: Corresponding objects service port
          type: integer
          format: int32
        ObjectsSecure:
          title: Corresponding objects service connection type
          type: boolean
        ObjectsServiceName:
          title: Corresponding objects service name (underlying s3 service)
          type: string
        PeerAddress:
          title: Peer address of the data source
          type: string
        SkipSyncOnRestart:
          title: Do not trigger resync at start
          type: boolean
        StorageConfiguration:
          title: List of key values describing storage configuration
          type: object
          additionalProperties:
            type: string
        StorageType:
          $ref: '#/components/schemas/objectStorageType'
        VersioningPolicyName:
          title: >-
            Versioning policy describes how files are kept in the versioning
            queue
          type: string
        Watch:
          title: Not implemented, whether to watch for underlying changes on the FS
          type: boolean
    objectEncryptionMode:
      title: Type of Encryption
      type: string
      default: CLEAR
      enum:
        - CLEAR
        - MASTER
        - USER
        - USER_PWD
    objectStorageType:
      title: Type of Gateway
      type: string
      default: LOCAL
      enum:
        - LOCAL
        - S3
        - SMB
        - CELLS
        - AZURE
        - GCS
        - B2
        - MANTA
        - SIA
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
      additionalProperties:
        type: object
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON


        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    registryActionType:
      type: string
      default: ANY
      enum:
        - ANY
        - FULL_DIFF
        - FULL_LIST
        - CREATE
        - UPDATE
        - DELETE
    registryDao:
      type: object
      properties:
        driver:
          type: string
        dsn:
          type: string
    registryEdge:
      type: object
      properties:
        vertices:
          type: array
          items:
            type: string
    registryGeneric:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/registryItemType'
    registryItem:
      type: object
      properties:
        adjacents:
          type: array
          items:
            $ref: '#/components/schemas/registryItem'
        dao:
          $ref: '#/components/schemas/registryDao'
        edge:
          $ref: '#/components/schemas/registryEdge'
        generic:
          $ref: '#/components/schemas/registryGeneric'
        id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        node:
          $ref: '#/components/schemas/registryNode'
        server:
          $ref: '#/components/schemas/registryServer'
        service:
          $ref: '#/components/schemas/registryService'
    registryItemType:
      type: string
      default: ALL
      enum:
        - ALL
        - EDGE
        - NODE
        - SERVICE
        - SERVER
        - DAO
        - GENERIC
        - ADDRESS
        - TAG
        - PROCESS
        - ENDPOINT
        - STATS
    registryListRequest:
      type: object
      properties:
        adjacentsOptions:
          $ref: '#/components/schemas/registryOptions'
        options:
          $ref: '#/components/schemas/registryOptions'
    registryListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/registryItem'
    registryNode:
      type: object
      properties:
        advertiseIp:
          type: string
        hostname:
          type: string
        ips:
          type: array
          items:
            type: string
        machine:
          type: string
    registryOptions:
      title: Options are registry options
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/registryActionType'
        ids:
          type: array
          items:
            type: string
        metaName:
          type: string
        metaValue:
          type: string
        names:
          type: array
          items:
            type: string
        ttl:
          type: string
          format: int64
        types:
          type: array
          items:
            $ref: '#/components/schemas/registryItemType'
    registryServer:
      title: Server represents the node the service is on
      type: object
      properties:
        protocol:
          type: string
    registryService:
      title: Service represents a go-micro service
      type: object
      properties:
        options:
          $ref: '#/components/schemas/registryOptions'
        tags:
          type: array
          items:
            type: string
        version:
          type: string
    restACLCollection:
      title: Response for search request
      type: object
      properties:
        ACLs:
          title: List of ACLs
          type: array
          items:
            $ref: '#/components/schemas/idmACL'
        Total:
          title: Total number of results
          type: integer
          format: int32
    restActionDescription:
      type: object
      properties:
        Category:
          title: User-defined category to organize actions list
          type: string
        Description:
          title: Long description and help text
          type: string
        FormModule:
          title: JS module name to be used instead of loading standard form
          type: string
        FormModuleProps:
          title: JSON props used to init the FormModule (optional)
          type: string
        HasForm:
          title: Whether this action has a form or not
          type: boolean
        Icon:
          title: Mdi reference name for displaying icon
          type: string
        InputDescription:
          title: Additional description for expected inputs
          type: string
        IsInternal:
          type: boolean
          description: >-
            If action is declared internal, it is hidden to avoid polluting the
            list.
        Label:
          title: Human-readable label
          type: string
        Name:
          title: Unique name of the action
          type: string
        OutputDescription:
          title: Additional description describing the action output
          type: string
        SummaryTemplate:
          title: Template for building a short summary of the action configuration
          type: string
        Tint:
          title: User-defined hexa or rgb color
          type: string
    restBackgroundJobResult:
      type: object
      properties:
        Label:
          type: string
        NodeUuid:
          type: string
        Uuid:
          type: string
    restBulkMetaResponse:
      type: object
      properties:
        Nodes:
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        Pagination:
          $ref: '#/components/schemas/restPagination'
    restCell:
      title: Model for representing a Cell
      type: object
      properties:
        ACLs:
          title: Access control for this Cell
          type: object
          additionalProperties:
            $ref: '#/components/schemas/restCellAcl'
        Description:
          title: Long description of the Cell (max 1000 chars)
          type: string
        Label:
          title: Label of the Cell (max 500 chars)
          type: string
        Policies:
          title: Associated access policies
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          title: Whether these policies are currently editable
          type: boolean
        RootNodes:
          title: Nodes attached as roots to this Cell
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        Uuid:
          title: Unique Id of the Cell
          type: string
    restCellAcl:
      title: Group collected acls by subjects
      type: object
      properties:
        Actions:
          title: List of Acl Actions and their effect
          type: array
          items:
            $ref: '#/components/schemas/idmACLAction'
        Group:
          $ref: '#/components/schemas/idmUser'
        IsUserRole:
          title: Flag for detecting if it's a user role or not
          type: boolean
        Role:
          $ref: '#/components/schemas/idmRole'
        RoleId:
          title: Associated Role ID
          type: string
        User:
          $ref: '#/components/schemas/idmUser'
    restConfiguration:
      title: Configuration message. Data is an Json representation of any value
      type: object
      properties:
        Data:
          title: JSON-encoded data to store
          type: string
        FullPath:
          title: Full slash-separated path to the config key
          type: string
    restControlServiceRequest:
      type: object
      properties:
        Command:
          $ref: '#/components/schemas/ctlServiceCommand'
        NodeName:
          title: Name of the node
          type: string
        ServiceName:
          title: Name of the service to stop
          type: string
    restCreateNodesRequest:
      type: object
      properties:
        Nodes:
          title: A list of nodes that must be created
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        Recursive:
          title: >-
            If nodes are created inside non-existing folders, whether the
            parents should be created automatically or not
          type: boolean
        TemplateUUID:
          title: Use a template to create this node
          type: string
    restCreatePeerFolderResponse:
      type: object
      properties:
        Node:
          $ref: '#/components/schemas/treeNode'
        Success:
          type: boolean
    restCreateSelectionRequest:
      type: object
      properties:
        Nodes:
          title: Create a temporary selection out of this list of nodes
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        Persist:
          title: Whether to save the selection or just get a temporary Uuid in return
          type: boolean
        TargetAction:
          title: Associated target action for this selection
          type: string
    restCreateSelectionResponse:
      type: object
      properties:
        Nodes:
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        SelectionUUID:
          type: string
    restCreateStorageBucketResponse:
      type: object
      properties:
        BucketName:
          type: string
        Success:
          type: boolean
    restDataSourceCollection:
      title: Collection of datasources
      type: object
      properties:
        DataSources:
          type: array
          items:
            $ref: '#/components/schemas/objectDataSource'
        Total:
          type: integer
          format: int32
    restDeleteCellResponse:
      type: object
      properties:
        Success:
          title: Delete result
          type: boolean
    restDeleteDataSourceResponse:
      type: object
      properties:
        Success:
          type: boolean
    restDeleteNodesRequest:
      type: object
      properties:
        Nodes:
          title: List of nodes to delete
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        Recursive:
          title: Whether to delete all the children if node is a folder
          type: boolean
        RemovePermanently:
          title: Force permanent deletion even if a recycle bin is defined
          type: boolean
    restDeleteNodesResponse:
      type: object
      properties:
        DeleteJobs:
          type: array
          items:
            $ref: '#/components/schemas/restBackgroundJobResult'
    restDeleteResponse:
      title: Generic Message
      type: object
      properties:
        NumRows:
          title: Number of records deleted during operation
          type: string
          format: int64
        Success:
          title: If delete was successfull
          type: boolean
    restDeleteShareLinkResponse:
      title: Response for deleting a share link
      type: object
      properties:
        Success:
          title: If delete sucess or failed
          type: boolean
    restDeleteUserMetaTagsResponse:
      type: object
      properties:
        Success:
          type: boolean
    restDiscoveryResponse:
      type: object
      properties:
        BuildRevision:
          title: >-
            Revision of the current binary build, empty if user is not
            authenticated
          type: string
        BuildStamp:
          title: Build stamp of the binary build, empty if user is not authenticated
          type: integer
          format: int32
        Endpoints:
          title: >-
            List of endpoints and their corresponding URL access. Special case
            for grpc that just send back its port
          type: object
          additionalProperties:
            type: string
        PackageLabel:
          title: Current Package Label, empty if user is not authenticated
          type: string
        PackageType:
          title: Current Package Type, empty if user is not authenticated
          type: string
        Version:
          title: Current Package Version, empty if user is not authenticated
          type: string
    restDocumentAccessTokenRequest:
      type: object
      properties:
        ClientID:
          type: string
        Path:
          type: string
    restDocumentAccessTokenResponse:
      type: object
      properties:
        AccessToken:
          type: string
    restError:
      title: Generic error message
      type: object
      properties:
        Code:
          title: Unique ID of the error
          type: string
        Detail:
          title: Human-readable, longer description
          type: string
        Meta:
          title: Additional Metadata
          type: object
          additionalProperties:
            type: string
        Source:
          title: Cells service name or other quickly useful info
          type: string
        Title:
          title: Human-readable, short label
          type: string
    restFrontBinaryResponse:
      title: Not used, endpoint returns octet-stream
      type: object
      properties:
        Data:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    restFrontBootConfResponse:
      type: object
      properties:
        JsonData:
          type: object
          additionalProperties:
            type: string
    restFrontEnrollAuthRequest:
      type: object
      properties:
        EnrollInfo:
          type: object
          additionalProperties:
            type: string
        EnrollType:
          type: string
    restFrontEnrollAuthResponse:
      type: object
      properties:
        Info:
          title: Any parameters can be returned
          type: object
          additionalProperties:
            type: string
    restFrontMessagesResponse:
      type: object
      properties:
        Messages:
          type: object
          additionalProperties:
            type: string
    restFrontPluginsResponse:
      type: object
      properties:
        Data:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    restFrontSessionRequest:
      type: object
      properties:
        AuthInfo:
          title: Data sent back by specific auth steps
          type: object
          additionalProperties:
            type: string
        ClientTime:
          title: Time reference for computing jwt expiry
          type: integer
          format: int32
        Logout:
          title: Kill session now
          type: boolean
    restFrontSessionResponse:
      type: object
      properties:
        Error:
          type: string
        ExpireTime:
          type: integer
          format: int32
        JWT:
          title: Legacy information (now in token)
          type: string
        RedirectTo:
          type: string
        Token:
          $ref: '#/components/schemas/authToken'
        Trigger:
          title: Trigger a specific Auth step
          type: string
        TriggerInfo:
          title: Additional data for the trigger
          type: object
          additionalProperties:
            type: string
    restFrontStateResponse:
      type: object
      properties:
        Data:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    restGetBulkMetaRequest:
      type: object
      properties:
        AllMetaProviders:
          title: >-
            Whether to query all services for the metadata they can contribute
            to enrich the node
          type: boolean
        Limit:
          title: Limit number of results
          type: integer
          format: int32
        NodePaths:
          title: >-
            List of node paths to query (use paths ending with /* to load the
            children)
          type: array
          items:
            type: string
        Offset:
          title: Start listing at a given position
          type: integer
          format: int32
        Versions:
          title: Load Versions of the given node
          type: boolean
    restHeadNodeResponse:
      type: object
      properties:
        Node:
          $ref: '#/components/schemas/treeNode'
    restListPeersAddressesResponse:
      type: object
      properties:
        PeerAddresses:
          title: List of peer addresses
          type: array
          items:
            type: string
    restListProcessesRequest:
      type: object
      properties:
        PeerId:
          title: Id of the peer node
          type: string
        ServiceName:
          title: Look for a service name
          type: string
    restListProcessesResponse:
      type: object
      properties:
        Processes:
          type: array
          items:
            $ref: '#/components/schemas/restProcess'
    restListSharedResourcesRequest:
      type: object
      properties:
        Limit:
          title: Limit number of results
          type: integer
          format: int32
        Offset:
          title: Start listing at a given offset
          type: integer
          format: int32
        OwnedBySubject:
          title: >-
            If true, will also check filter the output to shares actually owned
            by subject
          type: boolean
        ShareType:
          $ref: '#/components/schemas/ListSharedResourcesRequestListShareType'
        Subject:
          title: >-
            Will restrict the list to the shares readable by a specific subject.

            In user-context, current user is used by default. In admin-context,
            this can

            be any resource policy subject
          type: string
    restListSharedResourcesResponse:
      type: object
      properties:
        Limit:
          type: integer
          format: int32
        Offset:
          title: Cursor informations
          type: integer
          format: int32
        Resources:
          title: Actual results
          type: array
          items:
            $ref: '#/components/schemas/ListSharedResourcesResponseSharedResource'
        Total:
          type: integer
          format: int32
    restListSitesResponse:
      title: Response with declared sites
      type: object
      properties:
        Sites:
          type: array
          items:
            $ref: '#/components/schemas/installProxyConfig'
    restListStorageBucketsRequest:
      type: object
      properties:
        BucketsRegexp:
          type: string
        DataSource:
          $ref: '#/components/schemas/objectDataSource'
    restListTemplatesResponse:
      type: object
      properties:
        Templates:
          type: array
          items:
            $ref: '#/components/schemas/restTemplate'
    restListUserMetaTagsResponse:
      type: object
      properties:
        Tags:
          title: List of existing tags values
          type: array
          items:
            type: string
    restLogMessageCollection:
      title: Collection of serialized log messages
      type: object
      properties:
        Logs:
          type: array
          items:
            $ref: '#/components/schemas/logLogMessage'
    restMetadata:
      type: object
      properties:
        JsonMeta:
          type: string
        Namespace:
          type: string
    restNodesCollection:
      type: object
      properties:
        Children:
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        Parent:
          $ref: '#/components/schemas/treeNode'
    restOpenApiResponse:
      type: object
      properties:
        Data:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    restPagination:
      title: Generic container for responses sending pagination information
      type: object
      properties:
        CurrentOffset:
          title: Current Offset value
          type: integer
          format: int32
        CurrentPage:
          title: Current number of Page
          type: integer
          format: int32
        Limit:
          title: Current Limit parameter, either passed by request or default value
          type: integer
          format: int32
        NextOffset:
          title: Offset value for next page if there is one
          type: integer
          format: int32
        PrevOffset:
          title: Offset value for previous page, if there is one
          type: integer
          format: int32
        Total:
          title: Total number of records
          type: integer
          format: int32
        TotalPages:
          title: Number of detected pages
          type: integer
          format: int32
    restProcess:
      type: object
      properties:
        ID:
          title: Process ID
          type: string
        MetricsPort:
          title: Port to access the metrics api
          type: integer
          format: int32
        ParentID:
          title: Parent Process ID
          type: string
        PeerAddress:
          title: Address of peer node
          type: string
        PeerId:
          title: Id of peer node
          type: string
        Services:
          title: List of services running inside this process
          type: array
          items:
            type: string
        StartTag:
          title: Parameters used to start this process
          type: string
    restPutCellRequest:
      title: Request for creating a Cell
      type: object
      properties:
        CreateEmptyRoot:
          title: Whether to create a dedicated folder for this cell at creation
          type: boolean
        Room:
          $ref: '#/components/schemas/restCell'
    restPutShareLinkRequest:
      title: Request for create/update a link
      type: object
      properties:
        CreatePassword:
          title: Set if switching from no password to password
          type: string
        PasswordEnabled:
          title: Whether it has Password enabled
          type: boolean
        ShareLink:
          $ref: '#/components/schemas/restShareLink'
        UpdateCustomHash:
          title: Change the ShareLink Hash with a custom value
          type: string
        UpdatePassword:
          title: Set if updating an existing password
          type: string
    restPutUserMetaTagResponse:
      type: object
      properties:
        Success:
          title: Operation success
          type: boolean
    restRecommendRequest:
      type: object
      properties:
        Category:
          type: string
        Limit:
          type: integer
          format: int32
        Neighbor:
          type: string
        Segment:
          type: string
    restRecommendResponse:
      type: object
      properties:
        Nodes:
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
    restRelationResponse:
      type: object
      properties:
        BelongsToTeams:
          type: array
          items:
            $ref: '#/components/schemas/idmRole'
        SharedCells:
          type: array
          items:
            $ref: '#/components/schemas/idmWorkspace'
    restResetPasswordRequest:
      type: object
      properties:
        NewPassword:
          title: New password to be stored for this user
          type: string
        ResetPasswordToken:
          title: Token generated by the previous step of the reset password workflow
          type: string
        UserLogin:
          title: User Login
          type: string
    restResetPasswordResponse:
      type: object
      properties:
        Message:
          type: string
        Success:
          type: boolean
    restResetPasswordTokenResponse:
      type: object
      properties:
        Message:
          type: string
        Success:
          type: boolean
    restResourcePolicyQuery:
      title: Generic Query for limiting results based on resource permissions
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/ResourcePolicyQueryQueryType'
        UserId:
          title: Limit to one given user ID
          type: string
    restRestoreNodesRequest:
      type: object
      properties:
        Nodes:
          title: Restore this node from the recycle bin to its original location
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
    restRestoreNodesResponse:
      type: object
      properties:
        RestoreJobs:
          type: array
          items:
            $ref: '#/components/schemas/restBackgroundJobResult'
    restRevokeRequest:
      title: |-
        Rest request for revocation. Token is not mandatory, if not set
        request will use current JWT token
      type: object
      properties:
        TokenId:
          title: >-
            Pass a specific Token ID to be revoked. If empty, request will use
            current JWT
          type: string
    restRevokeResponse:
      title: Rest response
      type: object
      properties:
        Message:
          type: string
        Success:
          type: boolean
    restRolesCollection:
      title: Roles Collection
      type: object
      properties:
        Roles:
          title: List of Roles
          type: array
          items:
            $ref: '#/components/schemas/idmRole'
        Total:
          title: Total in DB
          type: integer
          format: int32
    restSchedulerActionFormResponse:
      type: object
      properties:
        ActionName:
          type: string
    restSchedulerActionsResponse:
      type: object
      properties:
        Actions:
          title: List of all registered actions
          type: object
          additionalProperties:
            $ref: '#/components/schemas/restActionDescription'
    restSearchACLRequest:
      title: Rest request for ACL's
      type: object
      properties:
        CountOnly:
          title: Return counts only, no actual results
          type: boolean
        GroupBy:
          title: Group results
          type: integer
          format: int32
        Limit:
          title: Limit the number of results
          type: string
          format: int64
        Offset:
          title: Start listing at a given position
          type: string
          format: int64
        Operation:
          $ref: '#/components/schemas/serviceOperationType'
        Queries:
          title: >-
            Atomic queries that will be combined using the OperationType (AND or
            OR)
          type: array
          items:
            $ref: '#/components/schemas/idmACLSingleQuery'
    restSearchResults:
      type: object
      properties:
        Facets:
          type: array
          items:
            $ref: '#/components/schemas/treeSearchFacet'
        Results:
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        Total:
          type: integer
          format: int32
    restSearchRoleRequest:
      title: Roles Search
      type: object
      properties:
        CountOnly:
          title: Return counts only, no actual results
          type: boolean
        GroupBy:
          title: Group results by
          type: integer
          format: int32
        Limit:
          title: Limit number of results
          type: string
          format: int64
        Offset:
          title: Start listing at a given position
          type: string
          format: int64
        Operation:
          $ref: '#/components/schemas/serviceOperationType'
        Queries:
          title: >-
            List of atomic queries that will be combined using the Operation
            type (AND / OR)
          type: array
          items:
            $ref: '#/components/schemas/idmRoleSingleQuery'
        ResourcePolicyQuery:
          $ref: '#/components/schemas/restResourcePolicyQuery'
    restSearchUserRequest:
      title: Users Search
      type: object
      properties:
        CountOnly:
          title: Return counts only, no actual results
          type: boolean
        GroupBy:
          type: integer
          description: Group by ...
          format: int32
        Limit:
          title: Limit number of results
          type: string
          format: int64
        Offset:
          title: Start listing at a given position
          type: string
          format: int64
        Operation:
          $ref: '#/components/schemas/serviceOperationType'
        Queries:
          title: >-
            Atomic queries that will be combined using the Operation Type (AND
            or OR)
          type: array
          items:
            $ref: '#/components/schemas/idmUserSingleQuery'
        ResourcePolicyQuery:
          $ref: '#/components/schemas/restResourcePolicyQuery'
    restSearchWorkspaceRequest:
      title: Rest request for searching workspaces
      type: object
      properties:
        CountOnly:
          title: Return counts only, no actual results
          type: boolean
        GroupBy:
          title: Group results
          type: integer
          format: int32
        Limit:
          title: Limit the number of results
          type: string
          format: int64
        Offset:
          title: Start listing at a given position
          type: string
          format: int64
        Operation:
          $ref: '#/components/schemas/serviceOperationType'
        Queries:
          title: >-
            Atomic queries that will be combined using the OperationType (AND or
            OR)
          type: array
          items:
            $ref: '#/components/schemas/idmWorkspaceSingleQuery'
        ResourcePolicyQuery:
          $ref: '#/components/schemas/restResourcePolicyQuery'
    restServiceCollection:
      type: object
      properties:
        Services:
          type: array
          items:
            $ref: '#/components/schemas/ctlService'
        Total:
          type: integer
          format: int32
    restSettingsAccess:
      type: object
      properties:
        Description:
          type: string
        Label:
          type: string
        Policies:
          type: array
          items:
            $ref: '#/components/schemas/restSettingsAccessRestPolicy'
    restSettingsAccessRestPolicy:
      type: object
      properties:
        Action:
          type: string
        Resource:
          type: string
    restSettingsEntry:
      type: object
      properties:
        ALIAS:
          type: string
        Accesses:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/restSettingsAccess'
        DESCRIPTION:
          type: string
        Feature:
          type: string
        Key:
          type: string
        LABEL:
          type: string
        MANAGER:
          type: string
        METADATA:
          $ref: '#/components/schemas/restSettingsEntryMeta'
    restSettingsEntryMeta:
      type: object
      properties:
        advanced:
          type: boolean
        component:
          type: string
        icon_class:
          type: string
        indexed:
          type: array
          items:
            type: string
        props:
          type: string
    restSettingsMenuResponse:
      type: object
      properties:
        Sections:
          type: array
          items:
            $ref: '#/components/schemas/restSettingsSection'
        __metadata__:
          $ref: '#/components/schemas/restSettingsEntryMeta'
    restSettingsSection:
      type: object
      properties:
        CHILDREN:
          type: array
          items:
            $ref: '#/components/schemas/restSettingsEntry'
        DESCRIPTION:
          type: string
        Key:
          type: string
        LABEL:
          type: string
    restShareLink:
      title: Model for representing a public link
      type: object
      properties:
        AccessEnd:
          title: Timestamp after which the share is disabled
          type: string
          format: int64
        AccessStart:
          title: Timestamp of start date for enabling the share (not implemented yet)
          type: string
          format: int64
        CurrentDownloads:
          title: Current number of downloads
          type: string
          format: int64
        Description:
          title: Description of the Link (max 1000 chars)
          type: string
        Label:
          title: Label of the Link (max 500 chars)
          type: string
        LinkHash:
          title: Unique Hash for accessing the link
          type: string
        LinkUrl:
          title: Full URL for accessing the link
          type: string
        MaxDownloads:
          title: Maximum number of downloads until expiration
          type: string
          format: int64
        PasswordRequired:
          title: Whether a password is required or not to access the link
          type: boolean
        Permissions:
          title: Specific permissions for public links
          type: array
          items:
            $ref: '#/components/schemas/restShareLinkAccessType'
        Policies:
          title: Security policies
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          title: Whether policies are currently editable or not
          type: boolean
        RestrictToTargetUsers:
          title: RestrictToTargetUsers enable users restriction
          type: boolean
        RootNodes:
          title: Nodes in the tree that serve as root to this link
          type: array
          items:
            $ref: '#/components/schemas/treeNode'
        TargetUsers:
          title: TargetUsers can be used to restrict access
          type: object
          additionalProperties:
            $ref: '#/components/schemas/restShareLinkTargetUser'
        UserLogin:
          title: >-
            Temporary user Login used to login automatically when accessing this
            link
          type: string
        UserUuid:
          title: >-
            Temporary user Uuid used to login automatically when accessing this
            link
          type: string
        Uuid:
          title: Internal identifier of the link
          type: string
        ViewTemplateName:
          title: Display Template for loading the public link
          type: string
    restShareLinkAccessType:
      title: Known values for link permissions
      type: string
      default: NoAccess
      enum:
        - NoAccess
        - Preview
        - Download
        - Upload
    restShareLinkTargetUser:
      type: object
      properties:
        Display:
          type: string
        DownloadCount:
          type: integer
          format: int32
    restSubscriptionsCollection:
      type: object
      properties:
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/activitySubscription'
    restTemplate:
      title: A template can be used to create files or tree from scratch
      type: object
      properties:
        Editable:
          title: Whether this template can be edited or not
          type: boolean
        Label:
          title: Human friendly label
          type: string
        Node:
          $ref: '#/components/schemas/restTemplateNode'
        Policies:
          title: Associated policies
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        UUID:
          title: Unique identifier for this template
          type: string
    restTemplateNode:
      title: A template node is representing a file or a folder
      type: object
      properties:
        Children:
          title: One or more children
          type: object
          additionalProperties:
            $ref: '#/components/schemas/treeNode'
        Node:
          $ref: '#/components/schemas/treeNode'
    restUpdateSharePoliciesRequest:
      type: object
      properties:
        Policies:
          title: List of policies to update
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        Uuid:
          title: Cell or Link UUID
          type: string
    restUpdateSharePoliciesResponse:
      type: object
      properties:
        Policies:
          type: array
          items:
            $ref: '#/components/schemas/serviceResourcePolicy'
        PoliciesContextEditable:
          type: boolean
        Success:
          type: boolean
    restUserBookmarksRequest:
      type: object
      properties:
        All:
          type: boolean
    restUserJobResponse:
      type: object
      properties:
        JobUuid:
          type: string
    restUserJobsCollection:
      type: object
      properties:
        Jobs:
          type: array
          items:
            $ref: '#/components/schemas/jobsJob'
    restUserMetaCollection:
      title: Collection of UserMeta
      type: object
      properties:
        Metadatas:
          type: array
          items:
            $ref: '#/components/schemas/idmUserMeta'
    restUserMetaNamespaceCollection:
      title: Collection of Meta Namespaces
      type: object
      properties:
        Namespaces:
          title: List of user meta Namespaces
          type: array
          items:
            $ref: '#/components/schemas/idmUserMetaNamespace'
    restUserStateResponse:
      type: object
      properties:
        Workspaces:
          type: array
          items:
            $ref: '#/components/schemas/idmWorkspace'
        WorkspacesAccesses:
          type: object
          additionalProperties:
            type: string
    restUsersCollection:
      title: Users Collection
      type: object
      properties:
        Groups:
          title: List of Groups
          type: array
          items:
            $ref: '#/components/schemas/idmUser'
        Total:
          title: Total number of results
          type: integer
          format: int32
        Users:
          title: List of Users
          type: array
          items:
            $ref: '#/components/schemas/idmUser'
    restVersioningPolicyCollection:
      type: object
      properties:
        Policies:
          type: array
          items:
            $ref: '#/components/schemas/treeVersioningPolicy'
    restWorkspaceCollection:
      title: Rest response for workspace search
      type: object
      properties:
        Total:
          title: Total number of results
          type: integer
          format: int32
        Workspaces:
          title: List of workspaces
          type: array
          items:
            $ref: '#/components/schemas/idmWorkspace'
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
        message:
          type: string
    serviceOperationType:
      type: string
      default: OR
      enum:
        - OR
        - AND
    serviceQuery:
      type: object
      properties:
        Limit:
          type: string
          format: int64
        Offset:
          type: string
          format: int64
        Operation:
          $ref: '#/components/schemas/serviceOperationType'
        ResourcePolicyQuery:
          $ref: '#/components/schemas/serviceResourcePolicyQuery'
        SubQueries:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
        groupBy:
          type: integer
          format: int32
    serviceResourcePolicy:
      type: object
      properties:
        Action:
          $ref: '#/components/schemas/serviceResourcePolicyAction'
        Effect:
          $ref: '#/components/schemas/serviceResourcePolicyPolicyEffect'
        JsonConditions:
          type: string
        Resource:
          type: string
        Subject:
          type: string
        id:
          type: string
          format: int64
    serviceResourcePolicyAction:
      type: string
      default: ANY
      enum:
        - ANY
        - OWNER
        - READ
        - WRITE
        - EDIT_RULES
    serviceResourcePolicyPolicyEffect:
      type: string
      default: deny
      enum:
        - deny
        - allow
    serviceResourcePolicyQuery:
      type: object
      properties:
        Any:
          type: boolean
        Empty:
          type: boolean
        Subjects:
          type: array
          items:
            type: string
    treeChangeLog:
      type: object
      properties:
        Data:
          title: Arbitrary additional data
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        Description:
          title: Human-readable description of what happened
          type: string
        Event:
          $ref: '#/components/schemas/treeNodeChangeEvent'
        Location:
          $ref: '#/components/schemas/treeNode'
        MTime:
          title: Unix Timestamp
          type: string
          format: int64
        OwnerUuid:
          title: Who performed this action
          type: string
        Size:
          title: Content Size at that moment
          type: string
          format: int64
        Uuid:
          title: Unique commit ID
          type: string
    treeGeoPoint:
      type: object
      properties:
        Lat:
          type: number
          format: double
        Lon:
          type: number
          format: double
    treeGeoQuery:
      type: object
      properties:
        BottomRight:
          $ref: '#/components/schemas/treeGeoPoint'
        Center:
          $ref: '#/components/schemas/treeGeoPoint'
        Distance:
          type: string
          description: >-
            Example formats supported:

            "5in" "5inch" "7yd" "7yards" "9ft" "9feet" "11km" "11kilometers"

            "3nm" "3nauticalmiles" "13mm" "13millimeters" "15cm" "15centimeters"

            "17mi" "17miles" "19m" "19meters"

            If the unit cannot be determined, the entire string is parsed and
            the

            unit of meters is assumed.
        TopLeft:
          $ref: '#/components/schemas/treeGeoPoint'
    treeListNodesRequest:
      type: object
      properties:
        Ancestors:
          title: >-
            Send back a list of parent nodes, until the root, including the
            original node
          type: boolean
        FilterType:
          $ref: '#/components/schemas/treeNodeType'
        Limit:
          title: Limit the number of results
          type: string
          format: int64
        Node:
          $ref: '#/components/schemas/treeNode'
        Offset:
          title: Start listing at a given position
          type: string
          format: int64
        Recursive:
          title: Send back all children of the node
          type: boolean
        StatFlags:
          title: Generic Details Flags
          type: array
          items:
            type: integer
            format: int64
        WithCommits:
          title: Sends the list of commits for a given node (Deprecated)
          type: boolean
        WithVersions:
          title: Sends the list of versions for a given node
          type: boolean
    treeNode:
      type: object
      properties:
        AppearsIn:
          title: Can be used for output when node is appearing in multiple workspaces
          type: array
          items:
            $ref: '#/components/schemas/treeWorkspaceRelativePath'
        Commits:
          title: List of successive commits
          type: array
          items:
            $ref: '#/components/schemas/treeChangeLog'
        Etag:
          title: Hash of the content if node is a LEAF, Uuid or
          type: string
        MTime:
          title: Last modification Timestamp
          type: string
          format: int64
        MetaStore:
          title: |-
            ------------------------------------
            Then a free K => V representation of any kind of metadata
            ------------------------------------
          type: object
          additionalProperties:
            type: string
        Mode:
          title: Permission mode, like 0777
          type: integer
          format: int32
        Path:
          type: string
        Size:
          title: Size of the file, or cumulated size of folder
          type: string
          format: int64
        Type:
          $ref: '#/components/schemas/treeNodeType'
        Uuid:
          title: |-
            ------------------------------------
            Core identification of the node
            ------------------------------------
          type: string
    treeNodeChangeEvent:
      type: object
      properties:
        Metadata:
          type: object
          additionalProperties:
            type: string
        Optimistic:
          type: boolean
        Silent:
          type: boolean
        Source:
          $ref: '#/components/schemas/treeNode'
        Target:
          $ref: '#/components/schemas/treeNode'
        Type:
          $ref: '#/components/schemas/treeNodeChangeEventEventType'
    treeNodeChangeEventEventType:
      type: string
      default: CREATE
      enum:
        - CREATE
        - READ
        - UPDATE_PATH
        - UPDATE_CONTENT
        - UPDATE_META
        - UPDATE_USER_META
        - DELETE
    treeNodeType:
      title: |-
        ==========================================================
        * Standard Messages
        ==========================================================
      type: string
      default: UNKNOWN
      enum:
        - UNKNOWN
        - LEAF
        - COLLECTION
    treeQuery:
      title: Search Queries
      type: object
      properties:
        Content:
          title: >-
            Search in textual content (if search engine has this feature
            enabled)
          type: string
        DurationDate:
          title: >-
            Compute MinDate/MaxDate with a Golang duration with a leading
            comparator (> or <)

            Duration may contain "s" second, "m" minute, "d" day.

            Example: ">10m" for files modified before 10minutes ago
          type: string
        ETag:
          title: >-
            Look for a specific ETag value, may only be useful to lookup for
            files with __temporary__ ETag
          type: string
        Extension:
          title: >-
            Search files by their extension, use pipe symbol | if you wish to
            allow many extensions.

            Example png|pdf|jpg
          type: string
        FileName:
          title: Lookup by file basename
          type: string
        FileNameOrContent:
          title: >-
            Search in either filename or content (if search engine has this
            feature enabled)
          type: string
        FreeString:
          type: string
          description: >-
            Bleve-like search query to search for a specific metadata value.

            When querying nodes, this will redirect this query to the Search
            Engine. When filtering an input, this will load an in-memory bleve
            engine to evaluate the node.


            Bleve query string format is a space separated list of
            `[+-]key:value`, where node meta keys must be prepended with "Meta."

            For Example, for tags: `+Meta.usermeta-tags:myvalue`
        GeoQuery:
          $ref: '#/components/schemas/treeGeoQuery'
        MaxDate:
          title: Range for modification date - node was modified before this date
          type: string
          format: int64
        MaxSize:
          title: Range for file size - size is smaller than
          type: string
          format: int64
        MinDate:
          title: Range for modification date - node was modified after this date
          type: string
          format: int64
        MinSize:
          title: Range for file size - size bigger than
          type: string
          format: int64
        Not:
          title: Negate this query
          type: boolean
        PathDepth:
          title: >-
            Restrict recursive listing to a given level of the tree starting
            from root.

            Special value "-1" should list only one level in the folder defined
            by PathPrefix
          type: integer
          format: int32
        PathPrefix:
          title: >-
            Recursive listing of nodes below a given path. Combine with the
            PathDepth parameter to limit request results
          type: array
          items:
            type: string
        Paths:
          title: List of nodes paths, exactly matching
          type: array
          items:
            type: string
        Type:
          $ref: '#/components/schemas/treeNodeType'
        UUIDs:
          title: Preset list of specific node defined by their UUIDs
          type: array
          items:
            type: string
    treeReadNodeRequest:
      title: Request / Responses Messages
      type: object
      properties:
        Node:
          $ref: '#/components/schemas/treeNode'
        ObjectStats:
          title: >-
            Used internally for the router ReadNode request, stat the datasource
            instead of index
          type: boolean
        StatFlags:
          title: Generic Details Flags
          type: array
          items:
            type: integer
            format: int64
        WithCommits:
          title: Gather commit information - This is Deprecated
          type: boolean
        WithExtendedStats:
          title: >-
            Get extended stats - For folders, computes ChildrenCount -
            Depreacted, use StatFlags instead
          type: boolean
    treeReadNodeResponse:
      type: object
      properties:
        Node:
          $ref: '#/components/schemas/treeNode'
        Success:
          type: boolean
    treeSearchFacet:
      type: object
      properties:
        Count:
          title: Segment results count
          type: integer
          format: int32
        End:
          type: integer
          format: int32
        FieldName:
          title: Facet field name
          type: string
        Label:
          title: Segment Label
          type: string
        Max:
          type: string
          format: int64
        Min:
          title: For NumericRange facets, min/max values
          type: string
          format: int64
        Start:
          title: For DateRange facets, start/end values
          type: integer
          format: int32
        Term:
          title: For string facets, term value
          type: string
    treeSearchRequest:
      type: object
      properties:
        Details:
          title: Load node details
          type: boolean
        From:
          title: Start at given position
          type: integer
          format: int32
        Query:
          $ref: '#/components/schemas/treeQuery'
        Size:
          title: Limit the number of results
          type: integer
          format: int32
        StatFlags:
          title: Generic Details Flags
          type: array
          items:
            type: integer
            format: int64
    treeVersioningKeepPeriod:
      type: object
      properties:
        IntervalStart:
          type: string
        MaxNumber:
          type: integer
          format: int32
    treeVersioningNodeDeletedStrategy:
      type: string
      default: KeepAll
      enum:
        - KeepAll
        - KeepLast
        - KeepNone
    treeVersioningPolicy:
      type: object
      properties:
        Description:
          type: string
        IgnoreFilesGreaterThan:
          type: string
          format: int64
        KeepPeriods:
          type: array
          items:
            $ref: '#/components/schemas/treeVersioningKeepPeriod'
        MaxSizePerFile:
          type: string
          format: int64
        MaxTotalSize:
          type: string
          format: int64
        Name:
          type: string
        NodeDeletedStrategy:
          $ref: '#/components/schemas/treeVersioningNodeDeletedStrategy'
        Uuid:
          type: string
        VersionsDataSourceBucket:
          type: string
        VersionsDataSourceName:
          type: string
    treeWorkspaceRelativePath:
      title: |-
        Used in AppearsIn to signal a node is
        appearing in multiple workspaces in the current context
      type: object
      properties:
        Path:
          title: Relative Path inside workspace
          type: string
        WsLabel:
          title: Workspace Label
          type: string
        WsScope:
          title: Workspace Scope
          type: string
        WsSlug:
          title: Workspace slug
          type: string
        WsUuid:
          title: Workspace Id
          type: string
    updateApplyUpdateResponse:
      type: object
      properties:
        Message:
          type: string
        Success:
          type: boolean
    updatePackage:
      type: object
      properties:
        BinaryArch:
          title: GOARCH value used at build time
          type: string
        BinaryChecksum:
          title: Checksum of the binary to verify its integrity
          type: string
        BinaryHashType:
          title: Hash type used for the signature
          type: string
        BinaryOS:
          title: GOOS value used at build time
          type: string
        BinarySignature:
          title: Signature of the binary
          type: string
        BinarySize:
          title: Size of the binary to download
          type: string
          format: int64
        BinaryURL:
          title: Https URL where to download the binary
          type: string
        ChangeLog:
          title: List or public URL of change logs
          type: string
        Description:
          title: Long human-readable description (markdown)
          type: string
        IsPatch:
          title: 'Not used : if binary is a patch'
          type: boolean
        Label:
          title: Short human-readable description
          type: string
        License:
          title: License of this package
          type: string
        PackageName:
          title: Name of the application
          type: string
        PatchAlgorithm:
          title: 'Not used : if a patch, how to patch (bsdiff support)'
          type: string
        ReleaseDate:
          title: Release date of the binary
          type: integer
          format: int32
        ServiceName:
          title: 'Not used : at a point we may deliver services only updates'
          type: string
        Status:
          $ref: '#/components/schemas/PackagePackageStatus'
        Version:
          title: Version of this new binary
          type: string
    updateUpdateRequest:
      type: object
      properties:
        Channel:
          title: Channel name
          type: string
        CurrentVersion:
          title: Current version of the application
          type: string
        GOARCH:
          title: Current GOARCH
          type: string
        GOOS:
          title: Current GOOS
          type: string
        LicenseInfo:
          title: For enterprise version, info about the current license
          type: object
          additionalProperties:
            type: string
        PackageName:
          title: Name of the currently running application
          type: string
        ServiceName:
          title: 'Not Used : specific service to get updates for'
          type: string
    updateUpdateResponse:
      type: object
      properties:
        AvailableBinaries:
          title: List of available binaries
          type: array
          items:
            $ref: '#/components/schemas/updatePackage'
        Channel:
          type: string

