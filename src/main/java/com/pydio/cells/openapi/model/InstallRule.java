/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * InstallRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class InstallRule {
    public static final String SERIALIZED_NAME_ACTION = "Action";
    @SerializedName(SERIALIZED_NAME_ACTION)
    @javax.annotation.Nullable
    private String action;

    public static final String SERIALIZED_NAME_EFFECT = "Effect";
    @SerializedName(SERIALIZED_NAME_EFFECT)
    @javax.annotation.Nullable
    private InstallRuleEffect effect = InstallRuleEffect.DENY;

    public static final String SERIALIZED_NAME_MATCHER = "Matcher";
    @SerializedName(SERIALIZED_NAME_MATCHER)
    @javax.annotation.Nullable
    private String matcher;

    public static final String SERIALIZED_NAME_VALUE = "Value";
    @SerializedName(SERIALIZED_NAME_VALUE)
    @javax.annotation.Nullable
    private String value;

    public InstallRule() {
    }

    public InstallRule action(@javax.annotation.Nullable String action) {
        this.action = action;
        return this;
    }

    /**
     * Action can be Rewrite, Redirect, etc...
     *
     * @return action
     */
    @javax.annotation.Nullable
    public String getAction() {
        return action;
    }

    public void setAction(@javax.annotation.Nullable String action) {
        this.action = action;
    }


    public InstallRule effect(@javax.annotation.Nullable InstallRuleEffect effect) {
        this.effect = effect;
        return this;
    }

    /**
     * Get effect
     *
     * @return effect
     */
    @javax.annotation.Nullable
    public InstallRuleEffect getEffect() {
        return effect;
    }

    public void setEffect(@javax.annotation.Nullable InstallRuleEffect effect) {
        this.effect = effect;
    }


    public InstallRule matcher(@javax.annotation.Nullable String matcher) {
        this.matcher = matcher;
        return this;
    }

    /**
     * Get matcher
     *
     * @return matcher
     */
    @javax.annotation.Nullable
    public String getMatcher() {
        return matcher;
    }

    public void setMatcher(@javax.annotation.Nullable String matcher) {
        this.matcher = matcher;
    }


    public InstallRule value(@javax.annotation.Nullable String value) {
        this.value = value;
        return this;
    }

    /**
     * Get value
     *
     * @return value
     */
    @javax.annotation.Nullable
    public String getValue() {
        return value;
    }

    public void setValue(@javax.annotation.Nullable String value) {
        this.value = value;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstallRule installRule = (InstallRule) o;
        return Objects.equals(this.action, installRule.action) &&
                Objects.equals(this.effect, installRule.effect) &&
                Objects.equals(this.matcher, installRule.matcher) &&
                Objects.equals(this.value, installRule.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(action, effect, matcher, value);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InstallRule {\n");
        sb.append("    action: ").append(toIndentedString(action)).append("\n");
        sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
        sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Action");
        openapiFields.add("Effect");
        openapiFields.add("Matcher");
        openapiFields.add("Value");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to InstallRule
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!InstallRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in InstallRule is not found in the empty JSON string", InstallRule.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!InstallRule.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) && !jsonObj.get("Action").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Action").toString()));
        }
        // validate the optional field `Effect`
        if (jsonObj.get("Effect") != null && !jsonObj.get("Effect").isJsonNull()) {
            InstallRuleEffect.validateJsonElement(jsonObj.get("Effect"));
        }
        if ((jsonObj.get("Matcher") != null && !jsonObj.get("Matcher").isJsonNull()) && !jsonObj.get("Matcher").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Matcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Matcher").toString()));
        }
        if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InstallRule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InstallRule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InstallRule> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(InstallRule.class));

            return (TypeAdapter<T>) new TypeAdapter<InstallRule>() {
                @Override
                public void write(JsonWriter out, InstallRule value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public InstallRule read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of InstallRule given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InstallRule
     * @throws IOException if the JSON string is invalid with respect to InstallRule
     */
    public static InstallRule fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InstallRule.class);
    }

    /**
     * Convert an instance of InstallRule to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

