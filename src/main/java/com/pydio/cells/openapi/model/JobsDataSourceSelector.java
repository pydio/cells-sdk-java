/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * JobsDataSourceSelector
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-16T11:01:01.368056162+01:00[Europe/Berlin]", comments = "Generator version: 7.4.0")
public class JobsDataSourceSelector {
  public static final String SERIALIZED_NAME_ALL = "All";
  @SerializedName(SERIALIZED_NAME_ALL)
  private Boolean all;

  public static final String SERIALIZED_NAME_CLEAR_INPUT = "ClearInput";
  @SerializedName(SERIALIZED_NAME_CLEAR_INPUT)
  private Boolean clearInput;

  public static final String SERIALIZED_NAME_COLLECT = "Collect";
  @SerializedName(SERIALIZED_NAME_COLLECT)
  private Boolean collect;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FAN_OUT_INPUT = "FanOutInput";
  @SerializedName(SERIALIZED_NAME_FAN_OUT_INPUT)
  private Boolean fanOutInput;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_QUERY = "Query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private ServiceQuery query;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private JobsDataSourceSelectorType type = JobsDataSourceSelectorType.DATASOURCE;

  public JobsDataSourceSelector() {
  }

  public JobsDataSourceSelector all(Boolean all) {
    this.all = all;
    return this;
  }

   /**
   * Get all
   * @return all
  **/
  @javax.annotation.Nullable
  public Boolean getAll() {
    return all;
  }

  public void setAll(Boolean all) {
    this.all = all;
  }


  public JobsDataSourceSelector clearInput(Boolean clearInput) {
    this.clearInput = clearInput;
    return this;
  }

   /**
   * Get clearInput
   * @return clearInput
  **/
  @javax.annotation.Nullable
  public Boolean getClearInput() {
    return clearInput;
  }

  public void setClearInput(Boolean clearInput) {
    this.clearInput = clearInput;
  }


  public JobsDataSourceSelector collect(Boolean collect) {
    this.collect = collect;
    return this;
  }

   /**
   * Get collect
   * @return collect
  **/
  @javax.annotation.Nullable
  public Boolean getCollect() {
    return collect;
  }

  public void setCollect(Boolean collect) {
    this.collect = collect;
  }


  public JobsDataSourceSelector description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JobsDataSourceSelector fanOutInput(Boolean fanOutInput) {
    this.fanOutInput = fanOutInput;
    return this;
  }

   /**
   * Get fanOutInput
   * @return fanOutInput
  **/
  @javax.annotation.Nullable
  public Boolean getFanOutInput() {
    return fanOutInput;
  }

  public void setFanOutInput(Boolean fanOutInput) {
    this.fanOutInput = fanOutInput;
  }


  public JobsDataSourceSelector label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public JobsDataSourceSelector query(ServiceQuery query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  public ServiceQuery getQuery() {
    return query;
  }

  public void setQuery(ServiceQuery query) {
    this.query = query;
  }


  public JobsDataSourceSelector timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * @return timeout
  **/
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  public JobsDataSourceSelector type(JobsDataSourceSelectorType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public JobsDataSourceSelectorType getType() {
    return type;
  }

  public void setType(JobsDataSourceSelectorType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsDataSourceSelector jobsDataSourceSelector = (JobsDataSourceSelector) o;
    return Objects.equals(this.all, jobsDataSourceSelector.all) &&
        Objects.equals(this.clearInput, jobsDataSourceSelector.clearInput) &&
        Objects.equals(this.collect, jobsDataSourceSelector.collect) &&
        Objects.equals(this.description, jobsDataSourceSelector.description) &&
        Objects.equals(this.fanOutInput, jobsDataSourceSelector.fanOutInput) &&
        Objects.equals(this.label, jobsDataSourceSelector.label) &&
        Objects.equals(this.query, jobsDataSourceSelector.query) &&
        Objects.equals(this.timeout, jobsDataSourceSelector.timeout) &&
        Objects.equals(this.type, jobsDataSourceSelector.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(all, clearInput, collect, description, fanOutInput, label, query, timeout, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsDataSourceSelector {\n");
    sb.append("    all: ").append(toIndentedString(all)).append("\n");
    sb.append("    clearInput: ").append(toIndentedString(clearInput)).append("\n");
    sb.append("    collect: ").append(toIndentedString(collect)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fanOutInput: ").append(toIndentedString(fanOutInput)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("All");
    openapiFields.add("ClearInput");
    openapiFields.add("Collect");
    openapiFields.add("Description");
    openapiFields.add("FanOutInput");
    openapiFields.add("Label");
    openapiFields.add("Query");
    openapiFields.add("Timeout");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to JobsDataSourceSelector
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobsDataSourceSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobsDataSourceSelector is not found in the empty JSON string", JobsDataSourceSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobsDataSourceSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsDataSourceSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
      }
      // validate the optional field `Query`
      if (jsonObj.get("Query") != null && !jsonObj.get("Query").isJsonNull()) {
        ServiceQuery.validateJsonElement(jsonObj.get("Query"));
      }
      if ((jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) && !jsonObj.get("Timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timeout").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        JobsDataSourceSelectorType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobsDataSourceSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobsDataSourceSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobsDataSourceSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobsDataSourceSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<JobsDataSourceSelector>() {
           @Override
           public void write(JsonWriter out, JobsDataSourceSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobsDataSourceSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobsDataSourceSelector given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobsDataSourceSelector
  * @throws IOException if the JSON string is invalid with respect to JobsDataSourceSelector
  */
  public static JobsDataSourceSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobsDataSourceSelector.class);
  }

 /**
  * Convert an instance of JobsDataSourceSelector to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

