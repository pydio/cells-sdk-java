/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * IdmWorkspaceSingleQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class IdmWorkspaceSingleQuery {
    public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "AttributeName";
    @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
    @javax.annotation.Nullable
    private String attributeName;

    public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE = "AttributeValue";
    @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE)
    @javax.annotation.Nullable
    private String attributeValue;

    public static final String SERIALIZED_NAME_HAS_ATTRIBUTE = "HasAttribute";
    @SerializedName(SERIALIZED_NAME_HAS_ATTRIBUTE)
    @javax.annotation.Nullable
    private String hasAttribute;

    public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
    @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
    @javax.annotation.Nullable
    private String lastUpdated;

    public static final String SERIALIZED_NAME_DESCRIPTION = "description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_LABEL = "label";
    @SerializedName(SERIALIZED_NAME_LABEL)
    @javax.annotation.Nullable
    private String label;

    public static final String SERIALIZED_NAME_NOT = "not";
    @SerializedName(SERIALIZED_NAME_NOT)
    @javax.annotation.Nullable
    private Boolean not;

    public static final String SERIALIZED_NAME_SCOPE = "scope";
    @SerializedName(SERIALIZED_NAME_SCOPE)
    @javax.annotation.Nullable
    private IdmWorkspaceScope scope = IdmWorkspaceScope.ANY;

    public static final String SERIALIZED_NAME_SLUG = "slug";
    @SerializedName(SERIALIZED_NAME_SLUG)
    @javax.annotation.Nullable
    private String slug;

    public static final String SERIALIZED_NAME_UUID = "uuid";
    @SerializedName(SERIALIZED_NAME_UUID)
    @javax.annotation.Nullable
    private String uuid;

    public IdmWorkspaceSingleQuery() {
    }

    public IdmWorkspaceSingleQuery attributeName(@javax.annotation.Nullable String attributeName) {
        this.attributeName = attributeName;
        return this;
    }

    /**
     * Get attributeName
     *
     * @return attributeName
     */
    @javax.annotation.Nullable
    public String getAttributeName() {
        return attributeName;
    }

    public void setAttributeName(@javax.annotation.Nullable String attributeName) {
        this.attributeName = attributeName;
    }


    public IdmWorkspaceSingleQuery attributeValue(@javax.annotation.Nullable String attributeValue) {
        this.attributeValue = attributeValue;
        return this;
    }

    /**
     * Get attributeValue
     *
     * @return attributeValue
     */
    @javax.annotation.Nullable
    public String getAttributeValue() {
        return attributeValue;
    }

    public void setAttributeValue(@javax.annotation.Nullable String attributeValue) {
        this.attributeValue = attributeValue;
    }


    public IdmWorkspaceSingleQuery hasAttribute(@javax.annotation.Nullable String hasAttribute) {
        this.hasAttribute = hasAttribute;
        return this;
    }

    /**
     * Get hasAttribute
     *
     * @return hasAttribute
     */
    @javax.annotation.Nullable
    public String getHasAttribute() {
        return hasAttribute;
    }

    public void setHasAttribute(@javax.annotation.Nullable String hasAttribute) {
        this.hasAttribute = hasAttribute;
    }


    public IdmWorkspaceSingleQuery lastUpdated(@javax.annotation.Nullable String lastUpdated) {
        this.lastUpdated = lastUpdated;
        return this;
    }

    /**
     * Get lastUpdated
     *
     * @return lastUpdated
     */
    @javax.annotation.Nullable
    public String getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(@javax.annotation.Nullable String lastUpdated) {
        this.lastUpdated = lastUpdated;
    }


    public IdmWorkspaceSingleQuery description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }


    public IdmWorkspaceSingleQuery label(@javax.annotation.Nullable String label) {
        this.label = label;
        return this;
    }

    /**
     * Get label
     *
     * @return label
     */
    @javax.annotation.Nullable
    public String getLabel() {
        return label;
    }

    public void setLabel(@javax.annotation.Nullable String label) {
        this.label = label;
    }


    public IdmWorkspaceSingleQuery not(@javax.annotation.Nullable Boolean not) {
        this.not = not;
        return this;
    }

    /**
     * Get not
     *
     * @return not
     */
    @javax.annotation.Nullable
    public Boolean getNot() {
        return not;
    }

    public void setNot(@javax.annotation.Nullable Boolean not) {
        this.not = not;
    }


    public IdmWorkspaceSingleQuery scope(@javax.annotation.Nullable IdmWorkspaceScope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get scope
     *
     * @return scope
     */
    @javax.annotation.Nullable
    public IdmWorkspaceScope getScope() {
        return scope;
    }

    public void setScope(@javax.annotation.Nullable IdmWorkspaceScope scope) {
        this.scope = scope;
    }


    public IdmWorkspaceSingleQuery slug(@javax.annotation.Nullable String slug) {
        this.slug = slug;
        return this;
    }

    /**
     * Get slug
     *
     * @return slug
     */
    @javax.annotation.Nullable
    public String getSlug() {
        return slug;
    }

    public void setSlug(@javax.annotation.Nullable String slug) {
        this.slug = slug;
    }


    public IdmWorkspaceSingleQuery uuid(@javax.annotation.Nullable String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get uuid
     *
     * @return uuid
     */
    @javax.annotation.Nullable
    public String getUuid() {
        return uuid;
    }

    public void setUuid(@javax.annotation.Nullable String uuid) {
        this.uuid = uuid;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IdmWorkspaceSingleQuery idmWorkspaceSingleQuery = (IdmWorkspaceSingleQuery) o;
        return Objects.equals(this.attributeName, idmWorkspaceSingleQuery.attributeName) &&
                Objects.equals(this.attributeValue, idmWorkspaceSingleQuery.attributeValue) &&
                Objects.equals(this.hasAttribute, idmWorkspaceSingleQuery.hasAttribute) &&
                Objects.equals(this.lastUpdated, idmWorkspaceSingleQuery.lastUpdated) &&
                Objects.equals(this.description, idmWorkspaceSingleQuery.description) &&
                Objects.equals(this.label, idmWorkspaceSingleQuery.label) &&
                Objects.equals(this.not, idmWorkspaceSingleQuery.not) &&
                Objects.equals(this.scope, idmWorkspaceSingleQuery.scope) &&
                Objects.equals(this.slug, idmWorkspaceSingleQuery.slug) &&
                Objects.equals(this.uuid, idmWorkspaceSingleQuery.uuid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(attributeName, attributeValue, hasAttribute, lastUpdated, description, label, not, scope, slug, uuid);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class IdmWorkspaceSingleQuery {\n");
        sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
        sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
        sb.append("    hasAttribute: ").append(toIndentedString(hasAttribute)).append("\n");
        sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    not: ").append(toIndentedString(not)).append("\n");
        sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
        sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("AttributeName");
        openapiFields.add("AttributeValue");
        openapiFields.add("HasAttribute");
        openapiFields.add("LastUpdated");
        openapiFields.add("description");
        openapiFields.add("label");
        openapiFields.add("not");
        openapiFields.add("scope");
        openapiFields.add("slug");
        openapiFields.add("uuid");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to IdmWorkspaceSingleQuery
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!IdmWorkspaceSingleQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in IdmWorkspaceSingleQuery is not found in the empty JSON string", IdmWorkspaceSingleQuery.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!IdmWorkspaceSingleQuery.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdmWorkspaceSingleQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("AttributeName") != null && !jsonObj.get("AttributeName").isJsonNull()) && !jsonObj.get("AttributeName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `AttributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttributeName").toString()));
        }
        if ((jsonObj.get("AttributeValue") != null && !jsonObj.get("AttributeValue").isJsonNull()) && !jsonObj.get("AttributeValue").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `AttributeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttributeValue").toString()));
        }
        if ((jsonObj.get("HasAttribute") != null && !jsonObj.get("HasAttribute").isJsonNull()) && !jsonObj.get("HasAttribute").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `HasAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HasAttribute").toString()));
        }
        if ((jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) && !jsonObj.get("LastUpdated").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `LastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastUpdated").toString()));
        }
        if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
        }
        if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
        }
        // validate the optional field `scope`
        if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
            IdmWorkspaceScope.validateJsonElement(jsonObj.get("scope"));
        }
        if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
        }
        if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IdmWorkspaceSingleQuery.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'IdmWorkspaceSingleQuery' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IdmWorkspaceSingleQuery> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(IdmWorkspaceSingleQuery.class));

            return (TypeAdapter<T>) new TypeAdapter<IdmWorkspaceSingleQuery>() {
                @Override
                public void write(JsonWriter out, IdmWorkspaceSingleQuery value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public IdmWorkspaceSingleQuery read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of IdmWorkspaceSingleQuery given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of IdmWorkspaceSingleQuery
     * @throws IOException if the JSON string is invalid with respect to IdmWorkspaceSingleQuery
     */
    public static IdmWorkspaceSingleQuery fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, IdmWorkspaceSingleQuery.class);
    }

    /**
     * Convert an instance of IdmWorkspaceSingleQuery to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

