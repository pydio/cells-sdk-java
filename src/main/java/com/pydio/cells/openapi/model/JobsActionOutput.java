/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * JobsActionOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class JobsActionOutput {
    public static final String SERIALIZED_NAME_ERROR_STRING = "ErrorString";
    @SerializedName(SERIALIZED_NAME_ERROR_STRING)
    @javax.annotation.Nullable
    private String errorString;

    public static final String SERIALIZED_NAME_IGNORED = "Ignored";
    @SerializedName(SERIALIZED_NAME_IGNORED)
    @javax.annotation.Nullable
    private Boolean ignored;

    public static final String SERIALIZED_NAME_JSON_BODY = "JsonBody";
    @SerializedName(SERIALIZED_NAME_JSON_BODY)
    @javax.annotation.Nullable
    private byte[] jsonBody;

    public static final String SERIALIZED_NAME_RAW_BODY = "RawBody";
    @SerializedName(SERIALIZED_NAME_RAW_BODY)
    @javax.annotation.Nullable
    private byte[] rawBody;

    public static final String SERIALIZED_NAME_STRING_BODY = "StringBody";
    @SerializedName(SERIALIZED_NAME_STRING_BODY)
    @javax.annotation.Nullable
    private String stringBody;

    public static final String SERIALIZED_NAME_SUCCESS = "Success";
    @SerializedName(SERIALIZED_NAME_SUCCESS)
    @javax.annotation.Nullable
    private Boolean success;

    public static final String SERIALIZED_NAME_TIME = "Time";
    @SerializedName(SERIALIZED_NAME_TIME)
    @javax.annotation.Nullable
    private Integer time;

    public static final String SERIALIZED_NAME_VARS = "Vars";
    @SerializedName(SERIALIZED_NAME_VARS)
    @javax.annotation.Nullable
    private Map<String, String> vars = new HashMap<>();

    public JobsActionOutput() {
    }

    public JobsActionOutput errorString(@javax.annotation.Nullable String errorString) {
        this.errorString = errorString;
        return this;
    }

    /**
     * Get errorString
     *
     * @return errorString
     */
    @javax.annotation.Nullable
    public String getErrorString() {
        return errorString;
    }

    public void setErrorString(@javax.annotation.Nullable String errorString) {
        this.errorString = errorString;
    }


    public JobsActionOutput ignored(@javax.annotation.Nullable Boolean ignored) {
        this.ignored = ignored;
        return this;
    }

    /**
     * Get ignored
     *
     * @return ignored
     */
    @javax.annotation.Nullable
    public Boolean getIgnored() {
        return ignored;
    }

    public void setIgnored(@javax.annotation.Nullable Boolean ignored) {
        this.ignored = ignored;
    }


    public JobsActionOutput jsonBody(@javax.annotation.Nullable byte[] jsonBody) {
        this.jsonBody = jsonBody;
        return this;
    }

    /**
     * Get jsonBody
     *
     * @return jsonBody
     */
    @javax.annotation.Nullable
    public byte[] getJsonBody() {
        return jsonBody;
    }

    public void setJsonBody(@javax.annotation.Nullable byte[] jsonBody) {
        this.jsonBody = jsonBody;
    }


    public JobsActionOutput rawBody(@javax.annotation.Nullable byte[] rawBody) {
        this.rawBody = rawBody;
        return this;
    }

    /**
     * Get rawBody
     *
     * @return rawBody
     */
    @javax.annotation.Nullable
    public byte[] getRawBody() {
        return rawBody;
    }

    public void setRawBody(@javax.annotation.Nullable byte[] rawBody) {
        this.rawBody = rawBody;
    }


    public JobsActionOutput stringBody(@javax.annotation.Nullable String stringBody) {
        this.stringBody = stringBody;
        return this;
    }

    /**
     * Get stringBody
     *
     * @return stringBody
     */
    @javax.annotation.Nullable
    public String getStringBody() {
        return stringBody;
    }

    public void setStringBody(@javax.annotation.Nullable String stringBody) {
        this.stringBody = stringBody;
    }


    public JobsActionOutput success(@javax.annotation.Nullable Boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get success
     *
     * @return success
     */
    @javax.annotation.Nullable
    public Boolean getSuccess() {
        return success;
    }

    public void setSuccess(@javax.annotation.Nullable Boolean success) {
        this.success = success;
    }


    public JobsActionOutput time(@javax.annotation.Nullable Integer time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @javax.annotation.Nullable
    public Integer getTime() {
        return time;
    }

    public void setTime(@javax.annotation.Nullable Integer time) {
        this.time = time;
    }


    public JobsActionOutput vars(@javax.annotation.Nullable Map<String, String> vars) {
        this.vars = vars;
        return this;
    }

    public JobsActionOutput putVarsItem(String key, String varsItem) {
        if (this.vars == null) {
            this.vars = new HashMap<>();
        }
        this.vars.put(key, varsItem);
        return this;
    }

    /**
     * Vars container, values are json-encoded.
     *
     * @return vars
     */
    @javax.annotation.Nullable
    public Map<String, String> getVars() {
        return vars;
    }

    public void setVars(@javax.annotation.Nullable Map<String, String> vars) {
        this.vars = vars;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobsActionOutput jobsActionOutput = (JobsActionOutput) o;
        return Objects.equals(this.errorString, jobsActionOutput.errorString) &&
                Objects.equals(this.ignored, jobsActionOutput.ignored) &&
                Arrays.equals(this.jsonBody, jobsActionOutput.jsonBody) &&
                Arrays.equals(this.rawBody, jobsActionOutput.rawBody) &&
                Objects.equals(this.stringBody, jobsActionOutput.stringBody) &&
                Objects.equals(this.success, jobsActionOutput.success) &&
                Objects.equals(this.time, jobsActionOutput.time) &&
                Objects.equals(this.vars, jobsActionOutput.vars);
    }

    @Override
    public int hashCode() {
        return Objects.hash(errorString, ignored, Arrays.hashCode(jsonBody), Arrays.hashCode(rawBody), stringBody, success, time, vars);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobsActionOutput {\n");
        sb.append("    errorString: ").append(toIndentedString(errorString)).append("\n");
        sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
        sb.append("    jsonBody: ").append(toIndentedString(jsonBody)).append("\n");
        sb.append("    rawBody: ").append(toIndentedString(rawBody)).append("\n");
        sb.append("    stringBody: ").append(toIndentedString(stringBody)).append("\n");
        sb.append("    success: ").append(toIndentedString(success)).append("\n");
        sb.append("    time: ").append(toIndentedString(time)).append("\n");
        sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("ErrorString");
        openapiFields.add("Ignored");
        openapiFields.add("JsonBody");
        openapiFields.add("RawBody");
        openapiFields.add("StringBody");
        openapiFields.add("Success");
        openapiFields.add("Time");
        openapiFields.add("Vars");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to JobsActionOutput
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!JobsActionOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in JobsActionOutput is not found in the empty JSON string", JobsActionOutput.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!JobsActionOutput.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsActionOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("ErrorString") != null && !jsonObj.get("ErrorString").isJsonNull()) && !jsonObj.get("ErrorString").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ErrorString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorString").toString()));
        }
        if ((jsonObj.get("StringBody") != null && !jsonObj.get("StringBody").isJsonNull()) && !jsonObj.get("StringBody").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `StringBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StringBody").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JobsActionOutput.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JobsActionOutput' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<JobsActionOutput> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(JobsActionOutput.class));

            return (TypeAdapter<T>) new TypeAdapter<JobsActionOutput>() {
                @Override
                public void write(JsonWriter out, JobsActionOutput value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public JobsActionOutput read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of JobsActionOutput given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of JobsActionOutput
     * @throws IOException if the JSON string is invalid with respect to JobsActionOutput
     */
    public static JobsActionOutput fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JobsActionOutput.class);
    }

    /**
     * Convert an instance of JobsActionOutput to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

