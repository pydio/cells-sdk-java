/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * IdmUserMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class IdmUserMeta {
    public static final String SERIALIZED_NAME_JSON_VALUE = "JsonValue";
    @SerializedName(SERIALIZED_NAME_JSON_VALUE)
    @javax.annotation.Nullable
    private String jsonValue;

    public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
    @SerializedName(SERIALIZED_NAME_NAMESPACE)
    @javax.annotation.Nullable
    private String namespace;

    public static final String SERIALIZED_NAME_NODE_UUID = "NodeUuid";
    @SerializedName(SERIALIZED_NAME_NODE_UUID)
    @javax.annotation.Nullable
    private String nodeUuid;

    public static final String SERIALIZED_NAME_POLICIES = "Policies";
    @SerializedName(SERIALIZED_NAME_POLICIES)
    @javax.annotation.Nullable
    private List<ServiceResourcePolicy> policies = new ArrayList<>();

    public static final String SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE = "PoliciesContextEditable";
    @SerializedName(SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE)
    @javax.annotation.Nullable
    private Boolean policiesContextEditable;

    public static final String SERIALIZED_NAME_RESOLVED_NODE = "ResolvedNode";
    @SerializedName(SERIALIZED_NAME_RESOLVED_NODE)
    @javax.annotation.Nullable
    private TreeNode resolvedNode;

    public static final String SERIALIZED_NAME_UUID = "Uuid";
    @SerializedName(SERIALIZED_NAME_UUID)
    @javax.annotation.Nullable
    private String uuid;

    public IdmUserMeta() {
    }

    public IdmUserMeta jsonValue(@javax.annotation.Nullable String jsonValue) {
        this.jsonValue = jsonValue;
        return this;
    }

    /**
     * Get jsonValue
     *
     * @return jsonValue
     */
    @javax.annotation.Nullable
    public String getJsonValue() {
        return jsonValue;
    }

    public void setJsonValue(@javax.annotation.Nullable String jsonValue) {
        this.jsonValue = jsonValue;
    }


    public IdmUserMeta namespace(@javax.annotation.Nullable String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Get namespace
     *
     * @return namespace
     */
    @javax.annotation.Nullable
    public String getNamespace() {
        return namespace;
    }

    public void setNamespace(@javax.annotation.Nullable String namespace) {
        this.namespace = namespace;
    }


    public IdmUserMeta nodeUuid(@javax.annotation.Nullable String nodeUuid) {
        this.nodeUuid = nodeUuid;
        return this;
    }

    /**
     * Get nodeUuid
     *
     * @return nodeUuid
     */
    @javax.annotation.Nullable
    public String getNodeUuid() {
        return nodeUuid;
    }

    public void setNodeUuid(@javax.annotation.Nullable String nodeUuid) {
        this.nodeUuid = nodeUuid;
    }


    public IdmUserMeta policies(@javax.annotation.Nullable List<ServiceResourcePolicy> policies) {
        this.policies = policies;
        return this;
    }

    public IdmUserMeta addPoliciesItem(ServiceResourcePolicy policiesItem) {
        if (this.policies == null) {
            this.policies = new ArrayList<>();
        }
        this.policies.add(policiesItem);
        return this;
    }

    /**
     * Get policies
     *
     * @return policies
     */
    @javax.annotation.Nullable
    public List<ServiceResourcePolicy> getPolicies() {
        return policies;
    }

    public void setPolicies(@javax.annotation.Nullable List<ServiceResourcePolicy> policies) {
        this.policies = policies;
    }


    public IdmUserMeta policiesContextEditable(@javax.annotation.Nullable Boolean policiesContextEditable) {
        this.policiesContextEditable = policiesContextEditable;
        return this;
    }

    /**
     * Get policiesContextEditable
     *
     * @return policiesContextEditable
     */
    @javax.annotation.Nullable
    public Boolean getPoliciesContextEditable() {
        return policiesContextEditable;
    }

    public void setPoliciesContextEditable(@javax.annotation.Nullable Boolean policiesContextEditable) {
        this.policiesContextEditable = policiesContextEditable;
    }


    public IdmUserMeta resolvedNode(@javax.annotation.Nullable TreeNode resolvedNode) {
        this.resolvedNode = resolvedNode;
        return this;
    }

    /**
     * Get resolvedNode
     *
     * @return resolvedNode
     */
    @javax.annotation.Nullable
    public TreeNode getResolvedNode() {
        return resolvedNode;
    }

    public void setResolvedNode(@javax.annotation.Nullable TreeNode resolvedNode) {
        this.resolvedNode = resolvedNode;
    }


    public IdmUserMeta uuid(@javax.annotation.Nullable String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get uuid
     *
     * @return uuid
     */
    @javax.annotation.Nullable
    public String getUuid() {
        return uuid;
    }

    public void setUuid(@javax.annotation.Nullable String uuid) {
        this.uuid = uuid;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IdmUserMeta idmUserMeta = (IdmUserMeta) o;
        return Objects.equals(this.jsonValue, idmUserMeta.jsonValue) &&
                Objects.equals(this.namespace, idmUserMeta.namespace) &&
                Objects.equals(this.nodeUuid, idmUserMeta.nodeUuid) &&
                Objects.equals(this.policies, idmUserMeta.policies) &&
                Objects.equals(this.policiesContextEditable, idmUserMeta.policiesContextEditable) &&
                Objects.equals(this.resolvedNode, idmUserMeta.resolvedNode) &&
                Objects.equals(this.uuid, idmUserMeta.uuid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jsonValue, namespace, nodeUuid, policies, policiesContextEditable, resolvedNode, uuid);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class IdmUserMeta {\n");
        sb.append("    jsonValue: ").append(toIndentedString(jsonValue)).append("\n");
        sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
        sb.append("    nodeUuid: ").append(toIndentedString(nodeUuid)).append("\n");
        sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
        sb.append("    policiesContextEditable: ").append(toIndentedString(policiesContextEditable)).append("\n");
        sb.append("    resolvedNode: ").append(toIndentedString(resolvedNode)).append("\n");
        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("JsonValue");
        openapiFields.add("Namespace");
        openapiFields.add("NodeUuid");
        openapiFields.add("Policies");
        openapiFields.add("PoliciesContextEditable");
        openapiFields.add("ResolvedNode");
        openapiFields.add("Uuid");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to IdmUserMeta
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!IdmUserMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in IdmUserMeta is not found in the empty JSON string", IdmUserMeta.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!IdmUserMeta.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdmUserMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("JsonValue") != null && !jsonObj.get("JsonValue").isJsonNull()) && !jsonObj.get("JsonValue").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `JsonValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JsonValue").toString()));
        }
        if ((jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonNull()) && !jsonObj.get("Namespace").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Namespace").toString()));
        }
        if ((jsonObj.get("NodeUuid") != null && !jsonObj.get("NodeUuid").isJsonNull()) && !jsonObj.get("NodeUuid").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `NodeUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NodeUuid").toString()));
        }
        if (jsonObj.get("Policies") != null && !jsonObj.get("Policies").isJsonNull()) {
            JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("Policies");
            if (jsonArraypolicies != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Policies").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `Policies` to be an array in the JSON string but got `%s`", jsonObj.get("Policies").toString()));
                }

                // validate the optional field `Policies` (array)
                for (int i = 0; i < jsonArraypolicies.size(); i++) {
                    ServiceResourcePolicy.validateJsonElement(jsonArraypolicies.get(i));
                }
                ;
            }
        }
        // validate the optional field `ResolvedNode`
        if (jsonObj.get("ResolvedNode") != null && !jsonObj.get("ResolvedNode").isJsonNull()) {
            TreeNode.validateJsonElement(jsonObj.get("ResolvedNode"));
        }
        if ((jsonObj.get("Uuid") != null && !jsonObj.get("Uuid").isJsonNull()) && !jsonObj.get("Uuid").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Uuid").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IdmUserMeta.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'IdmUserMeta' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IdmUserMeta> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(IdmUserMeta.class));

            return (TypeAdapter<T>) new TypeAdapter<IdmUserMeta>() {
                @Override
                public void write(JsonWriter out, IdmUserMeta value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public IdmUserMeta read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of IdmUserMeta given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of IdmUserMeta
     * @throws IOException if the JSON string is invalid with respect to IdmUserMeta
     */
    public static IdmUserMeta fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, IdmUserMeta.class);
    }

    /**
     * Convert an instance of IdmUserMeta to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

