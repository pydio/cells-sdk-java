/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * InstallCheckResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class InstallCheckResult {
    public static final String SERIALIZED_NAME_JSON_RESULT = "JsonResult";
    @SerializedName(SERIALIZED_NAME_JSON_RESULT)
    @javax.annotation.Nullable
    private String jsonResult;

    public static final String SERIALIZED_NAME_NAME = "Name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_SUCCESS = "Success";
    @SerializedName(SERIALIZED_NAME_SUCCESS)
    @javax.annotation.Nullable
    private Boolean success;

    public InstallCheckResult() {
    }

    public InstallCheckResult jsonResult(@javax.annotation.Nullable String jsonResult) {
        this.jsonResult = jsonResult;
        return this;
    }

    /**
     * Get jsonResult
     *
     * @return jsonResult
     */
    @javax.annotation.Nullable
    public String getJsonResult() {
        return jsonResult;
    }

    public void setJsonResult(@javax.annotation.Nullable String jsonResult) {
        this.jsonResult = jsonResult;
    }


    public InstallCheckResult name(@javax.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nullable String name) {
        this.name = name;
    }


    public InstallCheckResult success(@javax.annotation.Nullable Boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get success
     *
     * @return success
     */
    @javax.annotation.Nullable
    public Boolean getSuccess() {
        return success;
    }

    public void setSuccess(@javax.annotation.Nullable Boolean success) {
        this.success = success;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstallCheckResult installCheckResult = (InstallCheckResult) o;
        return Objects.equals(this.jsonResult, installCheckResult.jsonResult) &&
                Objects.equals(this.name, installCheckResult.name) &&
                Objects.equals(this.success, installCheckResult.success);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jsonResult, name, success);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InstallCheckResult {\n");
        sb.append("    jsonResult: ").append(toIndentedString(jsonResult)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    success: ").append(toIndentedString(success)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("JsonResult");
        openapiFields.add("Name");
        openapiFields.add("Success");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to InstallCheckResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!InstallCheckResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in InstallCheckResult is not found in the empty JSON string", InstallCheckResult.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!InstallCheckResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallCheckResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("JsonResult") != null && !jsonObj.get("JsonResult").isJsonNull()) && !jsonObj.get("JsonResult").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `JsonResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JsonResult").toString()));
        }
        if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InstallCheckResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InstallCheckResult' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InstallCheckResult> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(InstallCheckResult.class));

            return (TypeAdapter<T>) new TypeAdapter<InstallCheckResult>() {
                @Override
                public void write(JsonWriter out, InstallCheckResult value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public InstallCheckResult read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of InstallCheckResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InstallCheckResult
     * @throws IOException if the JSON string is invalid with respect to InstallCheckResult
     */
    public static InstallCheckResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InstallCheckResult.class);
    }

    /**
     * Convert an instance of InstallCheckResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

