/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.model.ProtobufAny;
import com.pydio.cells.openapi.model.ServiceOperationType;
import com.pydio.cells.openapi.model.ServiceResourcePolicyQuery;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ServiceQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-05T12:35:48.905699+02:00[Europe/Berlin]")
public class ServiceQuery {
  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_OPERATION = "Operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private ServiceOperationType operation = ServiceOperationType.OR;

  public static final String SERIALIZED_NAME_RESOURCE_POLICY_QUERY = "ResourcePolicyQuery";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POLICY_QUERY)
  private ServiceResourcePolicyQuery resourcePolicyQuery;

  public static final String SERIALIZED_NAME_SUB_QUERIES = "SubQueries";
  @SerializedName(SERIALIZED_NAME_SUB_QUERIES)
  private List<ProtobufAny> subQueries = null;

  public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private Integer groupBy;

  public ServiceQuery() { 
  }

  public ServiceQuery limit(String limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLimit() {
    return limit;
  }


  public void setLimit(String limit) {
    this.limit = limit;
  }


  public ServiceQuery offset(String offset) {
    
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOffset() {
    return offset;
  }


  public void setOffset(String offset) {
    this.offset = offset;
  }


  public ServiceQuery operation(ServiceOperationType operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ServiceOperationType getOperation() {
    return operation;
  }


  public void setOperation(ServiceOperationType operation) {
    this.operation = operation;
  }


  public ServiceQuery resourcePolicyQuery(ServiceResourcePolicyQuery resourcePolicyQuery) {
    
    this.resourcePolicyQuery = resourcePolicyQuery;
    return this;
  }

   /**
   * Get resourcePolicyQuery
   * @return resourcePolicyQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ServiceResourcePolicyQuery getResourcePolicyQuery() {
    return resourcePolicyQuery;
  }


  public void setResourcePolicyQuery(ServiceResourcePolicyQuery resourcePolicyQuery) {
    this.resourcePolicyQuery = resourcePolicyQuery;
  }


  public ServiceQuery subQueries(List<ProtobufAny> subQueries) {
    
    this.subQueries = subQueries;
    return this;
  }

  public ServiceQuery addSubQueriesItem(ProtobufAny subQueriesItem) {
    if (this.subQueries == null) {
      this.subQueries = new ArrayList<ProtobufAny>();
    }
    this.subQueries.add(subQueriesItem);
    return this;
  }

   /**
   * Get subQueries
   * @return subQueries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ProtobufAny> getSubQueries() {
    return subQueries;
  }


  public void setSubQueries(List<ProtobufAny> subQueries) {
    this.subQueries = subQueries;
  }


  public ServiceQuery groupBy(Integer groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getGroupBy() {
    return groupBy;
  }


  public void setGroupBy(Integer groupBy) {
    this.groupBy = groupBy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceQuery serviceQuery = (ServiceQuery) o;
    return Objects.equals(this.limit, serviceQuery.limit) &&
        Objects.equals(this.offset, serviceQuery.offset) &&
        Objects.equals(this.operation, serviceQuery.operation) &&
        Objects.equals(this.resourcePolicyQuery, serviceQuery.resourcePolicyQuery) &&
        Objects.equals(this.subQueries, serviceQuery.subQueries) &&
        Objects.equals(this.groupBy, serviceQuery.groupBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, offset, operation, resourcePolicyQuery, subQueries, groupBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceQuery {\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    resourcePolicyQuery: ").append(toIndentedString(resourcePolicyQuery)).append("\n");
    sb.append("    subQueries: ").append(toIndentedString(subQueries)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

