/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * ServiceQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-16T11:01:01.368056162+01:00[Europe/Berlin]", comments = "Generator version: 7.4.0")
public class ServiceQuery {
  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_OPERATION = "Operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private ServiceOperationType operation = ServiceOperationType.OR;

  public static final String SERIALIZED_NAME_RESOURCE_POLICY_QUERY = "ResourcePolicyQuery";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POLICY_QUERY)
  private ServiceResourcePolicyQuery resourcePolicyQuery;

  public static final String SERIALIZED_NAME_SORT_DESC = "SortDesc";
  @SerializedName(SERIALIZED_NAME_SORT_DESC)
  private Boolean sortDesc;

  public static final String SERIALIZED_NAME_SORT_FIELD = "SortField";
  @SerializedName(SERIALIZED_NAME_SORT_FIELD)
  private String sortField;

  public static final String SERIALIZED_NAME_SUB_QUERIES = "SubQueries";
  @SerializedName(SERIALIZED_NAME_SUB_QUERIES)
  private List<ProtobufAny> subQueries;

  public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private Integer groupBy;

  public ServiceQuery() {
  }

  public ServiceQuery limit(String limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }


  public ServiceQuery offset(String offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  public String getOffset() {
    return offset;
  }

  public void setOffset(String offset) {
    this.offset = offset;
  }


  public ServiceQuery operation(ServiceOperationType operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable
  public ServiceOperationType getOperation() {
    return operation;
  }

  public void setOperation(ServiceOperationType operation) {
    this.operation = operation;
  }


  public ServiceQuery resourcePolicyQuery(ServiceResourcePolicyQuery resourcePolicyQuery) {
    this.resourcePolicyQuery = resourcePolicyQuery;
    return this;
  }

   /**
   * Get resourcePolicyQuery
   * @return resourcePolicyQuery
  **/
  @javax.annotation.Nullable
  public ServiceResourcePolicyQuery getResourcePolicyQuery() {
    return resourcePolicyQuery;
  }

  public void setResourcePolicyQuery(ServiceResourcePolicyQuery resourcePolicyQuery) {
    this.resourcePolicyQuery = resourcePolicyQuery;
  }


  public ServiceQuery sortDesc(Boolean sortDesc) {
    this.sortDesc = sortDesc;
    return this;
  }

   /**
   * Get sortDesc
   * @return sortDesc
  **/
  @javax.annotation.Nullable
  public Boolean getSortDesc() {
    return sortDesc;
  }

  public void setSortDesc(Boolean sortDesc) {
    this.sortDesc = sortDesc;
  }


  public ServiceQuery sortField(String sortField) {
    this.sortField = sortField;
    return this;
  }

   /**
   * Get sortField
   * @return sortField
  **/
  @javax.annotation.Nullable
  public String getSortField() {
    return sortField;
  }

  public void setSortField(String sortField) {
    this.sortField = sortField;
  }


  public ServiceQuery subQueries(List<ProtobufAny> subQueries) {
    this.subQueries = subQueries;
    return this;
  }

  public ServiceQuery addSubQueriesItem(ProtobufAny subQueriesItem) {
    if (this.subQueries == null) {
      this.subQueries = new ArrayList<>();
    }
    this.subQueries.add(subQueriesItem);
    return this;
  }

   /**
   * Get subQueries
   * @return subQueries
  **/
  @javax.annotation.Nullable
  public List<ProtobufAny> getSubQueries() {
    return subQueries;
  }

  public void setSubQueries(List<ProtobufAny> subQueries) {
    this.subQueries = subQueries;
  }


  public ServiceQuery groupBy(Integer groupBy) {
    this.groupBy = groupBy;
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @javax.annotation.Nullable
  public Integer getGroupBy() {
    return groupBy;
  }

  public void setGroupBy(Integer groupBy) {
    this.groupBy = groupBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceQuery serviceQuery = (ServiceQuery) o;
    return Objects.equals(this.limit, serviceQuery.limit) &&
        Objects.equals(this.offset, serviceQuery.offset) &&
        Objects.equals(this.operation, serviceQuery.operation) &&
        Objects.equals(this.resourcePolicyQuery, serviceQuery.resourcePolicyQuery) &&
        Objects.equals(this.sortDesc, serviceQuery.sortDesc) &&
        Objects.equals(this.sortField, serviceQuery.sortField) &&
        Objects.equals(this.subQueries, serviceQuery.subQueries) &&
        Objects.equals(this.groupBy, serviceQuery.groupBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, offset, operation, resourcePolicyQuery, sortDesc, sortField, subQueries, groupBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceQuery {\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    resourcePolicyQuery: ").append(toIndentedString(resourcePolicyQuery)).append("\n");
    sb.append("    sortDesc: ").append(toIndentedString(sortDesc)).append("\n");
    sb.append("    sortField: ").append(toIndentedString(sortField)).append("\n");
    sb.append("    subQueries: ").append(toIndentedString(subQueries)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Limit");
    openapiFields.add("Offset");
    openapiFields.add("Operation");
    openapiFields.add("ResourcePolicyQuery");
    openapiFields.add("SortDesc");
    openapiFields.add("SortField");
    openapiFields.add("SubQueries");
    openapiFields.add("groupBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ServiceQuery
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceQuery is not found in the empty JSON string", ServiceQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) && !jsonObj.get("Limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Limit").toString()));
      }
      if ((jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) && !jsonObj.get("Offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Offset").toString()));
      }
      // validate the optional field `Operation`
      if (jsonObj.get("Operation") != null && !jsonObj.get("Operation").isJsonNull()) {
        ServiceOperationType.validateJsonElement(jsonObj.get("Operation"));
      }
      // validate the optional field `ResourcePolicyQuery`
      if (jsonObj.get("ResourcePolicyQuery") != null && !jsonObj.get("ResourcePolicyQuery").isJsonNull()) {
        ServiceResourcePolicyQuery.validateJsonElement(jsonObj.get("ResourcePolicyQuery"));
      }
      if ((jsonObj.get("SortField") != null && !jsonObj.get("SortField").isJsonNull()) && !jsonObj.get("SortField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SortField").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SubQueries") != null && !jsonObj.get("SubQueries").isJsonNull() && !jsonObj.get("SubQueries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubQueries` to be an array in the JSON string but got `%s`", jsonObj.get("SubQueries").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceQuery>() {
           @Override
           public void write(JsonWriter out, ServiceQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ServiceQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ServiceQuery
  * @throws IOException if the JSON string is invalid with respect to ServiceQuery
  */
  public static ServiceQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceQuery.class);
  }

 /**
  * Convert an instance of ServiceQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

