/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.model.ActivityStreamContext;
import com.pydio.cells.openapi.model.ActivitySummaryPointOfView;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ActivityStreamActivitiesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-09T15:35:02.533763+02:00[Europe/Berlin]")
public class ActivityStreamActivitiesRequest {
  public static final String SERIALIZED_NAME_AS_DIGEST = "AsDigest";
  @SerializedName(SERIALIZED_NAME_AS_DIGEST)
  private Boolean asDigest;

  public static final String SERIALIZED_NAME_BOX_NAME = "BoxName";
  @SerializedName(SERIALIZED_NAME_BOX_NAME)
  private String boxName;

  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private ActivityStreamContext context = ActivityStreamContext.MYFEED;

  public static final String SERIALIZED_NAME_CONTEXT_DATA = "ContextData";
  @SerializedName(SERIALIZED_NAME_CONTEXT_DATA)
  private String contextData;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_POINT_OF_VIEW = "PointOfView";
  @SerializedName(SERIALIZED_NAME_POINT_OF_VIEW)
  private ActivitySummaryPointOfView pointOfView = ActivitySummaryPointOfView.GENERIC;

  public static final String SERIALIZED_NAME_STREAM_FILTER = "StreamFilter";
  @SerializedName(SERIALIZED_NAME_STREAM_FILTER)
  private String streamFilter;

  public static final String SERIALIZED_NAME_UNREAD_COUNT_ONLY = "UnreadCountOnly";
  @SerializedName(SERIALIZED_NAME_UNREAD_COUNT_ONLY)
  private Boolean unreadCountOnly;

  public ActivityStreamActivitiesRequest() { 
  }

  public ActivityStreamActivitiesRequest asDigest(Boolean asDigest) {
    
    this.asDigest = asDigest;
    return this;
  }

   /**
   * Get asDigest
   * @return asDigest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAsDigest() {
    return asDigest;
  }


  public void setAsDigest(Boolean asDigest) {
    this.asDigest = asDigest;
  }


  public ActivityStreamActivitiesRequest boxName(String boxName) {
    
    this.boxName = boxName;
    return this;
  }

   /**
   * Get boxName
   * @return boxName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBoxName() {
    return boxName;
  }


  public void setBoxName(String boxName) {
    this.boxName = boxName;
  }


  public ActivityStreamActivitiesRequest context(ActivityStreamContext context) {
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ActivityStreamContext getContext() {
    return context;
  }


  public void setContext(ActivityStreamContext context) {
    this.context = context;
  }


  public ActivityStreamActivitiesRequest contextData(String contextData) {
    
    this.contextData = contextData;
    return this;
  }

   /**
   * Get contextData
   * @return contextData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContextData() {
    return contextData;
  }


  public void setContextData(String contextData) {
    this.contextData = contextData;
  }


  public ActivityStreamActivitiesRequest language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Provide language information for building the human-readable strings.
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide language information for building the human-readable strings.")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public ActivityStreamActivitiesRequest limit(String limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLimit() {
    return limit;
  }


  public void setLimit(String limit) {
    this.limit = limit;
  }


  public ActivityStreamActivitiesRequest offset(String offset) {
    
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOffset() {
    return offset;
  }


  public void setOffset(String offset) {
    this.offset = offset;
  }


  public ActivityStreamActivitiesRequest pointOfView(ActivitySummaryPointOfView pointOfView) {
    
    this.pointOfView = pointOfView;
    return this;
  }

   /**
   * Get pointOfView
   * @return pointOfView
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ActivitySummaryPointOfView getPointOfView() {
    return pointOfView;
  }


  public void setPointOfView(ActivitySummaryPointOfView pointOfView) {
    this.pointOfView = pointOfView;
  }


  public ActivityStreamActivitiesRequest streamFilter(String streamFilter) {
    
    this.streamFilter = streamFilter;
    return this;
  }

   /**
   * Get streamFilter
   * @return streamFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStreamFilter() {
    return streamFilter;
  }


  public void setStreamFilter(String streamFilter) {
    this.streamFilter = streamFilter;
  }


  public ActivityStreamActivitiesRequest unreadCountOnly(Boolean unreadCountOnly) {
    
    this.unreadCountOnly = unreadCountOnly;
    return this;
  }

   /**
   * Get unreadCountOnly
   * @return unreadCountOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUnreadCountOnly() {
    return unreadCountOnly;
  }


  public void setUnreadCountOnly(Boolean unreadCountOnly) {
    this.unreadCountOnly = unreadCountOnly;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityStreamActivitiesRequest activityStreamActivitiesRequest = (ActivityStreamActivitiesRequest) o;
    return Objects.equals(this.asDigest, activityStreamActivitiesRequest.asDigest) &&
        Objects.equals(this.boxName, activityStreamActivitiesRequest.boxName) &&
        Objects.equals(this.context, activityStreamActivitiesRequest.context) &&
        Objects.equals(this.contextData, activityStreamActivitiesRequest.contextData) &&
        Objects.equals(this.language, activityStreamActivitiesRequest.language) &&
        Objects.equals(this.limit, activityStreamActivitiesRequest.limit) &&
        Objects.equals(this.offset, activityStreamActivitiesRequest.offset) &&
        Objects.equals(this.pointOfView, activityStreamActivitiesRequest.pointOfView) &&
        Objects.equals(this.streamFilter, activityStreamActivitiesRequest.streamFilter) &&
        Objects.equals(this.unreadCountOnly, activityStreamActivitiesRequest.unreadCountOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asDigest, boxName, context, contextData, language, limit, offset, pointOfView, streamFilter, unreadCountOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityStreamActivitiesRequest {\n");
    sb.append("    asDigest: ").append(toIndentedString(asDigest)).append("\n");
    sb.append("    boxName: ").append(toIndentedString(boxName)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    contextData: ").append(toIndentedString(contextData)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    pointOfView: ").append(toIndentedString(pointOfView)).append("\n");
    sb.append("    streamFilter: ").append(toIndentedString(streamFilter)).append("\n");
    sb.append("    unreadCountOnly: ").append(toIndentedString(unreadCountOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

