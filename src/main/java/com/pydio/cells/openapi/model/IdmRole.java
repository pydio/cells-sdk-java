/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Role represents a generic set of permissions that can be applied to any users or groups.
 */
@ApiModel(description = "Role represents a generic set of permissions that can be applied to any users or groups.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-20T11:40:14.306426+01:00[Europe/Berlin]")
public class IdmRole {
  public static final String SERIALIZED_NAME_AUTO_APPLIES = "AutoApplies";
  @SerializedName(SERIALIZED_NAME_AUTO_APPLIES)
  private List<String> autoApplies = null;

  public static final String SERIALIZED_NAME_FORCE_OVERRIDE = "ForceOverride";
  @SerializedName(SERIALIZED_NAME_FORCE_OVERRIDE)
  private Boolean forceOverride;

  public static final String SERIALIZED_NAME_GROUP_ROLE = "GroupRole";
  @SerializedName(SERIALIZED_NAME_GROUP_ROLE)
  private Boolean groupRole;

  public static final String SERIALIZED_NAME_IS_TEAM = "IsTeam";
  @SerializedName(SERIALIZED_NAME_IS_TEAM)
  private Boolean isTeam;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private Integer lastUpdated;

  public static final String SERIALIZED_NAME_POLICIES = "Policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<ServiceResourcePolicy> policies = null;

  public static final String SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE = "PoliciesContextEditable";
  @SerializedName(SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE)
  private Boolean policiesContextEditable;

  public static final String SERIALIZED_NAME_USER_ROLE = "UserRole";
  @SerializedName(SERIALIZED_NAME_USER_ROLE)
  private Boolean userRole;

  public static final String SERIALIZED_NAME_UUID = "Uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public IdmRole() {
  }

  public IdmRole autoApplies(List<String> autoApplies) {
    
    this.autoApplies = autoApplies;
    return this;
  }

  public IdmRole addAutoAppliesItem(String autoAppliesItem) {
    if (this.autoApplies == null) {
      this.autoApplies = new ArrayList<>();
    }
    this.autoApplies.add(autoAppliesItem);
    return this;
  }

   /**
   * Get autoApplies
   * @return autoApplies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAutoApplies() {
    return autoApplies;
  }


  public void setAutoApplies(List<String> autoApplies) {
    this.autoApplies = autoApplies;
  }


  public IdmRole forceOverride(Boolean forceOverride) {
    
    this.forceOverride = forceOverride;
    return this;
  }

   /**
   * Is used in a stack of roles, this one will always be applied last.
   * @return forceOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is used in a stack of roles, this one will always be applied last.")

  public Boolean getForceOverride() {
    return forceOverride;
  }


  public void setForceOverride(Boolean forceOverride) {
    this.forceOverride = forceOverride;
  }


  public IdmRole groupRole(Boolean groupRole) {
    
    this.groupRole = groupRole;
    return this;
  }

   /**
   * Get groupRole
   * @return groupRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getGroupRole() {
    return groupRole;
  }


  public void setGroupRole(Boolean groupRole) {
    this.groupRole = groupRole;
  }


  public IdmRole isTeam(Boolean isTeam) {
    
    this.isTeam = isTeam;
    return this;
  }

   /**
   * Get isTeam
   * @return isTeam
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsTeam() {
    return isTeam;
  }


  public void setIsTeam(Boolean isTeam) {
    this.isTeam = isTeam;
  }


  public IdmRole label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public IdmRole lastUpdated(Integer lastUpdated) {
    
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLastUpdated() {
    return lastUpdated;
  }


  public void setLastUpdated(Integer lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public IdmRole policies(List<ServiceResourcePolicy> policies) {
    
    this.policies = policies;
    return this;
  }

  public IdmRole addPoliciesItem(ServiceResourcePolicy policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ServiceResourcePolicy> getPolicies() {
    return policies;
  }


  public void setPolicies(List<ServiceResourcePolicy> policies) {
    this.policies = policies;
  }


  public IdmRole policiesContextEditable(Boolean policiesContextEditable) {
    
    this.policiesContextEditable = policiesContextEditable;
    return this;
  }

   /**
   * Get policiesContextEditable
   * @return policiesContextEditable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPoliciesContextEditable() {
    return policiesContextEditable;
  }


  public void setPoliciesContextEditable(Boolean policiesContextEditable) {
    this.policiesContextEditable = policiesContextEditable;
  }


  public IdmRole userRole(Boolean userRole) {
    
    this.userRole = userRole;
    return this;
  }

   /**
   * Get userRole
   * @return userRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUserRole() {
    return userRole;
  }


  public void setUserRole(Boolean userRole) {
    this.userRole = userRole;
  }


  public IdmRole uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdmRole idmRole = (IdmRole) o;
    return Objects.equals(this.autoApplies, idmRole.autoApplies) &&
        Objects.equals(this.forceOverride, idmRole.forceOverride) &&
        Objects.equals(this.groupRole, idmRole.groupRole) &&
        Objects.equals(this.isTeam, idmRole.isTeam) &&
        Objects.equals(this.label, idmRole.label) &&
        Objects.equals(this.lastUpdated, idmRole.lastUpdated) &&
        Objects.equals(this.policies, idmRole.policies) &&
        Objects.equals(this.policiesContextEditable, idmRole.policiesContextEditable) &&
        Objects.equals(this.userRole, idmRole.userRole) &&
        Objects.equals(this.uuid, idmRole.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoApplies, forceOverride, groupRole, isTeam, label, lastUpdated, policies, policiesContextEditable, userRole, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdmRole {\n");
    sb.append("    autoApplies: ").append(toIndentedString(autoApplies)).append("\n");
    sb.append("    forceOverride: ").append(toIndentedString(forceOverride)).append("\n");
    sb.append("    groupRole: ").append(toIndentedString(groupRole)).append("\n");
    sb.append("    isTeam: ").append(toIndentedString(isTeam)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    policiesContextEditable: ").append(toIndentedString(policiesContextEditable)).append("\n");
    sb.append("    userRole: ").append(toIndentedString(userRole)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutoApplies");
    openapiFields.add("ForceOverride");
    openapiFields.add("GroupRole");
    openapiFields.add("IsTeam");
    openapiFields.add("Label");
    openapiFields.add("LastUpdated");
    openapiFields.add("Policies");
    openapiFields.add("PoliciesContextEditable");
    openapiFields.add("UserRole");
    openapiFields.add("Uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IdmRole
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IdmRole.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdmRole is not found in the empty JSON string", IdmRole.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IdmRole.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdmRole` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AutoApplies") != null && !jsonObj.get("AutoApplies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AutoApplies` to be an array in the JSON string but got `%s`", jsonObj.get("AutoApplies").toString()));
      }
      if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
      }
      if (jsonObj.get("Policies") != null && !jsonObj.get("Policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("Policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Policies` to be an array in the JSON string but got `%s`", jsonObj.get("Policies").toString()));
          }

          // validate the optional field `Policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            ServiceResourcePolicy.validateJsonObject(jsonArraypolicies.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("Uuid") != null && !jsonObj.get("Uuid").isJsonNull()) && !jsonObj.get("Uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdmRole.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdmRole' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdmRole> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdmRole.class));

       return (TypeAdapter<T>) new TypeAdapter<IdmRole>() {
           @Override
           public void write(JsonWriter out, IdmRole value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdmRole read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IdmRole given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IdmRole
  * @throws IOException if the JSON string is invalid with respect to IdmRole
  */
  public static IdmRole fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdmRole.class);
  }

 /**
  * Convert an instance of IdmRole to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

