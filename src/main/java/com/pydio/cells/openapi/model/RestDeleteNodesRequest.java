/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.model.TreeNode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * RestDeleteNodesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-09T15:35:02.533763+02:00[Europe/Berlin]")
public class RestDeleteNodesRequest {
  public static final String SERIALIZED_NAME_NODES = "Nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  private List<TreeNode> nodes = null;

  public static final String SERIALIZED_NAME_RECURSIVE = "Recursive";
  @SerializedName(SERIALIZED_NAME_RECURSIVE)
  private Boolean recursive;

  public static final String SERIALIZED_NAME_REMOVE_PERMANENTLY = "RemovePermanently";
  @SerializedName(SERIALIZED_NAME_REMOVE_PERMANENTLY)
  private Boolean removePermanently;

  public RestDeleteNodesRequest() { 
  }

  public RestDeleteNodesRequest nodes(List<TreeNode> nodes) {
    
    this.nodes = nodes;
    return this;
  }

  public RestDeleteNodesRequest addNodesItem(TreeNode nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<TreeNode>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

   /**
   * Get nodes
   * @return nodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TreeNode> getNodes() {
    return nodes;
  }


  public void setNodes(List<TreeNode> nodes) {
    this.nodes = nodes;
  }


  public RestDeleteNodesRequest recursive(Boolean recursive) {
    
    this.recursive = recursive;
    return this;
  }

   /**
   * Get recursive
   * @return recursive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRecursive() {
    return recursive;
  }


  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }


  public RestDeleteNodesRequest removePermanently(Boolean removePermanently) {
    
    this.removePermanently = removePermanently;
    return this;
  }

   /**
   * Get removePermanently
   * @return removePermanently
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRemovePermanently() {
    return removePermanently;
  }


  public void setRemovePermanently(Boolean removePermanently) {
    this.removePermanently = removePermanently;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestDeleteNodesRequest restDeleteNodesRequest = (RestDeleteNodesRequest) o;
    return Objects.equals(this.nodes, restDeleteNodesRequest.nodes) &&
        Objects.equals(this.recursive, restDeleteNodesRequest.recursive) &&
        Objects.equals(this.removePermanently, restDeleteNodesRequest.removePermanently);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, recursive, removePermanently);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestDeleteNodesRequest {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    removePermanently: ").append(toIndentedString(removePermanently)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

