/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RestCell
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class RestCell {
    public static final String SERIALIZED_NAME_AC_LS = "ACLs";
    @SerializedName(SERIALIZED_NAME_AC_LS)
    @javax.annotation.Nullable
    private Map<String, RestCellAcl> acLs = new HashMap<>();

    public static final String SERIALIZED_NAME_ACCESS_END = "AccessEnd";
    @SerializedName(SERIALIZED_NAME_ACCESS_END)
    @javax.annotation.Nullable
    private String accessEnd;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_LABEL = "Label";
    @SerializedName(SERIALIZED_NAME_LABEL)
    @javax.annotation.Nullable
    private String label;

    public static final String SERIALIZED_NAME_POLICIES = "Policies";
    @SerializedName(SERIALIZED_NAME_POLICIES)
    @javax.annotation.Nullable
    private List<ServiceResourcePolicy> policies = new ArrayList<>();

    public static final String SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE = "PoliciesContextEditable";
    @SerializedName(SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE)
    @javax.annotation.Nullable
    private Boolean policiesContextEditable;

    public static final String SERIALIZED_NAME_ROOT_NODES = "RootNodes";
    @SerializedName(SERIALIZED_NAME_ROOT_NODES)
    @javax.annotation.Nullable
    private List<TreeNode> rootNodes = new ArrayList<>();

    public static final String SERIALIZED_NAME_UUID = "Uuid";
    @SerializedName(SERIALIZED_NAME_UUID)
    @javax.annotation.Nullable
    private String uuid;

    public RestCell() {
    }

    public RestCell acLs(@javax.annotation.Nullable Map<String, RestCellAcl> acLs) {
        this.acLs = acLs;
        return this;
    }

    public RestCell putAcLsItem(String key, RestCellAcl acLsItem) {
        if (this.acLs == null) {
            this.acLs = new HashMap<>();
        }
        this.acLs.put(key, acLsItem);
        return this;
    }

    /**
     * Get acLs
     *
     * @return acLs
     */
    @javax.annotation.Nullable
    public Map<String, RestCellAcl> getAcLs() {
        return acLs;
    }

    public void setAcLs(@javax.annotation.Nullable Map<String, RestCellAcl> acLs) {
        this.acLs = acLs;
    }


    public RestCell accessEnd(@javax.annotation.Nullable String accessEnd) {
        this.accessEnd = accessEnd;
        return this;
    }

    /**
     * Get accessEnd
     *
     * @return accessEnd
     */
    @javax.annotation.Nullable
    public String getAccessEnd() {
        return accessEnd;
    }

    public void setAccessEnd(@javax.annotation.Nullable String accessEnd) {
        this.accessEnd = accessEnd;
    }


    public RestCell description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }


    public RestCell label(@javax.annotation.Nullable String label) {
        this.label = label;
        return this;
    }

    /**
     * Get label
     *
     * @return label
     */
    @javax.annotation.Nullable
    public String getLabel() {
        return label;
    }

    public void setLabel(@javax.annotation.Nullable String label) {
        this.label = label;
    }


    public RestCell policies(@javax.annotation.Nullable List<ServiceResourcePolicy> policies) {
        this.policies = policies;
        return this;
    }

    public RestCell addPoliciesItem(ServiceResourcePolicy policiesItem) {
        if (this.policies == null) {
            this.policies = new ArrayList<>();
        }
        this.policies.add(policiesItem);
        return this;
    }

    /**
     * Get policies
     *
     * @return policies
     */
    @javax.annotation.Nullable
    public List<ServiceResourcePolicy> getPolicies() {
        return policies;
    }

    public void setPolicies(@javax.annotation.Nullable List<ServiceResourcePolicy> policies) {
        this.policies = policies;
    }


    public RestCell policiesContextEditable(@javax.annotation.Nullable Boolean policiesContextEditable) {
        this.policiesContextEditable = policiesContextEditable;
        return this;
    }

    /**
     * Get policiesContextEditable
     *
     * @return policiesContextEditable
     */
    @javax.annotation.Nullable
    public Boolean getPoliciesContextEditable() {
        return policiesContextEditable;
    }

    public void setPoliciesContextEditable(@javax.annotation.Nullable Boolean policiesContextEditable) {
        this.policiesContextEditable = policiesContextEditable;
    }


    public RestCell rootNodes(@javax.annotation.Nullable List<TreeNode> rootNodes) {
        this.rootNodes = rootNodes;
        return this;
    }

    public RestCell addRootNodesItem(TreeNode rootNodesItem) {
        if (this.rootNodes == null) {
            this.rootNodes = new ArrayList<>();
        }
        this.rootNodes.add(rootNodesItem);
        return this;
    }

    /**
     * Get rootNodes
     *
     * @return rootNodes
     */
    @javax.annotation.Nullable
    public List<TreeNode> getRootNodes() {
        return rootNodes;
    }

    public void setRootNodes(@javax.annotation.Nullable List<TreeNode> rootNodes) {
        this.rootNodes = rootNodes;
    }


    public RestCell uuid(@javax.annotation.Nullable String uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Get uuid
     *
     * @return uuid
     */
    @javax.annotation.Nullable
    public String getUuid() {
        return uuid;
    }

    public void setUuid(@javax.annotation.Nullable String uuid) {
        this.uuid = uuid;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RestCell restCell = (RestCell) o;
        return Objects.equals(this.acLs, restCell.acLs) &&
                Objects.equals(this.accessEnd, restCell.accessEnd) &&
                Objects.equals(this.description, restCell.description) &&
                Objects.equals(this.label, restCell.label) &&
                Objects.equals(this.policies, restCell.policies) &&
                Objects.equals(this.policiesContextEditable, restCell.policiesContextEditable) &&
                Objects.equals(this.rootNodes, restCell.rootNodes) &&
                Objects.equals(this.uuid, restCell.uuid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(acLs, accessEnd, description, label, policies, policiesContextEditable, rootNodes, uuid);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RestCell {\n");
        sb.append("    acLs: ").append(toIndentedString(acLs)).append("\n");
        sb.append("    accessEnd: ").append(toIndentedString(accessEnd)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
        sb.append("    policiesContextEditable: ").append(toIndentedString(policiesContextEditable)).append("\n");
        sb.append("    rootNodes: ").append(toIndentedString(rootNodes)).append("\n");
        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("ACLs");
        openapiFields.add("AccessEnd");
        openapiFields.add("Description");
        openapiFields.add("Label");
        openapiFields.add("Policies");
        openapiFields.add("PoliciesContextEditable");
        openapiFields.add("RootNodes");
        openapiFields.add("Uuid");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RestCell
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RestCell.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in RestCell is not found in the empty JSON string", RestCell.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RestCell.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestCell` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("AccessEnd") != null && !jsonObj.get("AccessEnd").isJsonNull()) && !jsonObj.get("AccessEnd").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `AccessEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessEnd").toString()));
        }
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
        }
        if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
        }
        if (jsonObj.get("Policies") != null && !jsonObj.get("Policies").isJsonNull()) {
            JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("Policies");
            if (jsonArraypolicies != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Policies").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `Policies` to be an array in the JSON string but got `%s`", jsonObj.get("Policies").toString()));
                }

                // validate the optional field `Policies` (array)
                for (int i = 0; i < jsonArraypolicies.size(); i++) {
                    ServiceResourcePolicy.validateJsonElement(jsonArraypolicies.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("RootNodes") != null && !jsonObj.get("RootNodes").isJsonNull()) {
            JsonArray jsonArrayrootNodes = jsonObj.getAsJsonArray("RootNodes");
            if (jsonArrayrootNodes != null) {
                // ensure the json data is an array
                if (!jsonObj.get("RootNodes").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `RootNodes` to be an array in the JSON string but got `%s`", jsonObj.get("RootNodes").toString()));
                }

                // validate the optional field `RootNodes` (array)
                for (int i = 0; i < jsonArrayrootNodes.size(); i++) {
                    TreeNode.validateJsonElement(jsonArrayrootNodes.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("Uuid") != null && !jsonObj.get("Uuid").isJsonNull()) && !jsonObj.get("Uuid").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Uuid").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RestCell.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RestCell' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RestCell> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(RestCell.class));

            return (TypeAdapter<T>) new TypeAdapter<RestCell>() {
                @Override
                public void write(JsonWriter out, RestCell value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public RestCell read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of RestCell given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RestCell
     * @throws IOException if the JSON string is invalid with respect to RestCell
     */
    public static RestCell fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RestCell.class);
    }

    /**
     * Convert an instance of RestCell to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

