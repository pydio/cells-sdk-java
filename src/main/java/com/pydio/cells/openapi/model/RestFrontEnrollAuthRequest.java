/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RestFrontEnrollAuthRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-16T11:01:01.368056162+01:00[Europe/Berlin]", comments = "Generator version: 7.4.0")
public class RestFrontEnrollAuthRequest {
  public static final String SERIALIZED_NAME_ENROLL_INFO = "EnrollInfo";
  @SerializedName(SERIALIZED_NAME_ENROLL_INFO)
  private Map<String, String> enrollInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_ENROLL_TYPE = "EnrollType";
  @SerializedName(SERIALIZED_NAME_ENROLL_TYPE)
  private String enrollType;

  public RestFrontEnrollAuthRequest() {
  }

  public RestFrontEnrollAuthRequest enrollInfo(Map<String, String> enrollInfo) {
    this.enrollInfo = enrollInfo;
    return this;
  }

  public RestFrontEnrollAuthRequest putEnrollInfoItem(String key, String enrollInfoItem) {
    if (this.enrollInfo == null) {
      this.enrollInfo = new HashMap<>();
    }
    this.enrollInfo.put(key, enrollInfoItem);
    return this;
  }

   /**
   * Get enrollInfo
   * @return enrollInfo
  **/
  @javax.annotation.Nullable
  public Map<String, String> getEnrollInfo() {
    return enrollInfo;
  }

  public void setEnrollInfo(Map<String, String> enrollInfo) {
    this.enrollInfo = enrollInfo;
  }


  public RestFrontEnrollAuthRequest enrollType(String enrollType) {
    this.enrollType = enrollType;
    return this;
  }

   /**
   * Get enrollType
   * @return enrollType
  **/
  @javax.annotation.Nullable
  public String getEnrollType() {
    return enrollType;
  }

  public void setEnrollType(String enrollType) {
    this.enrollType = enrollType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestFrontEnrollAuthRequest restFrontEnrollAuthRequest = (RestFrontEnrollAuthRequest) o;
    return Objects.equals(this.enrollInfo, restFrontEnrollAuthRequest.enrollInfo) &&
        Objects.equals(this.enrollType, restFrontEnrollAuthRequest.enrollType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enrollInfo, enrollType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestFrontEnrollAuthRequest {\n");
    sb.append("    enrollInfo: ").append(toIndentedString(enrollInfo)).append("\n");
    sb.append("    enrollType: ").append(toIndentedString(enrollType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EnrollInfo");
    openapiFields.add("EnrollType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestFrontEnrollAuthRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestFrontEnrollAuthRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestFrontEnrollAuthRequest is not found in the empty JSON string", RestFrontEnrollAuthRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestFrontEnrollAuthRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestFrontEnrollAuthRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EnrollType") != null && !jsonObj.get("EnrollType").isJsonNull()) && !jsonObj.get("EnrollType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnrollType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnrollType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestFrontEnrollAuthRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestFrontEnrollAuthRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestFrontEnrollAuthRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestFrontEnrollAuthRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RestFrontEnrollAuthRequest>() {
           @Override
           public void write(JsonWriter out, RestFrontEnrollAuthRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestFrontEnrollAuthRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestFrontEnrollAuthRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestFrontEnrollAuthRequest
  * @throws IOException if the JSON string is invalid with respect to RestFrontEnrollAuthRequest
  */
  public static RestFrontEnrollAuthRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestFrontEnrollAuthRequest.class);
  }

 /**
  * Convert an instance of RestFrontEnrollAuthRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

