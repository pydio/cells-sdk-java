/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * TreeListNodesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-20T11:40:14.306426+01:00[Europe/Berlin]")
public class TreeListNodesRequest {
  public static final String SERIALIZED_NAME_ANCESTORS = "Ancestors";
  @SerializedName(SERIALIZED_NAME_ANCESTORS)
  private Boolean ancestors;

  public static final String SERIALIZED_NAME_FILTER_TYPE = "FilterType";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
  private TreeNodeType filterType = TreeNodeType.UNKNOWN;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_NODE = "Node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private TreeNode node;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_RECURSIVE = "Recursive";
  @SerializedName(SERIALIZED_NAME_RECURSIVE)
  private Boolean recursive;

  public static final String SERIALIZED_NAME_STAT_FLAGS = "StatFlags";
  @SerializedName(SERIALIZED_NAME_STAT_FLAGS)
  private List<Long> statFlags = null;

  public static final String SERIALIZED_NAME_WITH_COMMITS = "WithCommits";
  @SerializedName(SERIALIZED_NAME_WITH_COMMITS)
  private Boolean withCommits;

  public static final String SERIALIZED_NAME_WITH_VERSIONS = "WithVersions";
  @SerializedName(SERIALIZED_NAME_WITH_VERSIONS)
  private Boolean withVersions;

  public TreeListNodesRequest() {
  }

  public TreeListNodesRequest ancestors(Boolean ancestors) {
    
    this.ancestors = ancestors;
    return this;
  }

   /**
   * Get ancestors
   * @return ancestors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAncestors() {
    return ancestors;
  }


  public void setAncestors(Boolean ancestors) {
    this.ancestors = ancestors;
  }


  public TreeListNodesRequest filterType(TreeNodeType filterType) {
    
    this.filterType = filterType;
    return this;
  }

   /**
   * Get filterType
   * @return filterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeNodeType getFilterType() {
    return filterType;
  }


  public void setFilterType(TreeNodeType filterType) {
    this.filterType = filterType;
  }


  public TreeListNodesRequest limit(String limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLimit() {
    return limit;
  }


  public void setLimit(String limit) {
    this.limit = limit;
  }


  public TreeListNodesRequest node(TreeNode node) {
    
    this.node = node;
    return this;
  }

   /**
   * Get node
   * @return node
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeNode getNode() {
    return node;
  }


  public void setNode(TreeNode node) {
    this.node = node;
  }


  public TreeListNodesRequest offset(String offset) {
    
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOffset() {
    return offset;
  }


  public void setOffset(String offset) {
    this.offset = offset;
  }


  public TreeListNodesRequest recursive(Boolean recursive) {
    
    this.recursive = recursive;
    return this;
  }

   /**
   * Get recursive
   * @return recursive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRecursive() {
    return recursive;
  }


  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }


  public TreeListNodesRequest statFlags(List<Long> statFlags) {
    
    this.statFlags = statFlags;
    return this;
  }

  public TreeListNodesRequest addStatFlagsItem(Long statFlagsItem) {
    if (this.statFlags == null) {
      this.statFlags = new ArrayList<>();
    }
    this.statFlags.add(statFlagsItem);
    return this;
  }

   /**
   * Get statFlags
   * @return statFlags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Long> getStatFlags() {
    return statFlags;
  }


  public void setStatFlags(List<Long> statFlags) {
    this.statFlags = statFlags;
  }


  public TreeListNodesRequest withCommits(Boolean withCommits) {
    
    this.withCommits = withCommits;
    return this;
  }

   /**
   * Get withCommits
   * @return withCommits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getWithCommits() {
    return withCommits;
  }


  public void setWithCommits(Boolean withCommits) {
    this.withCommits = withCommits;
  }


  public TreeListNodesRequest withVersions(Boolean withVersions) {
    
    this.withVersions = withVersions;
    return this;
  }

   /**
   * Get withVersions
   * @return withVersions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getWithVersions() {
    return withVersions;
  }


  public void setWithVersions(Boolean withVersions) {
    this.withVersions = withVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreeListNodesRequest treeListNodesRequest = (TreeListNodesRequest) o;
    return Objects.equals(this.ancestors, treeListNodesRequest.ancestors) &&
        Objects.equals(this.filterType, treeListNodesRequest.filterType) &&
        Objects.equals(this.limit, treeListNodesRequest.limit) &&
        Objects.equals(this.node, treeListNodesRequest.node) &&
        Objects.equals(this.offset, treeListNodesRequest.offset) &&
        Objects.equals(this.recursive, treeListNodesRequest.recursive) &&
        Objects.equals(this.statFlags, treeListNodesRequest.statFlags) &&
        Objects.equals(this.withCommits, treeListNodesRequest.withCommits) &&
        Objects.equals(this.withVersions, treeListNodesRequest.withVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ancestors, filterType, limit, node, offset, recursive, statFlags, withCommits, withVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreeListNodesRequest {\n");
    sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    statFlags: ").append(toIndentedString(statFlags)).append("\n");
    sb.append("    withCommits: ").append(toIndentedString(withCommits)).append("\n");
    sb.append("    withVersions: ").append(toIndentedString(withVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Ancestors");
    openapiFields.add("FilterType");
    openapiFields.add("Limit");
    openapiFields.add("Node");
    openapiFields.add("Offset");
    openapiFields.add("Recursive");
    openapiFields.add("StatFlags");
    openapiFields.add("WithCommits");
    openapiFields.add("WithVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TreeListNodesRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TreeListNodesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TreeListNodesRequest is not found in the empty JSON string", TreeListNodesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TreeListNodesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TreeListNodesRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) && !jsonObj.get("Limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Limit").toString()));
      }
      // validate the optional field `Node`
      if (jsonObj.get("Node") != null && !jsonObj.get("Node").isJsonNull()) {
        TreeNode.validateJsonObject(jsonObj.getAsJsonObject("Node"));
      }
      if ((jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) && !jsonObj.get("Offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Offset").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("StatFlags") != null && !jsonObj.get("StatFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatFlags` to be an array in the JSON string but got `%s`", jsonObj.get("StatFlags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TreeListNodesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TreeListNodesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TreeListNodesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TreeListNodesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TreeListNodesRequest>() {
           @Override
           public void write(JsonWriter out, TreeListNodesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TreeListNodesRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TreeListNodesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TreeListNodesRequest
  * @throws IOException if the JSON string is invalid with respect to TreeListNodesRequest
  */
  public static TreeListNodesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TreeListNodesRequest.class);
  }

 /**
  * Convert an instance of TreeListNodesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

