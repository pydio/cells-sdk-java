/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TreeListNodesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class TreeListNodesRequest {
    public static final String SERIALIZED_NAME_ANCESTORS = "Ancestors";
    @SerializedName(SERIALIZED_NAME_ANCESTORS)
    @javax.annotation.Nullable
    private Boolean ancestors;

    public static final String SERIALIZED_NAME_FILTER_TYPE = "FilterType";
    @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
    @javax.annotation.Nullable
    private TreeNodeType filterType = TreeNodeType.UNKNOWN;

    public static final String SERIALIZED_NAME_LIMIT = "Limit";
    @SerializedName(SERIALIZED_NAME_LIMIT)
    @javax.annotation.Nullable
    private String limit;

    public static final String SERIALIZED_NAME_NODE = "Node";
    @SerializedName(SERIALIZED_NAME_NODE)
    @javax.annotation.Nullable
    private TreeNode node;

    public static final String SERIALIZED_NAME_OFFSET = "Offset";
    @SerializedName(SERIALIZED_NAME_OFFSET)
    @javax.annotation.Nullable
    private String offset;

    public static final String SERIALIZED_NAME_RECURSIVE = "Recursive";
    @SerializedName(SERIALIZED_NAME_RECURSIVE)
    @javax.annotation.Nullable
    private Boolean recursive;

    public static final String SERIALIZED_NAME_SORT_DIR_DESC = "SortDirDesc";
    @SerializedName(SERIALIZED_NAME_SORT_DIR_DESC)
    @javax.annotation.Nullable
    private Boolean sortDirDesc;

    public static final String SERIALIZED_NAME_SORT_FIELD = "SortField";
    @SerializedName(SERIALIZED_NAME_SORT_FIELD)
    @javax.annotation.Nullable
    private String sortField;

    public static final String SERIALIZED_NAME_STAT_FLAGS = "StatFlags";
    @SerializedName(SERIALIZED_NAME_STAT_FLAGS)
    @javax.annotation.Nullable
    private List<Long> statFlags = new ArrayList<>();

    public static final String SERIALIZED_NAME_WITH_COMMITS = "WithCommits";
    @SerializedName(SERIALIZED_NAME_WITH_COMMITS)
    @javax.annotation.Nullable
    private Boolean withCommits;

    public static final String SERIALIZED_NAME_WITH_VERSIONS = "WithVersions";
    @SerializedName(SERIALIZED_NAME_WITH_VERSIONS)
    @javax.annotation.Nullable
    private Boolean withVersions;

    public TreeListNodesRequest() {
    }

    public TreeListNodesRequest ancestors(@javax.annotation.Nullable Boolean ancestors) {
        this.ancestors = ancestors;
        return this;
    }

    /**
     * Get ancestors
     *
     * @return ancestors
     */
    @javax.annotation.Nullable
    public Boolean getAncestors() {
        return ancestors;
    }

    public void setAncestors(@javax.annotation.Nullable Boolean ancestors) {
        this.ancestors = ancestors;
    }


    public TreeListNodesRequest filterType(@javax.annotation.Nullable TreeNodeType filterType) {
        this.filterType = filterType;
        return this;
    }

    /**
     * Get filterType
     *
     * @return filterType
     */
    @javax.annotation.Nullable
    public TreeNodeType getFilterType() {
        return filterType;
    }

    public void setFilterType(@javax.annotation.Nullable TreeNodeType filterType) {
        this.filterType = filterType;
    }


    public TreeListNodesRequest limit(@javax.annotation.Nullable String limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @javax.annotation.Nullable
    public String getLimit() {
        return limit;
    }

    public void setLimit(@javax.annotation.Nullable String limit) {
        this.limit = limit;
    }


    public TreeListNodesRequest node(@javax.annotation.Nullable TreeNode node) {
        this.node = node;
        return this;
    }

    /**
     * Get node
     *
     * @return node
     */
    @javax.annotation.Nullable
    public TreeNode getNode() {
        return node;
    }

    public void setNode(@javax.annotation.Nullable TreeNode node) {
        this.node = node;
    }


    public TreeListNodesRequest offset(@javax.annotation.Nullable String offset) {
        this.offset = offset;
        return this;
    }

    /**
     * Get offset
     *
     * @return offset
     */
    @javax.annotation.Nullable
    public String getOffset() {
        return offset;
    }

    public void setOffset(@javax.annotation.Nullable String offset) {
        this.offset = offset;
    }


    public TreeListNodesRequest recursive(@javax.annotation.Nullable Boolean recursive) {
        this.recursive = recursive;
        return this;
    }

    /**
     * Get recursive
     *
     * @return recursive
     */
    @javax.annotation.Nullable
    public Boolean getRecursive() {
        return recursive;
    }

    public void setRecursive(@javax.annotation.Nullable Boolean recursive) {
        this.recursive = recursive;
    }


    public TreeListNodesRequest sortDirDesc(@javax.annotation.Nullable Boolean sortDirDesc) {
        this.sortDirDesc = sortDirDesc;
        return this;
    }

    /**
     * Get sortDirDesc
     *
     * @return sortDirDesc
     */
    @javax.annotation.Nullable
    public Boolean getSortDirDesc() {
        return sortDirDesc;
    }

    public void setSortDirDesc(@javax.annotation.Nullable Boolean sortDirDesc) {
        this.sortDirDesc = sortDirDesc;
    }


    public TreeListNodesRequest sortField(@javax.annotation.Nullable String sortField) {
        this.sortField = sortField;
        return this;
    }

    /**
     * Get sortField
     *
     * @return sortField
     */
    @javax.annotation.Nullable
    public String getSortField() {
        return sortField;
    }

    public void setSortField(@javax.annotation.Nullable String sortField) {
        this.sortField = sortField;
    }


    public TreeListNodesRequest statFlags(@javax.annotation.Nullable List<Long> statFlags) {
        this.statFlags = statFlags;
        return this;
    }

    public TreeListNodesRequest addStatFlagsItem(Long statFlagsItem) {
        if (this.statFlags == null) {
            this.statFlags = new ArrayList<>();
        }
        this.statFlags.add(statFlagsItem);
        return this;
    }

    /**
     * Get statFlags
     *
     * @return statFlags
     */
    @javax.annotation.Nullable
    public List<Long> getStatFlags() {
        return statFlags;
    }

    public void setStatFlags(@javax.annotation.Nullable List<Long> statFlags) {
        this.statFlags = statFlags;
    }


    public TreeListNodesRequest withCommits(@javax.annotation.Nullable Boolean withCommits) {
        this.withCommits = withCommits;
        return this;
    }

    /**
     * Get withCommits
     *
     * @return withCommits
     */
    @javax.annotation.Nullable
    public Boolean getWithCommits() {
        return withCommits;
    }

    public void setWithCommits(@javax.annotation.Nullable Boolean withCommits) {
        this.withCommits = withCommits;
    }


    public TreeListNodesRequest withVersions(@javax.annotation.Nullable Boolean withVersions) {
        this.withVersions = withVersions;
        return this;
    }

    /**
     * Get withVersions
     *
     * @return withVersions
     */
    @javax.annotation.Nullable
    public Boolean getWithVersions() {
        return withVersions;
    }

    public void setWithVersions(@javax.annotation.Nullable Boolean withVersions) {
        this.withVersions = withVersions;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TreeListNodesRequest treeListNodesRequest = (TreeListNodesRequest) o;
        return Objects.equals(this.ancestors, treeListNodesRequest.ancestors) &&
                Objects.equals(this.filterType, treeListNodesRequest.filterType) &&
                Objects.equals(this.limit, treeListNodesRequest.limit) &&
                Objects.equals(this.node, treeListNodesRequest.node) &&
                Objects.equals(this.offset, treeListNodesRequest.offset) &&
                Objects.equals(this.recursive, treeListNodesRequest.recursive) &&
                Objects.equals(this.sortDirDesc, treeListNodesRequest.sortDirDesc) &&
                Objects.equals(this.sortField, treeListNodesRequest.sortField) &&
                Objects.equals(this.statFlags, treeListNodesRequest.statFlags) &&
                Objects.equals(this.withCommits, treeListNodesRequest.withCommits) &&
                Objects.equals(this.withVersions, treeListNodesRequest.withVersions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(ancestors, filterType, limit, node, offset, recursive, sortDirDesc, sortField, statFlags, withCommits, withVersions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TreeListNodesRequest {\n");
        sb.append("    ancestors: ").append(toIndentedString(ancestors)).append("\n");
        sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
        sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("    node: ").append(toIndentedString(node)).append("\n");
        sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
        sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
        sb.append("    sortDirDesc: ").append(toIndentedString(sortDirDesc)).append("\n");
        sb.append("    sortField: ").append(toIndentedString(sortField)).append("\n");
        sb.append("    statFlags: ").append(toIndentedString(statFlags)).append("\n");
        sb.append("    withCommits: ").append(toIndentedString(withCommits)).append("\n");
        sb.append("    withVersions: ").append(toIndentedString(withVersions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Ancestors");
        openapiFields.add("FilterType");
        openapiFields.add("Limit");
        openapiFields.add("Node");
        openapiFields.add("Offset");
        openapiFields.add("Recursive");
        openapiFields.add("SortDirDesc");
        openapiFields.add("SortField");
        openapiFields.add("StatFlags");
        openapiFields.add("WithCommits");
        openapiFields.add("WithVersions");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TreeListNodesRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TreeListNodesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in TreeListNodesRequest is not found in the empty JSON string", TreeListNodesRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TreeListNodesRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TreeListNodesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `FilterType`
        if (jsonObj.get("FilterType") != null && !jsonObj.get("FilterType").isJsonNull()) {
            TreeNodeType.validateJsonElement(jsonObj.get("FilterType"));
        }
        if ((jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) && !jsonObj.get("Limit").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Limit").toString()));
        }
        // validate the optional field `Node`
        if (jsonObj.get("Node") != null && !jsonObj.get("Node").isJsonNull()) {
            TreeNode.validateJsonElement(jsonObj.get("Node"));
        }
        if ((jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) && !jsonObj.get("Offset").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Offset").toString()));
        }
        if ((jsonObj.get("SortField") != null && !jsonObj.get("SortField").isJsonNull()) && !jsonObj.get("SortField").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `SortField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SortField").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("StatFlags") != null && !jsonObj.get("StatFlags").isJsonNull() && !jsonObj.get("StatFlags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `StatFlags` to be an array in the JSON string but got `%s`", jsonObj.get("StatFlags").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TreeListNodesRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TreeListNodesRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TreeListNodesRequest> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(TreeListNodesRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<TreeListNodesRequest>() {
                @Override
                public void write(JsonWriter out, TreeListNodesRequest value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public TreeListNodesRequest read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of TreeListNodesRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TreeListNodesRequest
     * @throws IOException if the JSON string is invalid with respect to TreeListNodesRequest
     */
    public static TreeListNodesRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TreeListNodesRequest.class);
    }

    /**
     * Convert an instance of TreeListNodesRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

