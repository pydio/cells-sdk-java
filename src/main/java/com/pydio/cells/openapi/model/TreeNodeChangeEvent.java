/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.model.TreeNode;
import com.pydio.cells.openapi.model.TreeNodeChangeEventEventType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TreeNodeChangeEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-09T15:35:02.533763+02:00[Europe/Berlin]")
public class TreeNodeChangeEvent {
  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = null;

  public static final String SERIALIZED_NAME_OPTIMISTIC = "Optimistic";
  @SerializedName(SERIALIZED_NAME_OPTIMISTIC)
  private Boolean optimistic;

  public static final String SERIALIZED_NAME_SILENT = "Silent";
  @SerializedName(SERIALIZED_NAME_SILENT)
  private Boolean silent;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private TreeNode source;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private TreeNode target;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TreeNodeChangeEventEventType type = TreeNodeChangeEventEventType.CREATE;

  public TreeNodeChangeEvent() { 
  }

  public TreeNodeChangeEvent metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public TreeNodeChangeEvent putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String, String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public TreeNodeChangeEvent optimistic(Boolean optimistic) {
    
    this.optimistic = optimistic;
    return this;
  }

   /**
   * Get optimistic
   * @return optimistic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getOptimistic() {
    return optimistic;
  }


  public void setOptimistic(Boolean optimistic) {
    this.optimistic = optimistic;
  }


  public TreeNodeChangeEvent silent(Boolean silent) {
    
    this.silent = silent;
    return this;
  }

   /**
   * Get silent
   * @return silent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSilent() {
    return silent;
  }


  public void setSilent(Boolean silent) {
    this.silent = silent;
  }


  public TreeNodeChangeEvent source(TreeNode source) {
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeNode getSource() {
    return source;
  }


  public void setSource(TreeNode source) {
    this.source = source;
  }


  public TreeNodeChangeEvent target(TreeNode target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeNode getTarget() {
    return target;
  }


  public void setTarget(TreeNode target) {
    this.target = target;
  }


  public TreeNodeChangeEvent type(TreeNodeChangeEventEventType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeNodeChangeEventEventType getType() {
    return type;
  }


  public void setType(TreeNodeChangeEventEventType type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreeNodeChangeEvent treeNodeChangeEvent = (TreeNodeChangeEvent) o;
    return Objects.equals(this.metadata, treeNodeChangeEvent.metadata) &&
        Objects.equals(this.optimistic, treeNodeChangeEvent.optimistic) &&
        Objects.equals(this.silent, treeNodeChangeEvent.silent) &&
        Objects.equals(this.source, treeNodeChangeEvent.source) &&
        Objects.equals(this.target, treeNodeChangeEvent.target) &&
        Objects.equals(this.type, treeNodeChangeEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, optimistic, silent, source, target, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreeNodeChangeEvent {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    optimistic: ").append(toIndentedString(optimistic)).append("\n");
    sb.append("    silent: ").append(toIndentedString(silent)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

