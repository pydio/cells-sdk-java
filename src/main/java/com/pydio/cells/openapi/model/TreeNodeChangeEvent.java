/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * TreeNodeChangeEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-16T11:01:01.368056162+01:00[Europe/Berlin]", comments = "Generator version: 7.4.0")
public class TreeNodeChangeEvent {
  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_OPTIMISTIC = "Optimistic";
  @SerializedName(SERIALIZED_NAME_OPTIMISTIC)
  private Boolean optimistic;

  public static final String SERIALIZED_NAME_SILENT = "Silent";
  @SerializedName(SERIALIZED_NAME_SILENT)
  private Boolean silent;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private TreeNode source;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private TreeNode target;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TreeNodeChangeEventEventType type = TreeNodeChangeEventEventType.CREATE;

  public TreeNodeChangeEvent() {
  }

  public TreeNodeChangeEvent metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public TreeNodeChangeEvent putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public TreeNodeChangeEvent optimistic(Boolean optimistic) {
    this.optimistic = optimistic;
    return this;
  }

   /**
   * Get optimistic
   * @return optimistic
  **/
  @javax.annotation.Nullable
  public Boolean getOptimistic() {
    return optimistic;
  }

  public void setOptimistic(Boolean optimistic) {
    this.optimistic = optimistic;
  }


  public TreeNodeChangeEvent silent(Boolean silent) {
    this.silent = silent;
    return this;
  }

   /**
   * Get silent
   * @return silent
  **/
  @javax.annotation.Nullable
  public Boolean getSilent() {
    return silent;
  }

  public void setSilent(Boolean silent) {
    this.silent = silent;
  }


  public TreeNodeChangeEvent source(TreeNode source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  public TreeNode getSource() {
    return source;
  }

  public void setSource(TreeNode source) {
    this.source = source;
  }


  public TreeNodeChangeEvent target(TreeNode target) {
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  public TreeNode getTarget() {
    return target;
  }

  public void setTarget(TreeNode target) {
    this.target = target;
  }


  public TreeNodeChangeEvent type(TreeNodeChangeEventEventType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TreeNodeChangeEventEventType getType() {
    return type;
  }

  public void setType(TreeNodeChangeEventEventType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreeNodeChangeEvent treeNodeChangeEvent = (TreeNodeChangeEvent) o;
    return Objects.equals(this.metadata, treeNodeChangeEvent.metadata) &&
        Objects.equals(this.optimistic, treeNodeChangeEvent.optimistic) &&
        Objects.equals(this.silent, treeNodeChangeEvent.silent) &&
        Objects.equals(this.source, treeNodeChangeEvent.source) &&
        Objects.equals(this.target, treeNodeChangeEvent.target) &&
        Objects.equals(this.type, treeNodeChangeEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, optimistic, silent, source, target, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreeNodeChangeEvent {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    optimistic: ").append(toIndentedString(optimistic)).append("\n");
    sb.append("    silent: ").append(toIndentedString(silent)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Metadata");
    openapiFields.add("Optimistic");
    openapiFields.add("Silent");
    openapiFields.add("Source");
    openapiFields.add("Target");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TreeNodeChangeEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TreeNodeChangeEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TreeNodeChangeEvent is not found in the empty JSON string", TreeNodeChangeEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TreeNodeChangeEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TreeNodeChangeEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Source`
      if (jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) {
        TreeNode.validateJsonElement(jsonObj.get("Source"));
      }
      // validate the optional field `Target`
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        TreeNode.validateJsonElement(jsonObj.get("Target"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TreeNodeChangeEventEventType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TreeNodeChangeEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TreeNodeChangeEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TreeNodeChangeEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TreeNodeChangeEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<TreeNodeChangeEvent>() {
           @Override
           public void write(JsonWriter out, TreeNodeChangeEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TreeNodeChangeEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TreeNodeChangeEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TreeNodeChangeEvent
  * @throws IOException if the JSON string is invalid with respect to TreeNodeChangeEvent
  */
  public static TreeNodeChangeEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TreeNodeChangeEvent.class);
  }

 /**
  * Convert an instance of TreeNodeChangeEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

