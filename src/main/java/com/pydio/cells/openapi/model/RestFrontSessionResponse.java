/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.model.AuthToken;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.pydio.cells.openapi.JSON;

/**
 * RestFrontSessionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class RestFrontSessionResponse {
    public static final String SERIALIZED_NAME_ERROR = "Error";
    @SerializedName(SERIALIZED_NAME_ERROR)
    @javax.annotation.Nullable
    private String error;

    public static final String SERIALIZED_NAME_EXPIRE_TIME = "ExpireTime";
    @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
    @javax.annotation.Nullable
    private Integer expireTime;

    public static final String SERIALIZED_NAME_J_W_T = "JWT";
    @SerializedName(SERIALIZED_NAME_J_W_T)
    @javax.annotation.Nullable
    private String JWT;

    public static final String SERIALIZED_NAME_REDIRECT_TO = "RedirectTo";
    @SerializedName(SERIALIZED_NAME_REDIRECT_TO)
    @javax.annotation.Nullable
    private String redirectTo;

    public static final String SERIALIZED_NAME_TOKEN = "Token";
    @SerializedName(SERIALIZED_NAME_TOKEN)
    @javax.annotation.Nullable
    private AuthToken token;

    public static final String SERIALIZED_NAME_TRIGGER = "Trigger";
    @SerializedName(SERIALIZED_NAME_TRIGGER)
    @javax.annotation.Nullable
    private String trigger;

    public static final String SERIALIZED_NAME_TRIGGER_INFO = "TriggerInfo";
    @SerializedName(SERIALIZED_NAME_TRIGGER_INFO)
    @javax.annotation.Nullable
    private Map<String, String> triggerInfo = new HashMap<>();

    public RestFrontSessionResponse() {
    }

    public RestFrontSessionResponse error(@javax.annotation.Nullable String error) {
        this.error = error;
        return this;
    }

    /**
     * Get error
     *
     * @return error
     */
    @javax.annotation.Nullable
    public String getError() {
        return error;
    }

    public void setError(@javax.annotation.Nullable String error) {
        this.error = error;
    }


    public RestFrontSessionResponse expireTime(@javax.annotation.Nullable Integer expireTime) {
        this.expireTime = expireTime;
        return this;
    }

    /**
     * Get expireTime
     *
     * @return expireTime
     */
    @javax.annotation.Nullable
    public Integer getExpireTime() {
        return expireTime;
    }

    public void setExpireTime(@javax.annotation.Nullable Integer expireTime) {
        this.expireTime = expireTime;
    }


    public RestFrontSessionResponse JWT(@javax.annotation.Nullable String JWT) {
        this.JWT = JWT;
        return this;
    }

    /**
     * Get JWT
     *
     * @return JWT
     */
    @javax.annotation.Nullable
    public String getJWT() {
        return JWT;
    }

    public void setJWT(@javax.annotation.Nullable String JWT) {
        this.JWT = JWT;
    }


    public RestFrontSessionResponse redirectTo(@javax.annotation.Nullable String redirectTo) {
        this.redirectTo = redirectTo;
        return this;
    }

    /**
     * Get redirectTo
     *
     * @return redirectTo
     */
    @javax.annotation.Nullable
    public String getRedirectTo() {
        return redirectTo;
    }

    public void setRedirectTo(@javax.annotation.Nullable String redirectTo) {
        this.redirectTo = redirectTo;
    }


    public RestFrontSessionResponse token(@javax.annotation.Nullable AuthToken token) {
        this.token = token;
        return this;
    }

    /**
     * Get token
     *
     * @return token
     */
    @javax.annotation.Nullable
    public AuthToken getToken() {
        return token;
    }

    public void setToken(@javax.annotation.Nullable AuthToken token) {
        this.token = token;
    }


    public RestFrontSessionResponse trigger(@javax.annotation.Nullable String trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * Get trigger
     *
     * @return trigger
     */
    @javax.annotation.Nullable
    public String getTrigger() {
        return trigger;
    }

    public void setTrigger(@javax.annotation.Nullable String trigger) {
        this.trigger = trigger;
    }


    public RestFrontSessionResponse triggerInfo(@javax.annotation.Nullable Map<String, String> triggerInfo) {
        this.triggerInfo = triggerInfo;
        return this;
    }

    public RestFrontSessionResponse putTriggerInfoItem(String key, String triggerInfoItem) {
        if (this.triggerInfo == null) {
            this.triggerInfo = new HashMap<>();
        }
        this.triggerInfo.put(key, triggerInfoItem);
        return this;
    }

    /**
     * Get triggerInfo
     *
     * @return triggerInfo
     */
    @javax.annotation.Nullable
    public Map<String, String> getTriggerInfo() {
        return triggerInfo;
    }

    public void setTriggerInfo(@javax.annotation.Nullable Map<String, String> triggerInfo) {
        this.triggerInfo = triggerInfo;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RestFrontSessionResponse restFrontSessionResponse = (RestFrontSessionResponse) o;
        return Objects.equals(this.error, restFrontSessionResponse.error) &&
                Objects.equals(this.expireTime, restFrontSessionResponse.expireTime) &&
                Objects.equals(this.JWT, restFrontSessionResponse.JWT) &&
                Objects.equals(this.redirectTo, restFrontSessionResponse.redirectTo) &&
                Objects.equals(this.token, restFrontSessionResponse.token) &&
                Objects.equals(this.trigger, restFrontSessionResponse.trigger) &&
                Objects.equals(this.triggerInfo, restFrontSessionResponse.triggerInfo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(error, expireTime, JWT, redirectTo, token, trigger, triggerInfo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RestFrontSessionResponse {\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
        sb.append("    JWT: ").append(toIndentedString(JWT)).append("\n");
        sb.append("    redirectTo: ").append(toIndentedString(redirectTo)).append("\n");
        sb.append("    token: ").append(toIndentedString(token)).append("\n");
        sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
        sb.append("    triggerInfo: ").append(toIndentedString(triggerInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Error");
        openapiFields.add("ExpireTime");
        openapiFields.add("JWT");
        openapiFields.add("RedirectTo");
        openapiFields.add("Token");
        openapiFields.add("Trigger");
        openapiFields.add("TriggerInfo");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RestFrontSessionResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RestFrontSessionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in RestFrontSessionResponse is not found in the empty JSON string", RestFrontSessionResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RestFrontSessionResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestFrontSessionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("Error") != null && !jsonObj.get("Error").isJsonNull()) && !jsonObj.get("Error").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Error").toString()));
        }
        if ((jsonObj.get("JWT") != null && !jsonObj.get("JWT").isJsonNull()) && !jsonObj.get("JWT").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `JWT` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JWT").toString()));
        }
        if ((jsonObj.get("RedirectTo") != null && !jsonObj.get("RedirectTo").isJsonNull()) && !jsonObj.get("RedirectTo").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `RedirectTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RedirectTo").toString()));
        }
        // validate the optional field `Token`
        if (jsonObj.get("Token") != null && !jsonObj.get("Token").isJsonNull()) {
            AuthToken.validateJsonElement(jsonObj.get("Token"));
        }
        if ((jsonObj.get("Trigger") != null && !jsonObj.get("Trigger").isJsonNull()) && !jsonObj.get("Trigger").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Trigger").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RestFrontSessionResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RestFrontSessionResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RestFrontSessionResponse> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(RestFrontSessionResponse.class));

            return (TypeAdapter<T>) new TypeAdapter<RestFrontSessionResponse>() {
                @Override
                public void write(JsonWriter out, RestFrontSessionResponse value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public RestFrontSessionResponse read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of RestFrontSessionResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RestFrontSessionResponse
     * @throws IOException if the JSON string is invalid with respect to RestFrontSessionResponse
     */
    public static RestFrontSessionResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RestFrontSessionResponse.class);
    }

    /**
     * Convert an instance of RestFrontSessionResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

