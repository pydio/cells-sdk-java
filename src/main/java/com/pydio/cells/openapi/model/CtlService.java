/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * CtlService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class CtlService {
    public static final String SERIALIZED_NAME_CONTROLLABLE = "Controllable";
    @SerializedName(SERIALIZED_NAME_CONTROLLABLE)
    @javax.annotation.Nullable
    private Boolean controllable;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_METADATA = "Metadata";
    @SerializedName(SERIALIZED_NAME_METADATA)
    @javax.annotation.Nullable
    private Map<String, String> metadata = new HashMap<>();

    public static final String SERIALIZED_NAME_NAME = "Name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_RUNNING_PEERS = "RunningPeers";
    @SerializedName(SERIALIZED_NAME_RUNNING_PEERS)
    @javax.annotation.Nullable
    private List<CtlPeer> runningPeers = new ArrayList<>();

    public static final String SERIALIZED_NAME_STATUS = "Status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    @javax.annotation.Nullable
    private CtlServiceStatus status = CtlServiceStatus.ANY;

    public static final String SERIALIZED_NAME_TAG = "Tag";
    @SerializedName(SERIALIZED_NAME_TAG)
    @javax.annotation.Nullable
    private String tag;

    public static final String SERIALIZED_NAME_VERSION = "Version";
    @SerializedName(SERIALIZED_NAME_VERSION)
    @javax.annotation.Nullable
    private String version;

    public CtlService() {
    }

    public CtlService controllable(@javax.annotation.Nullable Boolean controllable) {
        this.controllable = controllable;
        return this;
    }

    /**
     * Get controllable
     *
     * @return controllable
     */
    @javax.annotation.Nullable
    public Boolean getControllable() {
        return controllable;
    }

    public void setControllable(@javax.annotation.Nullable Boolean controllable) {
        this.controllable = controllable;
    }


    public CtlService description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }


    public CtlService metadata(@javax.annotation.Nullable Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public CtlService putMetadataItem(String key, String metadataItem) {
        if (this.metadata == null) {
            this.metadata = new HashMap<>();
        }
        this.metadata.put(key, metadataItem);
        return this;
    }

    /**
     * Get metadata
     *
     * @return metadata
     */
    @javax.annotation.Nullable
    public Map<String, String> getMetadata() {
        return metadata;
    }

    public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
        this.metadata = metadata;
    }


    public CtlService name(@javax.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nullable String name) {
        this.name = name;
    }


    public CtlService runningPeers(@javax.annotation.Nullable List<CtlPeer> runningPeers) {
        this.runningPeers = runningPeers;
        return this;
    }

    public CtlService addRunningPeersItem(CtlPeer runningPeersItem) {
        if (this.runningPeers == null) {
            this.runningPeers = new ArrayList<>();
        }
        this.runningPeers.add(runningPeersItem);
        return this;
    }

    /**
     * Get runningPeers
     *
     * @return runningPeers
     */
    @javax.annotation.Nullable
    public List<CtlPeer> getRunningPeers() {
        return runningPeers;
    }

    public void setRunningPeers(@javax.annotation.Nullable List<CtlPeer> runningPeers) {
        this.runningPeers = runningPeers;
    }


    public CtlService status(@javax.annotation.Nullable CtlServiceStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @javax.annotation.Nullable
    public CtlServiceStatus getStatus() {
        return status;
    }

    public void setStatus(@javax.annotation.Nullable CtlServiceStatus status) {
        this.status = status;
    }


    public CtlService tag(@javax.annotation.Nullable String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Get tag
     *
     * @return tag
     */
    @javax.annotation.Nullable
    public String getTag() {
        return tag;
    }

    public void setTag(@javax.annotation.Nullable String tag) {
        this.tag = tag;
    }


    public CtlService version(@javax.annotation.Nullable String version) {
        this.version = version;
        return this;
    }

    /**
     * Get version
     *
     * @return version
     */
    @javax.annotation.Nullable
    public String getVersion() {
        return version;
    }

    public void setVersion(@javax.annotation.Nullable String version) {
        this.version = version;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CtlService ctlService = (CtlService) o;
        return Objects.equals(this.controllable, ctlService.controllable) &&
                Objects.equals(this.description, ctlService.description) &&
                Objects.equals(this.metadata, ctlService.metadata) &&
                Objects.equals(this.name, ctlService.name) &&
                Objects.equals(this.runningPeers, ctlService.runningPeers) &&
                Objects.equals(this.status, ctlService.status) &&
                Objects.equals(this.tag, ctlService.tag) &&
                Objects.equals(this.version, ctlService.version);
    }

    @Override
    public int hashCode() {
        return Objects.hash(controllable, description, metadata, name, runningPeers, status, tag, version);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CtlService {\n");
        sb.append("    controllable: ").append(toIndentedString(controllable)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    runningPeers: ").append(toIndentedString(runningPeers)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Controllable");
        openapiFields.add("Description");
        openapiFields.add("Metadata");
        openapiFields.add("Name");
        openapiFields.add("RunningPeers");
        openapiFields.add("Status");
        openapiFields.add("Tag");
        openapiFields.add("Version");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CtlService
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CtlService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in CtlService is not found in the empty JSON string", CtlService.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CtlService.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CtlService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
        }
        if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
        }
        if (jsonObj.get("RunningPeers") != null && !jsonObj.get("RunningPeers").isJsonNull()) {
            JsonArray jsonArrayrunningPeers = jsonObj.getAsJsonArray("RunningPeers");
            if (jsonArrayrunningPeers != null) {
                // ensure the json data is an array
                if (!jsonObj.get("RunningPeers").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `RunningPeers` to be an array in the JSON string but got `%s`", jsonObj.get("RunningPeers").toString()));
                }

                // validate the optional field `RunningPeers` (array)
                for (int i = 0; i < jsonArrayrunningPeers.size(); i++) {
                    CtlPeer.validateJsonElement(jsonArrayrunningPeers.get(i));
                }
                ;
            }
        }
        // validate the optional field `Status`
        if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
            CtlServiceStatus.validateJsonElement(jsonObj.get("Status"));
        }
        if ((jsonObj.get("Tag") != null && !jsonObj.get("Tag").isJsonNull()) && !jsonObj.get("Tag").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tag").toString()));
        }
        if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CtlService.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CtlService' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CtlService> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(CtlService.class));

            return (TypeAdapter<T>) new TypeAdapter<CtlService>() {
                @Override
                public void write(JsonWriter out, CtlService value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public CtlService read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of CtlService given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CtlService
     * @throws IOException if the JSON string is invalid with respect to CtlService
     */
    public static CtlService fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CtlService.class);
    }

    /**
     * Convert an instance of CtlService to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

