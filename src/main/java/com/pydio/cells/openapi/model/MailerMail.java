/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * MailerMail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-20T11:40:14.306426+01:00[Europe/Berlin]")
public class MailerMail {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<String> attachments = null;

  public static final String SERIALIZED_NAME_CC = "Cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<MailerUser> cc = null;

  public static final String SERIALIZED_NAME_CONTENT_HTML = "ContentHtml";
  @SerializedName(SERIALIZED_NAME_CONTENT_HTML)
  private String contentHtml;

  public static final String SERIALIZED_NAME_CONTENT_MARKDOWN = "ContentMarkdown";
  @SerializedName(SERIALIZED_NAME_CONTENT_MARKDOWN)
  private String contentMarkdown;

  public static final String SERIALIZED_NAME_CONTENT_PLAIN = "ContentPlain";
  @SerializedName(SERIALIZED_NAME_CONTENT_PLAIN)
  private String contentPlain;

  public static final String SERIALIZED_NAME_DATE_SENT = "DateSent";
  @SerializedName(SERIALIZED_NAME_DATE_SENT)
  private String dateSent;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private MailerUser from;

  public static final String SERIALIZED_NAME_RETRIES = "Retries";
  @SerializedName(SERIALIZED_NAME_RETRIES)
  private Integer retries;

  public static final String SERIALIZED_NAME_SENDER = "Sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private MailerUser sender;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEMPLATE_DATA = "TemplateData";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DATA)
  private Map<String, String> templateData = null;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "TemplateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_THREAD_INDEX = "ThreadIndex";
  @SerializedName(SERIALIZED_NAME_THREAD_INDEX)
  private String threadIndex;

  public static final String SERIALIZED_NAME_THREAD_UUID = "ThreadUuid";
  @SerializedName(SERIALIZED_NAME_THREAD_UUID)
  private String threadUuid;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<MailerUser> to = null;

  public static final String SERIALIZED_NAME_SEND_ERRORS = "sendErrors";
  @SerializedName(SERIALIZED_NAME_SEND_ERRORS)
  private List<String> sendErrors = null;

  public MailerMail() {
  }

  public MailerMail attachments(List<String> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public MailerMail addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<String> attachments) {
    this.attachments = attachments;
  }


  public MailerMail cc(List<MailerUser> cc) {
    
    this.cc = cc;
    return this;
  }

  public MailerMail addCcItem(MailerUser ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

   /**
   * Get cc
   * @return cc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MailerUser> getCc() {
    return cc;
  }


  public void setCc(List<MailerUser> cc) {
    this.cc = cc;
  }


  public MailerMail contentHtml(String contentHtml) {
    
    this.contentHtml = contentHtml;
    return this;
  }

   /**
   * Get contentHtml
   * @return contentHtml
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContentHtml() {
    return contentHtml;
  }


  public void setContentHtml(String contentHtml) {
    this.contentHtml = contentHtml;
  }


  public MailerMail contentMarkdown(String contentMarkdown) {
    
    this.contentMarkdown = contentMarkdown;
    return this;
  }

   /**
   * Get contentMarkdown
   * @return contentMarkdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContentMarkdown() {
    return contentMarkdown;
  }


  public void setContentMarkdown(String contentMarkdown) {
    this.contentMarkdown = contentMarkdown;
  }


  public MailerMail contentPlain(String contentPlain) {
    
    this.contentPlain = contentPlain;
    return this;
  }

   /**
   * Get contentPlain
   * @return contentPlain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContentPlain() {
    return contentPlain;
  }


  public void setContentPlain(String contentPlain) {
    this.contentPlain = contentPlain;
  }


  public MailerMail dateSent(String dateSent) {
    
    this.dateSent = dateSent;
    return this;
  }

   /**
   * Get dateSent
   * @return dateSent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateSent() {
    return dateSent;
  }


  public void setDateSent(String dateSent) {
    this.dateSent = dateSent;
  }


  public MailerMail from(MailerUser from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MailerUser getFrom() {
    return from;
  }


  public void setFrom(MailerUser from) {
    this.from = from;
  }


  public MailerMail retries(Integer retries) {
    
    this.retries = retries;
    return this;
  }

   /**
   * Get retries
   * @return retries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRetries() {
    return retries;
  }


  public void setRetries(Integer retries) {
    this.retries = retries;
  }


  public MailerMail sender(MailerUser sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MailerUser getSender() {
    return sender;
  }


  public void setSender(MailerUser sender) {
    this.sender = sender;
  }


  public MailerMail subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public MailerMail templateData(Map<String, String> templateData) {
    
    this.templateData = templateData;
    return this;
  }

  public MailerMail putTemplateDataItem(String key, String templateDataItem) {
    if (this.templateData == null) {
      this.templateData = new HashMap<>();
    }
    this.templateData.put(key, templateDataItem);
    return this;
  }

   /**
   * Get templateData
   * @return templateData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getTemplateData() {
    return templateData;
  }


  public void setTemplateData(Map<String, String> templateData) {
    this.templateData = templateData;
  }


  public MailerMail templateId(String templateId) {
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTemplateId() {
    return templateId;
  }


  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public MailerMail threadIndex(String threadIndex) {
    
    this.threadIndex = threadIndex;
    return this;
  }

   /**
   * Get threadIndex
   * @return threadIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreadIndex() {
    return threadIndex;
  }


  public void setThreadIndex(String threadIndex) {
    this.threadIndex = threadIndex;
  }


  public MailerMail threadUuid(String threadUuid) {
    
    this.threadUuid = threadUuid;
    return this;
  }

   /**
   * Get threadUuid
   * @return threadUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreadUuid() {
    return threadUuid;
  }


  public void setThreadUuid(String threadUuid) {
    this.threadUuid = threadUuid;
  }


  public MailerMail to(List<MailerUser> to) {
    
    this.to = to;
    return this;
  }

  public MailerMail addToItem(MailerUser toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<MailerUser> getTo() {
    return to;
  }


  public void setTo(List<MailerUser> to) {
    this.to = to;
  }


  public MailerMail sendErrors(List<String> sendErrors) {
    
    this.sendErrors = sendErrors;
    return this;
  }

  public MailerMail addSendErrorsItem(String sendErrorsItem) {
    if (this.sendErrors == null) {
      this.sendErrors = new ArrayList<>();
    }
    this.sendErrors.add(sendErrorsItem);
    return this;
  }

   /**
   * Get sendErrors
   * @return sendErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getSendErrors() {
    return sendErrors;
  }


  public void setSendErrors(List<String> sendErrors) {
    this.sendErrors = sendErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailerMail mailerMail = (MailerMail) o;
    return Objects.equals(this.attachments, mailerMail.attachments) &&
        Objects.equals(this.cc, mailerMail.cc) &&
        Objects.equals(this.contentHtml, mailerMail.contentHtml) &&
        Objects.equals(this.contentMarkdown, mailerMail.contentMarkdown) &&
        Objects.equals(this.contentPlain, mailerMail.contentPlain) &&
        Objects.equals(this.dateSent, mailerMail.dateSent) &&
        Objects.equals(this.from, mailerMail.from) &&
        Objects.equals(this.retries, mailerMail.retries) &&
        Objects.equals(this.sender, mailerMail.sender) &&
        Objects.equals(this.subject, mailerMail.subject) &&
        Objects.equals(this.templateData, mailerMail.templateData) &&
        Objects.equals(this.templateId, mailerMail.templateId) &&
        Objects.equals(this.threadIndex, mailerMail.threadIndex) &&
        Objects.equals(this.threadUuid, mailerMail.threadUuid) &&
        Objects.equals(this.to, mailerMail.to) &&
        Objects.equals(this.sendErrors, mailerMail.sendErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, cc, contentHtml, contentMarkdown, contentPlain, dateSent, from, retries, sender, subject, templateData, templateId, threadIndex, threadUuid, to, sendErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailerMail {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    contentHtml: ").append(toIndentedString(contentHtml)).append("\n");
    sb.append("    contentMarkdown: ").append(toIndentedString(contentMarkdown)).append("\n");
    sb.append("    contentPlain: ").append(toIndentedString(contentPlain)).append("\n");
    sb.append("    dateSent: ").append(toIndentedString(dateSent)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    retries: ").append(toIndentedString(retries)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    templateData: ").append(toIndentedString(templateData)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    threadIndex: ").append(toIndentedString(threadIndex)).append("\n");
    sb.append("    threadUuid: ").append(toIndentedString(threadUuid)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    sendErrors: ").append(toIndentedString(sendErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attachments");
    openapiFields.add("Cc");
    openapiFields.add("ContentHtml");
    openapiFields.add("ContentMarkdown");
    openapiFields.add("ContentPlain");
    openapiFields.add("DateSent");
    openapiFields.add("From");
    openapiFields.add("Retries");
    openapiFields.add("Sender");
    openapiFields.add("Subject");
    openapiFields.add("TemplateData");
    openapiFields.add("TemplateId");
    openapiFields.add("ThreadIndex");
    openapiFields.add("ThreadUuid");
    openapiFields.add("To");
    openapiFields.add("sendErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MailerMail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MailerMail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MailerMail is not found in the empty JSON string", MailerMail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MailerMail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MailerMail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Attachments` to be an array in the JSON string but got `%s`", jsonObj.get("Attachments").toString()));
      }
      if (jsonObj.get("Cc") != null && !jsonObj.get("Cc").isJsonNull()) {
        JsonArray jsonArraycc = jsonObj.getAsJsonArray("Cc");
        if (jsonArraycc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Cc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Cc` to be an array in the JSON string but got `%s`", jsonObj.get("Cc").toString()));
          }

          // validate the optional field `Cc` (array)
          for (int i = 0; i < jsonArraycc.size(); i++) {
            MailerUser.validateJsonObject(jsonArraycc.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("ContentHtml") != null && !jsonObj.get("ContentHtml").isJsonNull()) && !jsonObj.get("ContentHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentHtml").toString()));
      }
      if ((jsonObj.get("ContentMarkdown") != null && !jsonObj.get("ContentMarkdown").isJsonNull()) && !jsonObj.get("ContentMarkdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentMarkdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentMarkdown").toString()));
      }
      if ((jsonObj.get("ContentPlain") != null && !jsonObj.get("ContentPlain").isJsonNull()) && !jsonObj.get("ContentPlain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentPlain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentPlain").toString()));
      }
      if ((jsonObj.get("DateSent") != null && !jsonObj.get("DateSent").isJsonNull()) && !jsonObj.get("DateSent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateSent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateSent").toString()));
      }
      // validate the optional field `From`
      if (jsonObj.get("From") != null && !jsonObj.get("From").isJsonNull()) {
        MailerUser.validateJsonObject(jsonObj.getAsJsonObject("From"));
      }
      // validate the optional field `Sender`
      if (jsonObj.get("Sender") != null && !jsonObj.get("Sender").isJsonNull()) {
        MailerUser.validateJsonObject(jsonObj.getAsJsonObject("Sender"));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("TemplateId") != null && !jsonObj.get("TemplateId").isJsonNull()) && !jsonObj.get("TemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TemplateId").toString()));
      }
      if ((jsonObj.get("ThreadIndex") != null && !jsonObj.get("ThreadIndex").isJsonNull()) && !jsonObj.get("ThreadIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThreadIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThreadIndex").toString()));
      }
      if ((jsonObj.get("ThreadUuid") != null && !jsonObj.get("ThreadUuid").isJsonNull()) && !jsonObj.get("ThreadUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThreadUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThreadUuid").toString()));
      }
      if (jsonObj.get("To") != null && !jsonObj.get("To").isJsonNull()) {
        JsonArray jsonArrayto = jsonObj.getAsJsonArray("To");
        if (jsonArrayto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("To").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `To` to be an array in the JSON string but got `%s`", jsonObj.get("To").toString()));
          }

          // validate the optional field `To` (array)
          for (int i = 0; i < jsonArrayto.size(); i++) {
            MailerUser.validateJsonObject(jsonArrayto.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sendErrors") != null && !jsonObj.get("sendErrors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendErrors` to be an array in the JSON string but got `%s`", jsonObj.get("sendErrors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailerMail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailerMail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailerMail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailerMail.class));

       return (TypeAdapter<T>) new TypeAdapter<MailerMail>() {
           @Override
           public void write(JsonWriter out, MailerMail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MailerMail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MailerMail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MailerMail
  * @throws IOException if the JSON string is invalid with respect to MailerMail
  */
  public static MailerMail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailerMail.class);
  }

 /**
  * Convert an instance of MailerMail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

