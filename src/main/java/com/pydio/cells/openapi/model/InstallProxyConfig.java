/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * option (setter.all_fields) &#x3D; true;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class InstallProxyConfig {
    public static final String SERIALIZED_NAME_BINDS = "Binds";
    @SerializedName(SERIALIZED_NAME_BINDS)
    @javax.annotation.Nullable
    private List<String> binds = new ArrayList<>();

    public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
    @SerializedName(SERIALIZED_NAME_CERTIFICATE)
    @javax.annotation.Nullable
    private InstallTLSCertificate certificate;

    public static final String SERIALIZED_NAME_COMPUTED_HASH = "ComputedHash";
    @SerializedName(SERIALIZED_NAME_COMPUTED_HASH)
    @javax.annotation.Nullable
    private String computedHash;

    public static final String SERIALIZED_NAME_HEADER_MODS = "HeaderMods";
    @SerializedName(SERIALIZED_NAME_HEADER_MODS)
    @javax.annotation.Nullable
    private List<InstallHeaderMod> headerMods = new ArrayList<>();

    public static final String SERIALIZED_NAME_LETS_ENCRYPT = "LetsEncrypt";
    @SerializedName(SERIALIZED_NAME_LETS_ENCRYPT)
    @javax.annotation.Nullable
    private InstallTLSLetsEncrypt letsEncrypt;

    public static final String SERIALIZED_NAME_MAINTENANCE = "Maintenance";
    @SerializedName(SERIALIZED_NAME_MAINTENANCE)
    @javax.annotation.Nullable
    private Boolean maintenance;

    public static final String SERIALIZED_NAME_MAINTENANCE_CONDITIONS = "MaintenanceConditions";
    @SerializedName(SERIALIZED_NAME_MAINTENANCE_CONDITIONS)
    @javax.annotation.Nullable
    private List<String> maintenanceConditions = new ArrayList<>();

    public static final String SERIALIZED_NAME_REVERSE_PROXY_U_R_L = "ReverseProxyURL";
    @SerializedName(SERIALIZED_NAME_REVERSE_PROXY_U_R_L)
    @javax.annotation.Nullable
    private String reverseProxyURL;

    public static final String SERIALIZED_NAME_ROUTING = "Routing";
    @SerializedName(SERIALIZED_NAME_ROUTING)
    @javax.annotation.Nullable
    private List<InstallRule> routing = new ArrayList<>();

    public static final String SERIALIZED_NAME_SS_L_REDIRECT = "SSLRedirect";
    @SerializedName(SERIALIZED_NAME_SS_L_REDIRECT)
    @javax.annotation.Nullable
    private Boolean ssLRedirect;

    public static final String SERIALIZED_NAME_SELF_SIGNED = "SelfSigned";
    @SerializedName(SERIALIZED_NAME_SELF_SIGNED)
    @javax.annotation.Nullable
    private InstallTLSSelfSigned selfSigned;

    public InstallProxyConfig() {
    }

    public InstallProxyConfig binds(@javax.annotation.Nullable List<String> binds) {
        this.binds = binds;
        return this;
    }

    public InstallProxyConfig addBindsItem(String bindsItem) {
        if (this.binds == null) {
            this.binds = new ArrayList<>();
        }
        this.binds.add(bindsItem);
        return this;
    }

    /**
     * Get binds
     *
     * @return binds
     */
    @javax.annotation.Nullable
    public List<String> getBinds() {
        return binds;
    }

    public void setBinds(@javax.annotation.Nullable List<String> binds) {
        this.binds = binds;
    }


    public InstallProxyConfig certificate(@javax.annotation.Nullable InstallTLSCertificate certificate) {
        this.certificate = certificate;
        return this;
    }

    /**
     * Get certificate
     *
     * @return certificate
     */
    @javax.annotation.Nullable
    public InstallTLSCertificate getCertificate() {
        return certificate;
    }

    public void setCertificate(@javax.annotation.Nullable InstallTLSCertificate certificate) {
        this.certificate = certificate;
    }


    public InstallProxyConfig computedHash(@javax.annotation.Nullable String computedHash) {
        this.computedHash = computedHash;
        return this;
    }

    /**
     * Get computedHash
     *
     * @return computedHash
     */
    @javax.annotation.Nullable
    public String getComputedHash() {
        return computedHash;
    }

    public void setComputedHash(@javax.annotation.Nullable String computedHash) {
        this.computedHash = computedHash;
    }


    public InstallProxyConfig headerMods(@javax.annotation.Nullable List<InstallHeaderMod> headerMods) {
        this.headerMods = headerMods;
        return this;
    }

    public InstallProxyConfig addHeaderModsItem(InstallHeaderMod headerModsItem) {
        if (this.headerMods == null) {
            this.headerMods = new ArrayList<>();
        }
        this.headerMods.add(headerModsItem);
        return this;
    }

    /**
     * Get headerMods
     *
     * @return headerMods
     */
    @javax.annotation.Nullable
    public List<InstallHeaderMod> getHeaderMods() {
        return headerMods;
    }

    public void setHeaderMods(@javax.annotation.Nullable List<InstallHeaderMod> headerMods) {
        this.headerMods = headerMods;
    }


    public InstallProxyConfig letsEncrypt(@javax.annotation.Nullable InstallTLSLetsEncrypt letsEncrypt) {
        this.letsEncrypt = letsEncrypt;
        return this;
    }

    /**
     * Get letsEncrypt
     *
     * @return letsEncrypt
     */
    @javax.annotation.Nullable
    public InstallTLSLetsEncrypt getLetsEncrypt() {
        return letsEncrypt;
    }

    public void setLetsEncrypt(@javax.annotation.Nullable InstallTLSLetsEncrypt letsEncrypt) {
        this.letsEncrypt = letsEncrypt;
    }


    public InstallProxyConfig maintenance(@javax.annotation.Nullable Boolean maintenance) {
        this.maintenance = maintenance;
        return this;
    }

    /**
     * Get maintenance
     *
     * @return maintenance
     */
    @javax.annotation.Nullable
    public Boolean getMaintenance() {
        return maintenance;
    }

    public void setMaintenance(@javax.annotation.Nullable Boolean maintenance) {
        this.maintenance = maintenance;
    }


    public InstallProxyConfig maintenanceConditions(@javax.annotation.Nullable List<String> maintenanceConditions) {
        this.maintenanceConditions = maintenanceConditions;
        return this;
    }

    public InstallProxyConfig addMaintenanceConditionsItem(String maintenanceConditionsItem) {
        if (this.maintenanceConditions == null) {
            this.maintenanceConditions = new ArrayList<>();
        }
        this.maintenanceConditions.add(maintenanceConditionsItem);
        return this;
    }

    /**
     * Get maintenanceConditions
     *
     * @return maintenanceConditions
     */
    @javax.annotation.Nullable
    public List<String> getMaintenanceConditions() {
        return maintenanceConditions;
    }

    public void setMaintenanceConditions(@javax.annotation.Nullable List<String> maintenanceConditions) {
        this.maintenanceConditions = maintenanceConditions;
    }


    public InstallProxyConfig reverseProxyURL(@javax.annotation.Nullable String reverseProxyURL) {
        this.reverseProxyURL = reverseProxyURL;
        return this;
    }

    /**
     * Get reverseProxyURL
     *
     * @return reverseProxyURL
     */
    @javax.annotation.Nullable
    public String getReverseProxyURL() {
        return reverseProxyURL;
    }

    public void setReverseProxyURL(@javax.annotation.Nullable String reverseProxyURL) {
        this.reverseProxyURL = reverseProxyURL;
    }


    public InstallProxyConfig routing(@javax.annotation.Nullable List<InstallRule> routing) {
        this.routing = routing;
        return this;
    }

    public InstallProxyConfig addRoutingItem(InstallRule routingItem) {
        if (this.routing == null) {
            this.routing = new ArrayList<>();
        }
        this.routing.add(routingItem);
        return this;
    }

    /**
     * Get routing
     *
     * @return routing
     */
    @javax.annotation.Nullable
    public List<InstallRule> getRouting() {
        return routing;
    }

    public void setRouting(@javax.annotation.Nullable List<InstallRule> routing) {
        this.routing = routing;
    }


    public InstallProxyConfig ssLRedirect(@javax.annotation.Nullable Boolean ssLRedirect) {
        this.ssLRedirect = ssLRedirect;
        return this;
    }

    /**
     * Get ssLRedirect
     *
     * @return ssLRedirect
     */
    @javax.annotation.Nullable
    public Boolean getSsLRedirect() {
        return ssLRedirect;
    }

    public void setSsLRedirect(@javax.annotation.Nullable Boolean ssLRedirect) {
        this.ssLRedirect = ssLRedirect;
    }


    public InstallProxyConfig selfSigned(@javax.annotation.Nullable InstallTLSSelfSigned selfSigned) {
        this.selfSigned = selfSigned;
        return this;
    }

    /**
     * Get selfSigned
     *
     * @return selfSigned
     */
    @javax.annotation.Nullable
    public InstallTLSSelfSigned getSelfSigned() {
        return selfSigned;
    }

    public void setSelfSigned(@javax.annotation.Nullable InstallTLSSelfSigned selfSigned) {
        this.selfSigned = selfSigned;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstallProxyConfig installProxyConfig = (InstallProxyConfig) o;
        return Objects.equals(this.binds, installProxyConfig.binds) &&
                Objects.equals(this.certificate, installProxyConfig.certificate) &&
                Objects.equals(this.computedHash, installProxyConfig.computedHash) &&
                Objects.equals(this.headerMods, installProxyConfig.headerMods) &&
                Objects.equals(this.letsEncrypt, installProxyConfig.letsEncrypt) &&
                Objects.equals(this.maintenance, installProxyConfig.maintenance) &&
                Objects.equals(this.maintenanceConditions, installProxyConfig.maintenanceConditions) &&
                Objects.equals(this.reverseProxyURL, installProxyConfig.reverseProxyURL) &&
                Objects.equals(this.routing, installProxyConfig.routing) &&
                Objects.equals(this.ssLRedirect, installProxyConfig.ssLRedirect) &&
                Objects.equals(this.selfSigned, installProxyConfig.selfSigned);
    }

    @Override
    public int hashCode() {
        return Objects.hash(binds, certificate, computedHash, headerMods, letsEncrypt, maintenance, maintenanceConditions, reverseProxyURL, routing, ssLRedirect, selfSigned);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InstallProxyConfig {\n");
        sb.append("    binds: ").append(toIndentedString(binds)).append("\n");
        sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
        sb.append("    computedHash: ").append(toIndentedString(computedHash)).append("\n");
        sb.append("    headerMods: ").append(toIndentedString(headerMods)).append("\n");
        sb.append("    letsEncrypt: ").append(toIndentedString(letsEncrypt)).append("\n");
        sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
        sb.append("    maintenanceConditions: ").append(toIndentedString(maintenanceConditions)).append("\n");
        sb.append("    reverseProxyURL: ").append(toIndentedString(reverseProxyURL)).append("\n");
        sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
        sb.append("    ssLRedirect: ").append(toIndentedString(ssLRedirect)).append("\n");
        sb.append("    selfSigned: ").append(toIndentedString(selfSigned)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Binds");
        openapiFields.add("Certificate");
        openapiFields.add("ComputedHash");
        openapiFields.add("HeaderMods");
        openapiFields.add("LetsEncrypt");
        openapiFields.add("Maintenance");
        openapiFields.add("MaintenanceConditions");
        openapiFields.add("ReverseProxyURL");
        openapiFields.add("Routing");
        openapiFields.add("SSLRedirect");
        openapiFields.add("SelfSigned");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to InstallProxyConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!InstallProxyConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in InstallProxyConfig is not found in the empty JSON string", InstallProxyConfig.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!InstallProxyConfig.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstallProxyConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("Binds") != null && !jsonObj.get("Binds").isJsonNull() && !jsonObj.get("Binds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Binds` to be an array in the JSON string but got `%s`", jsonObj.get("Binds").toString()));
        }
        // validate the optional field `Certificate`
        if (jsonObj.get("Certificate") != null && !jsonObj.get("Certificate").isJsonNull()) {
            InstallTLSCertificate.validateJsonElement(jsonObj.get("Certificate"));
        }
        if ((jsonObj.get("ComputedHash") != null && !jsonObj.get("ComputedHash").isJsonNull()) && !jsonObj.get("ComputedHash").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ComputedHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ComputedHash").toString()));
        }
        if (jsonObj.get("HeaderMods") != null && !jsonObj.get("HeaderMods").isJsonNull()) {
            JsonArray jsonArrayheaderMods = jsonObj.getAsJsonArray("HeaderMods");
            if (jsonArrayheaderMods != null) {
                // ensure the json data is an array
                if (!jsonObj.get("HeaderMods").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `HeaderMods` to be an array in the JSON string but got `%s`", jsonObj.get("HeaderMods").toString()));
                }

                // validate the optional field `HeaderMods` (array)
                for (int i = 0; i < jsonArrayheaderMods.size(); i++) {
                    InstallHeaderMod.validateJsonElement(jsonArrayheaderMods.get(i));
                }
                ;
            }
        }
        // validate the optional field `LetsEncrypt`
        if (jsonObj.get("LetsEncrypt") != null && !jsonObj.get("LetsEncrypt").isJsonNull()) {
            InstallTLSLetsEncrypt.validateJsonElement(jsonObj.get("LetsEncrypt"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("MaintenanceConditions") != null && !jsonObj.get("MaintenanceConditions").isJsonNull() && !jsonObj.get("MaintenanceConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MaintenanceConditions` to be an array in the JSON string but got `%s`", jsonObj.get("MaintenanceConditions").toString()));
        }
        if ((jsonObj.get("ReverseProxyURL") != null && !jsonObj.get("ReverseProxyURL").isJsonNull()) && !jsonObj.get("ReverseProxyURL").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReverseProxyURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReverseProxyURL").toString()));
        }
        if (jsonObj.get("Routing") != null && !jsonObj.get("Routing").isJsonNull()) {
            JsonArray jsonArrayrouting = jsonObj.getAsJsonArray("Routing");
            if (jsonArrayrouting != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Routing").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `Routing` to be an array in the JSON string but got `%s`", jsonObj.get("Routing").toString()));
                }

                // validate the optional field `Routing` (array)
                for (int i = 0; i < jsonArrayrouting.size(); i++) {
                    InstallRule.validateJsonElement(jsonArrayrouting.get(i));
                }
                ;
            }
        }
        // validate the optional field `SelfSigned`
        if (jsonObj.get("SelfSigned") != null && !jsonObj.get("SelfSigned").isJsonNull()) {
            InstallTLSSelfSigned.validateJsonElement(jsonObj.get("SelfSigned"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InstallProxyConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InstallProxyConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InstallProxyConfig> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(InstallProxyConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<InstallProxyConfig>() {
                @Override
                public void write(JsonWriter out, InstallProxyConfig value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public InstallProxyConfig read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of InstallProxyConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InstallProxyConfig
     * @throws IOException if the JSON string is invalid with respect to InstallProxyConfig
     */
    public static InstallProxyConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InstallProxyConfig.class);
    }

    /**
     * Convert an instance of InstallProxyConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

