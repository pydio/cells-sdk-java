/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * RestUpdateSharePoliciesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-20T11:40:14.306426+01:00[Europe/Berlin]")
public class RestUpdateSharePoliciesResponse {
  public static final String SERIALIZED_NAME_POLICIES = "Policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<ServiceResourcePolicy> policies = null;

  public static final String SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE = "PoliciesContextEditable";
  @SerializedName(SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE)
  private Boolean policiesContextEditable;

  public static final String SERIALIZED_NAME_SUCCESS = "Success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public RestUpdateSharePoliciesResponse() {
  }

  public RestUpdateSharePoliciesResponse policies(List<ServiceResourcePolicy> policies) {
    
    this.policies = policies;
    return this;
  }

  public RestUpdateSharePoliciesResponse addPoliciesItem(ServiceResourcePolicy policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ServiceResourcePolicy> getPolicies() {
    return policies;
  }


  public void setPolicies(List<ServiceResourcePolicy> policies) {
    this.policies = policies;
  }


  public RestUpdateSharePoliciesResponse policiesContextEditable(Boolean policiesContextEditable) {
    
    this.policiesContextEditable = policiesContextEditable;
    return this;
  }

   /**
   * Get policiesContextEditable
   * @return policiesContextEditable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPoliciesContextEditable() {
    return policiesContextEditable;
  }


  public void setPoliciesContextEditable(Boolean policiesContextEditable) {
    this.policiesContextEditable = policiesContextEditable;
  }


  public RestUpdateSharePoliciesResponse success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestUpdateSharePoliciesResponse restUpdateSharePoliciesResponse = (RestUpdateSharePoliciesResponse) o;
    return Objects.equals(this.policies, restUpdateSharePoliciesResponse.policies) &&
        Objects.equals(this.policiesContextEditable, restUpdateSharePoliciesResponse.policiesContextEditable) &&
        Objects.equals(this.success, restUpdateSharePoliciesResponse.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policies, policiesContextEditable, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestUpdateSharePoliciesResponse {\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    policiesContextEditable: ").append(toIndentedString(policiesContextEditable)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Policies");
    openapiFields.add("PoliciesContextEditable");
    openapiFields.add("Success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RestUpdateSharePoliciesResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RestUpdateSharePoliciesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestUpdateSharePoliciesResponse is not found in the empty JSON string", RestUpdateSharePoliciesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RestUpdateSharePoliciesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestUpdateSharePoliciesResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Policies") != null && !jsonObj.get("Policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("Policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Policies` to be an array in the JSON string but got `%s`", jsonObj.get("Policies").toString()));
          }

          // validate the optional field `Policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            ServiceResourcePolicy.validateJsonObject(jsonArraypolicies.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestUpdateSharePoliciesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestUpdateSharePoliciesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestUpdateSharePoliciesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestUpdateSharePoliciesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RestUpdateSharePoliciesResponse>() {
           @Override
           public void write(JsonWriter out, RestUpdateSharePoliciesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestUpdateSharePoliciesResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestUpdateSharePoliciesResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestUpdateSharePoliciesResponse
  * @throws IOException if the JSON string is invalid with respect to RestUpdateSharePoliciesResponse
  */
  public static RestUpdateSharePoliciesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestUpdateSharePoliciesResponse.class);
  }

 /**
  * Convert an instance of RestUpdateSharePoliciesResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

