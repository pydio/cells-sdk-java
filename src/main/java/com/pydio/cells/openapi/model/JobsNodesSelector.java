/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * JobsNodesSelector
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class JobsNodesSelector {
    public static final String SERIALIZED_NAME_ALL = "All";
    @SerializedName(SERIALIZED_NAME_ALL)
    @javax.annotation.Nullable
    private Boolean all;

    public static final String SERIALIZED_NAME_CLEAR_INPUT = "ClearInput";
    @SerializedName(SERIALIZED_NAME_CLEAR_INPUT)
    @javax.annotation.Nullable
    private Boolean clearInput;

    public static final String SERIALIZED_NAME_COLLECT = "Collect";
    @SerializedName(SERIALIZED_NAME_COLLECT)
    @javax.annotation.Nullable
    private Boolean collect;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_FAN_OUT_INPUT = "FanOutInput";
    @SerializedName(SERIALIZED_NAME_FAN_OUT_INPUT)
    @javax.annotation.Nullable
    private Boolean fanOutInput;

    public static final String SERIALIZED_NAME_LABEL = "Label";
    @SerializedName(SERIALIZED_NAME_LABEL)
    @javax.annotation.Nullable
    private String label;

    public static final String SERIALIZED_NAME_PATHES = "Pathes";
    @SerializedName(SERIALIZED_NAME_PATHES)
    @javax.annotation.Nullable
    private List<String> pathes = new ArrayList<>();

    public static final String SERIALIZED_NAME_QUERY = "Query";
    @SerializedName(SERIALIZED_NAME_QUERY)
    @javax.annotation.Nullable
    private ServiceQuery query;

    public static final String SERIALIZED_NAME_RANGE = "Range";
    @SerializedName(SERIALIZED_NAME_RANGE)
    @javax.annotation.Nullable
    private JobsSelectorRange range;

    public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
    @SerializedName(SERIALIZED_NAME_TIMEOUT)
    @javax.annotation.Nullable
    private String timeout;

    public JobsNodesSelector() {
    }

    public JobsNodesSelector all(@javax.annotation.Nullable Boolean all) {
        this.all = all;
        return this;
    }

    /**
     * Get all
     *
     * @return all
     */
    @javax.annotation.Nullable
    public Boolean getAll() {
        return all;
    }

    public void setAll(@javax.annotation.Nullable Boolean all) {
        this.all = all;
    }


    public JobsNodesSelector clearInput(@javax.annotation.Nullable Boolean clearInput) {
        this.clearInput = clearInput;
        return this;
    }

    /**
     * Get clearInput
     *
     * @return clearInput
     */
    @javax.annotation.Nullable
    public Boolean getClearInput() {
        return clearInput;
    }

    public void setClearInput(@javax.annotation.Nullable Boolean clearInput) {
        this.clearInput = clearInput;
    }


    public JobsNodesSelector collect(@javax.annotation.Nullable Boolean collect) {
        this.collect = collect;
        return this;
    }

    /**
     * Get collect
     *
     * @return collect
     */
    @javax.annotation.Nullable
    public Boolean getCollect() {
        return collect;
    }

    public void setCollect(@javax.annotation.Nullable Boolean collect) {
        this.collect = collect;
    }


    public JobsNodesSelector description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }


    public JobsNodesSelector fanOutInput(@javax.annotation.Nullable Boolean fanOutInput) {
        this.fanOutInput = fanOutInput;
        return this;
    }

    /**
     * Get fanOutInput
     *
     * @return fanOutInput
     */
    @javax.annotation.Nullable
    public Boolean getFanOutInput() {
        return fanOutInput;
    }

    public void setFanOutInput(@javax.annotation.Nullable Boolean fanOutInput) {
        this.fanOutInput = fanOutInput;
    }


    public JobsNodesSelector label(@javax.annotation.Nullable String label) {
        this.label = label;
        return this;
    }

    /**
     * Get label
     *
     * @return label
     */
    @javax.annotation.Nullable
    public String getLabel() {
        return label;
    }

    public void setLabel(@javax.annotation.Nullable String label) {
        this.label = label;
    }


    public JobsNodesSelector pathes(@javax.annotation.Nullable List<String> pathes) {
        this.pathes = pathes;
        return this;
    }

    public JobsNodesSelector addPathesItem(String pathesItem) {
        if (this.pathes == null) {
            this.pathes = new ArrayList<>();
        }
        this.pathes.add(pathesItem);
        return this;
    }

    /**
     * Get pathes
     *
     * @return pathes
     */
    @javax.annotation.Nullable
    public List<String> getPathes() {
        return pathes;
    }

    public void setPathes(@javax.annotation.Nullable List<String> pathes) {
        this.pathes = pathes;
    }


    public JobsNodesSelector query(@javax.annotation.Nullable ServiceQuery query) {
        this.query = query;
        return this;
    }

    /**
     * Get query
     *
     * @return query
     */
    @javax.annotation.Nullable
    public ServiceQuery getQuery() {
        return query;
    }

    public void setQuery(@javax.annotation.Nullable ServiceQuery query) {
        this.query = query;
    }


    public JobsNodesSelector range(@javax.annotation.Nullable JobsSelectorRange range) {
        this.range = range;
        return this;
    }

    /**
     * Get range
     *
     * @return range
     */
    @javax.annotation.Nullable
    public JobsSelectorRange getRange() {
        return range;
    }

    public void setRange(@javax.annotation.Nullable JobsSelectorRange range) {
        this.range = range;
    }


    public JobsNodesSelector timeout(@javax.annotation.Nullable String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get timeout
     *
     * @return timeout
     */
    @javax.annotation.Nullable
    public String getTimeout() {
        return timeout;
    }

    public void setTimeout(@javax.annotation.Nullable String timeout) {
        this.timeout = timeout;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobsNodesSelector jobsNodesSelector = (JobsNodesSelector) o;
        return Objects.equals(this.all, jobsNodesSelector.all) &&
                Objects.equals(this.clearInput, jobsNodesSelector.clearInput) &&
                Objects.equals(this.collect, jobsNodesSelector.collect) &&
                Objects.equals(this.description, jobsNodesSelector.description) &&
                Objects.equals(this.fanOutInput, jobsNodesSelector.fanOutInput) &&
                Objects.equals(this.label, jobsNodesSelector.label) &&
                Objects.equals(this.pathes, jobsNodesSelector.pathes) &&
                Objects.equals(this.query, jobsNodesSelector.query) &&
                Objects.equals(this.range, jobsNodesSelector.range) &&
                Objects.equals(this.timeout, jobsNodesSelector.timeout);
    }

    @Override
    public int hashCode() {
        return Objects.hash(all, clearInput, collect, description, fanOutInput, label, pathes, query, range, timeout);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobsNodesSelector {\n");
        sb.append("    all: ").append(toIndentedString(all)).append("\n");
        sb.append("    clearInput: ").append(toIndentedString(clearInput)).append("\n");
        sb.append("    collect: ").append(toIndentedString(collect)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    fanOutInput: ").append(toIndentedString(fanOutInput)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    pathes: ").append(toIndentedString(pathes)).append("\n");
        sb.append("    query: ").append(toIndentedString(query)).append("\n");
        sb.append("    range: ").append(toIndentedString(range)).append("\n");
        sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("All");
        openapiFields.add("ClearInput");
        openapiFields.add("Collect");
        openapiFields.add("Description");
        openapiFields.add("FanOutInput");
        openapiFields.add("Label");
        openapiFields.add("Pathes");
        openapiFields.add("Query");
        openapiFields.add("Range");
        openapiFields.add("Timeout");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to JobsNodesSelector
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!JobsNodesSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in JobsNodesSelector is not found in the empty JSON string", JobsNodesSelector.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!JobsNodesSelector.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsNodesSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
        }
        if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("Pathes") != null && !jsonObj.get("Pathes").isJsonNull() && !jsonObj.get("Pathes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Pathes` to be an array in the JSON string but got `%s`", jsonObj.get("Pathes").toString()));
        }
        // validate the optional field `Query`
        if (jsonObj.get("Query") != null && !jsonObj.get("Query").isJsonNull()) {
            ServiceQuery.validateJsonElement(jsonObj.get("Query"));
        }
        // validate the optional field `Range`
        if (jsonObj.get("Range") != null && !jsonObj.get("Range").isJsonNull()) {
            JobsSelectorRange.validateJsonElement(jsonObj.get("Range"));
        }
        if ((jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) && !jsonObj.get("Timeout").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timeout").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JobsNodesSelector.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JobsNodesSelector' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<JobsNodesSelector> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(JobsNodesSelector.class));

            return (TypeAdapter<T>) new TypeAdapter<JobsNodesSelector>() {
                @Override
                public void write(JsonWriter out, JobsNodesSelector value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public JobsNodesSelector read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of JobsNodesSelector given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of JobsNodesSelector
     * @throws IOException if the JSON string is invalid with respect to JobsNodesSelector
     */
    public static JobsNodesSelector fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JobsNodesSelector.class);
    }

    /**
     * Convert an instance of JobsNodesSelector to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

