/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * UserCanRepresentEitherAUserOrAGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-06T14:22:40.613083+01:00[Europe/Berlin]")
public class UserCanRepresentEitherAUserOrAGroup {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, String> attributes = null;

  public static final String SERIALIZED_NAME_GROUP_LABEL = "GroupLabel";
  @SerializedName(SERIALIZED_NAME_GROUP_LABEL)
  private String groupLabel;

  public static final String SERIALIZED_NAME_GROUP_PATH = "GroupPath";
  @SerializedName(SERIALIZED_NAME_GROUP_PATH)
  private String groupPath;

  public static final String SERIALIZED_NAME_IS_GROUP = "IsGroup";
  @SerializedName(SERIALIZED_NAME_IS_GROUP)
  private Boolean isGroup;

  public static final String SERIALIZED_NAME_LAST_CONNECTED = "LastConnected";
  @SerializedName(SERIALIZED_NAME_LAST_CONNECTED)
  private Integer lastConnected;

  public static final String SERIALIZED_NAME_OLD_PASSWORD = "OldPassword";
  @SerializedName(SERIALIZED_NAME_OLD_PASSWORD)
  private String oldPassword;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_POLICIES = "Policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<ServiceResourcePolicy> policies = null;

  public static final String SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE = "PoliciesContextEditable";
  @SerializedName(SERIALIZED_NAME_POLICIES_CONTEXT_EDITABLE)
  private Boolean policiesContextEditable;

  public static final String SERIALIZED_NAME_ROLES = "Roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<IdmRole> roles = null;

  public static final String SERIALIZED_NAME_UUID = "Uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public UserCanRepresentEitherAUserOrAGroup() {
  }

  public UserCanRepresentEitherAUserOrAGroup attributes(Map<String, String> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public UserCanRepresentEitherAUserOrAGroup putAttributesItem(String key, String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getAttributes() {
    return attributes;
  }


  public void setAttributes(Map<String, String> attributes) {
    this.attributes = attributes;
  }


  public UserCanRepresentEitherAUserOrAGroup groupLabel(String groupLabel) {
    
    this.groupLabel = groupLabel;
    return this;
  }

   /**
   * Get groupLabel
   * @return groupLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGroupLabel() {
    return groupLabel;
  }


  public void setGroupLabel(String groupLabel) {
    this.groupLabel = groupLabel;
  }


  public UserCanRepresentEitherAUserOrAGroup groupPath(String groupPath) {
    
    this.groupPath = groupPath;
    return this;
  }

   /**
   * Get groupPath
   * @return groupPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGroupPath() {
    return groupPath;
  }


  public void setGroupPath(String groupPath) {
    this.groupPath = groupPath;
  }


  public UserCanRepresentEitherAUserOrAGroup isGroup(Boolean isGroup) {
    
    this.isGroup = isGroup;
    return this;
  }

   /**
   * Get isGroup
   * @return isGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsGroup() {
    return isGroup;
  }


  public void setIsGroup(Boolean isGroup) {
    this.isGroup = isGroup;
  }


  public UserCanRepresentEitherAUserOrAGroup lastConnected(Integer lastConnected) {
    
    this.lastConnected = lastConnected;
    return this;
  }

   /**
   * Get lastConnected
   * @return lastConnected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLastConnected() {
    return lastConnected;
  }


  public void setLastConnected(Integer lastConnected) {
    this.lastConnected = lastConnected;
  }


  public UserCanRepresentEitherAUserOrAGroup oldPassword(String oldPassword) {
    
    this.oldPassword = oldPassword;
    return this;
  }

   /**
   * Get oldPassword
   * @return oldPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOldPassword() {
    return oldPassword;
  }


  public void setOldPassword(String oldPassword) {
    this.oldPassword = oldPassword;
  }


  public UserCanRepresentEitherAUserOrAGroup password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public UserCanRepresentEitherAUserOrAGroup policies(List<ServiceResourcePolicy> policies) {
    
    this.policies = policies;
    return this;
  }

  public UserCanRepresentEitherAUserOrAGroup addPoliciesItem(ServiceResourcePolicy policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ServiceResourcePolicy> getPolicies() {
    return policies;
  }


  public void setPolicies(List<ServiceResourcePolicy> policies) {
    this.policies = policies;
  }


  public UserCanRepresentEitherAUserOrAGroup policiesContextEditable(Boolean policiesContextEditable) {
    
    this.policiesContextEditable = policiesContextEditable;
    return this;
  }

   /**
   * Context-resolved to quickly check if user is editable or not.
   * @return policiesContextEditable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Context-resolved to quickly check if user is editable or not.")

  public Boolean getPoliciesContextEditable() {
    return policiesContextEditable;
  }


  public void setPoliciesContextEditable(Boolean policiesContextEditable) {
    this.policiesContextEditable = policiesContextEditable;
  }


  public UserCanRepresentEitherAUserOrAGroup roles(List<IdmRole> roles) {
    
    this.roles = roles;
    return this;
  }

  public UserCanRepresentEitherAUserOrAGroup addRolesItem(IdmRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<IdmRole> getRoles() {
    return roles;
  }


  public void setRoles(List<IdmRole> roles) {
    this.roles = roles;
  }


  public UserCanRepresentEitherAUserOrAGroup uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserCanRepresentEitherAUserOrAGroup userCanRepresentEitherAUserOrAGroup = (UserCanRepresentEitherAUserOrAGroup) o;
    return Objects.equals(this.attributes, userCanRepresentEitherAUserOrAGroup.attributes) &&
        Objects.equals(this.groupLabel, userCanRepresentEitherAUserOrAGroup.groupLabel) &&
        Objects.equals(this.groupPath, userCanRepresentEitherAUserOrAGroup.groupPath) &&
        Objects.equals(this.isGroup, userCanRepresentEitherAUserOrAGroup.isGroup) &&
        Objects.equals(this.lastConnected, userCanRepresentEitherAUserOrAGroup.lastConnected) &&
        Objects.equals(this.oldPassword, userCanRepresentEitherAUserOrAGroup.oldPassword) &&
        Objects.equals(this.password, userCanRepresentEitherAUserOrAGroup.password) &&
        Objects.equals(this.policies, userCanRepresentEitherAUserOrAGroup.policies) &&
        Objects.equals(this.policiesContextEditable, userCanRepresentEitherAUserOrAGroup.policiesContextEditable) &&
        Objects.equals(this.roles, userCanRepresentEitherAUserOrAGroup.roles) &&
        Objects.equals(this.uuid, userCanRepresentEitherAUserOrAGroup.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, groupLabel, groupPath, isGroup, lastConnected, oldPassword, password, policies, policiesContextEditable, roles, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserCanRepresentEitherAUserOrAGroup {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    groupLabel: ").append(toIndentedString(groupLabel)).append("\n");
    sb.append("    groupPath: ").append(toIndentedString(groupPath)).append("\n");
    sb.append("    isGroup: ").append(toIndentedString(isGroup)).append("\n");
    sb.append("    lastConnected: ").append(toIndentedString(lastConnected)).append("\n");
    sb.append("    oldPassword: ").append(toIndentedString(oldPassword)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    policiesContextEditable: ").append(toIndentedString(policiesContextEditable)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("GroupLabel");
    openapiFields.add("GroupPath");
    openapiFields.add("IsGroup");
    openapiFields.add("LastConnected");
    openapiFields.add("OldPassword");
    openapiFields.add("Password");
    openapiFields.add("Policies");
    openapiFields.add("PoliciesContextEditable");
    openapiFields.add("Roles");
    openapiFields.add("Uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserCanRepresentEitherAUserOrAGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UserCanRepresentEitherAUserOrAGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserCanRepresentEitherAUserOrAGroup is not found in the empty JSON string", UserCanRepresentEitherAUserOrAGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserCanRepresentEitherAUserOrAGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserCanRepresentEitherAUserOrAGroup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("GroupLabel") != null && !jsonObj.get("GroupLabel").isJsonNull()) && !jsonObj.get("GroupLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupLabel").toString()));
      }
      if ((jsonObj.get("GroupPath") != null && !jsonObj.get("GroupPath").isJsonNull()) && !jsonObj.get("GroupPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupPath").toString()));
      }
      if ((jsonObj.get("OldPassword") != null && !jsonObj.get("OldPassword").isJsonNull()) && !jsonObj.get("OldPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OldPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OldPassword").toString()));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
      if (jsonObj.get("Policies") != null && !jsonObj.get("Policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("Policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Policies` to be an array in the JSON string but got `%s`", jsonObj.get("Policies").toString()));
          }

          // validate the optional field `Policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            ServiceResourcePolicy.validateJsonObject(jsonArraypolicies.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Roles") != null && !jsonObj.get("Roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("Roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Roles` to be an array in the JSON string but got `%s`", jsonObj.get("Roles").toString()));
          }

          // validate the optional field `Roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            IdmRole.validateJsonObject(jsonArrayroles.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("Uuid") != null && !jsonObj.get("Uuid").isJsonNull()) && !jsonObj.get("Uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserCanRepresentEitherAUserOrAGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserCanRepresentEitherAUserOrAGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserCanRepresentEitherAUserOrAGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserCanRepresentEitherAUserOrAGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<UserCanRepresentEitherAUserOrAGroup>() {
           @Override
           public void write(JsonWriter out, UserCanRepresentEitherAUserOrAGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserCanRepresentEitherAUserOrAGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserCanRepresentEitherAUserOrAGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserCanRepresentEitherAUserOrAGroup
  * @throws IOException if the JSON string is invalid with respect to UserCanRepresentEitherAUserOrAGroup
  */
  public static UserCanRepresentEitherAUserOrAGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserCanRepresentEitherAUserOrAGroup.class);
  }

 /**
  * Convert an instance of UserCanRepresentEitherAUserOrAGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

