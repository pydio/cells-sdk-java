/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RegistryItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class RegistryItem {
    public static final String SERIALIZED_NAME_ADJACENTS = "adjacents";
    @SerializedName(SERIALIZED_NAME_ADJACENTS)
    @javax.annotation.Nullable
    private List<RegistryItem> adjacents = new ArrayList<>();

    public static final String SERIALIZED_NAME_DAO = "dao";
    @SerializedName(SERIALIZED_NAME_DAO)
    @javax.annotation.Nullable
    private RegistryDao dao;

    public static final String SERIALIZED_NAME_EDGE = "edge";
    @SerializedName(SERIALIZED_NAME_EDGE)
    @javax.annotation.Nullable
    private RegistryEdge edge;

    public static final String SERIALIZED_NAME_GENERIC = "generic";
    @SerializedName(SERIALIZED_NAME_GENERIC)
    @javax.annotation.Nullable
    private RegistryGeneric generic;

    public static final String SERIALIZED_NAME_ID = "id";
    @SerializedName(SERIALIZED_NAME_ID)
    @javax.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_METADATA = "metadata";
    @SerializedName(SERIALIZED_NAME_METADATA)
    @javax.annotation.Nullable
    private Map<String, String> metadata = new HashMap<>();

    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_NODE = "node";
    @SerializedName(SERIALIZED_NAME_NODE)
    @javax.annotation.Nullable
    private RegistryNode node;

    public static final String SERIALIZED_NAME_SERVER = "server";
    @SerializedName(SERIALIZED_NAME_SERVER)
    @javax.annotation.Nullable
    private RegistryServer server;

    public static final String SERIALIZED_NAME_SERVICE = "service";
    @SerializedName(SERIALIZED_NAME_SERVICE)
    @javax.annotation.Nullable
    private RegistryService service;

    public RegistryItem() {
    }

    public RegistryItem adjacents(@javax.annotation.Nullable List<RegistryItem> adjacents) {
        this.adjacents = adjacents;
        return this;
    }

    public RegistryItem addAdjacentsItem(RegistryItem adjacentsItem) {
        if (this.adjacents == null) {
            this.adjacents = new ArrayList<>();
        }
        this.adjacents.add(adjacentsItem);
        return this;
    }

    /**
     * Get adjacents
     *
     * @return adjacents
     */
    @javax.annotation.Nullable
    public List<RegistryItem> getAdjacents() {
        return adjacents;
    }

    public void setAdjacents(@javax.annotation.Nullable List<RegistryItem> adjacents) {
        this.adjacents = adjacents;
    }


    public RegistryItem dao(@javax.annotation.Nullable RegistryDao dao) {
        this.dao = dao;
        return this;
    }

    /**
     * Get dao
     *
     * @return dao
     */
    @javax.annotation.Nullable
    public RegistryDao getDao() {
        return dao;
    }

    public void setDao(@javax.annotation.Nullable RegistryDao dao) {
        this.dao = dao;
    }


    public RegistryItem edge(@javax.annotation.Nullable RegistryEdge edge) {
        this.edge = edge;
        return this;
    }

    /**
     * Get edge
     *
     * @return edge
     */
    @javax.annotation.Nullable
    public RegistryEdge getEdge() {
        return edge;
    }

    public void setEdge(@javax.annotation.Nullable RegistryEdge edge) {
        this.edge = edge;
    }


    public RegistryItem generic(@javax.annotation.Nullable RegistryGeneric generic) {
        this.generic = generic;
        return this;
    }

    /**
     * Get generic
     *
     * @return generic
     */
    @javax.annotation.Nullable
    public RegistryGeneric getGeneric() {
        return generic;
    }

    public void setGeneric(@javax.annotation.Nullable RegistryGeneric generic) {
        this.generic = generic;
    }


    public RegistryItem id(@javax.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @javax.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@javax.annotation.Nullable String id) {
        this.id = id;
    }


    public RegistryItem metadata(@javax.annotation.Nullable Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }

    public RegistryItem putMetadataItem(String key, String metadataItem) {
        if (this.metadata == null) {
            this.metadata = new HashMap<>();
        }
        this.metadata.put(key, metadataItem);
        return this;
    }

    /**
     * Get metadata
     *
     * @return metadata
     */
    @javax.annotation.Nullable
    public Map<String, String> getMetadata() {
        return metadata;
    }

    public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
        this.metadata = metadata;
    }


    public RegistryItem name(@javax.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nullable String name) {
        this.name = name;
    }


    public RegistryItem node(@javax.annotation.Nullable RegistryNode node) {
        this.node = node;
        return this;
    }

    /**
     * Get node
     *
     * @return node
     */
    @javax.annotation.Nullable
    public RegistryNode getNode() {
        return node;
    }

    public void setNode(@javax.annotation.Nullable RegistryNode node) {
        this.node = node;
    }


    public RegistryItem server(@javax.annotation.Nullable RegistryServer server) {
        this.server = server;
        return this;
    }

    /**
     * Get server
     *
     * @return server
     */
    @javax.annotation.Nullable
    public RegistryServer getServer() {
        return server;
    }

    public void setServer(@javax.annotation.Nullable RegistryServer server) {
        this.server = server;
    }


    public RegistryItem service(@javax.annotation.Nullable RegistryService service) {
        this.service = service;
        return this;
    }

    /**
     * Get service
     *
     * @return service
     */
    @javax.annotation.Nullable
    public RegistryService getService() {
        return service;
    }

    public void setService(@javax.annotation.Nullable RegistryService service) {
        this.service = service;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RegistryItem registryItem = (RegistryItem) o;
        return Objects.equals(this.adjacents, registryItem.adjacents) &&
                Objects.equals(this.dao, registryItem.dao) &&
                Objects.equals(this.edge, registryItem.edge) &&
                Objects.equals(this.generic, registryItem.generic) &&
                Objects.equals(this.id, registryItem.id) &&
                Objects.equals(this.metadata, registryItem.metadata) &&
                Objects.equals(this.name, registryItem.name) &&
                Objects.equals(this.node, registryItem.node) &&
                Objects.equals(this.server, registryItem.server) &&
                Objects.equals(this.service, registryItem.service);
    }

    @Override
    public int hashCode() {
        return Objects.hash(adjacents, dao, edge, generic, id, metadata, name, node, server, service);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RegistryItem {\n");
        sb.append("    adjacents: ").append(toIndentedString(adjacents)).append("\n");
        sb.append("    dao: ").append(toIndentedString(dao)).append("\n");
        sb.append("    edge: ").append(toIndentedString(edge)).append("\n");
        sb.append("    generic: ").append(toIndentedString(generic)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    node: ").append(toIndentedString(node)).append("\n");
        sb.append("    server: ").append(toIndentedString(server)).append("\n");
        sb.append("    service: ").append(toIndentedString(service)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("adjacents");
        openapiFields.add("dao");
        openapiFields.add("edge");
        openapiFields.add("generic");
        openapiFields.add("id");
        openapiFields.add("metadata");
        openapiFields.add("name");
        openapiFields.add("node");
        openapiFields.add("server");
        openapiFields.add("service");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RegistryItem
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RegistryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in RegistryItem is not found in the empty JSON string", RegistryItem.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RegistryItem.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("adjacents") != null && !jsonObj.get("adjacents").isJsonNull()) {
            JsonArray jsonArrayadjacents = jsonObj.getAsJsonArray("adjacents");
            if (jsonArrayadjacents != null) {
                // ensure the json data is an array
                if (!jsonObj.get("adjacents").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `adjacents` to be an array in the JSON string but got `%s`", jsonObj.get("adjacents").toString()));
                }

                // validate the optional field `adjacents` (array)
                for (int i = 0; i < jsonArrayadjacents.size(); i++) {
                    RegistryItem.validateJsonElement(jsonArrayadjacents.get(i));
                }
                ;
            }
        }
        // validate the optional field `dao`
        if (jsonObj.get("dao") != null && !jsonObj.get("dao").isJsonNull()) {
            RegistryDao.validateJsonElement(jsonObj.get("dao"));
        }
        // validate the optional field `edge`
        if (jsonObj.get("edge") != null && !jsonObj.get("edge").isJsonNull()) {
            RegistryEdge.validateJsonElement(jsonObj.get("edge"));
        }
        // validate the optional field `generic`
        if (jsonObj.get("generic") != null && !jsonObj.get("generic").isJsonNull()) {
            RegistryGeneric.validateJsonElement(jsonObj.get("generic"));
        }
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
        }
        // validate the optional field `node`
        if (jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) {
            RegistryNode.validateJsonElement(jsonObj.get("node"));
        }
        // validate the optional field `server`
        if (jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) {
            RegistryServer.validateJsonElement(jsonObj.get("server"));
        }
        // validate the optional field `service`
        if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
            RegistryService.validateJsonElement(jsonObj.get("service"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RegistryItem.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RegistryItem' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RegistryItem> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(RegistryItem.class));

            return (TypeAdapter<T>) new TypeAdapter<RegistryItem>() {
                @Override
                public void write(JsonWriter out, RegistryItem value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public RegistryItem read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of RegistryItem given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RegistryItem
     * @throws IOException if the JSON string is invalid with respect to RegistryItem
     */
    public static RegistryItem fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RegistryItem.class);
    }

    /**
     * Convert an instance of RegistryItem to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

