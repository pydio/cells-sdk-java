/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * JobsTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class JobsTask {
    public static final String SERIALIZED_NAME_ACTIONS_LOGS = "ActionsLogs";
    @SerializedName(SERIALIZED_NAME_ACTIONS_LOGS)
    @javax.annotation.Nullable
    private List<JobsActionLog> actionsLogs = new ArrayList<>();

    public static final String SERIALIZED_NAME_CAN_PAUSE = "CanPause";
    @SerializedName(SERIALIZED_NAME_CAN_PAUSE)
    @javax.annotation.Nullable
    private Boolean canPause;

    public static final String SERIALIZED_NAME_CAN_STOP = "CanStop";
    @SerializedName(SERIALIZED_NAME_CAN_STOP)
    @javax.annotation.Nullable
    private Boolean canStop;

    public static final String SERIALIZED_NAME_END_TIME = "EndTime";
    @SerializedName(SERIALIZED_NAME_END_TIME)
    @javax.annotation.Nullable
    private Integer endTime;

    public static final String SERIALIZED_NAME_HAS_PROGRESS = "HasProgress";
    @SerializedName(SERIALIZED_NAME_HAS_PROGRESS)
    @javax.annotation.Nullable
    private Boolean hasProgress;

    public static final String SERIALIZED_NAME_I_D = "ID";
    @SerializedName(SERIALIZED_NAME_I_D)
    @javax.annotation.Nullable
    private String ID;

    public static final String SERIALIZED_NAME_JOB_I_D = "JobID";
    @SerializedName(SERIALIZED_NAME_JOB_I_D)
    @javax.annotation.Nullable
    private String jobID;

    public static final String SERIALIZED_NAME_PROGRESS = "Progress";
    @SerializedName(SERIALIZED_NAME_PROGRESS)
    @javax.annotation.Nullable
    private Float progress;

    public static final String SERIALIZED_NAME_START_TIME = "StartTime";
    @SerializedName(SERIALIZED_NAME_START_TIME)
    @javax.annotation.Nullable
    private Integer startTime;

    public static final String SERIALIZED_NAME_STATUS = "Status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    @javax.annotation.Nullable
    private JobsTaskStatus status = JobsTaskStatus.UNKNOWN;

    public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
    @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
    @javax.annotation.Nullable
    private String statusMessage;

    public static final String SERIALIZED_NAME_TRIGGER_OWNER = "TriggerOwner";
    @SerializedName(SERIALIZED_NAME_TRIGGER_OWNER)
    @javax.annotation.Nullable
    private String triggerOwner;

    public JobsTask() {
    }

    public JobsTask actionsLogs(@javax.annotation.Nullable List<JobsActionLog> actionsLogs) {
        this.actionsLogs = actionsLogs;
        return this;
    }

    public JobsTask addActionsLogsItem(JobsActionLog actionsLogsItem) {
        if (this.actionsLogs == null) {
            this.actionsLogs = new ArrayList<>();
        }
        this.actionsLogs.add(actionsLogsItem);
        return this;
    }

    /**
     * Get actionsLogs
     *
     * @return actionsLogs
     */
    @javax.annotation.Nullable
    public List<JobsActionLog> getActionsLogs() {
        return actionsLogs;
    }

    public void setActionsLogs(@javax.annotation.Nullable List<JobsActionLog> actionsLogs) {
        this.actionsLogs = actionsLogs;
    }


    public JobsTask canPause(@javax.annotation.Nullable Boolean canPause) {
        this.canPause = canPause;
        return this;
    }

    /**
     * Get canPause
     *
     * @return canPause
     */
    @javax.annotation.Nullable
    public Boolean getCanPause() {
        return canPause;
    }

    public void setCanPause(@javax.annotation.Nullable Boolean canPause) {
        this.canPause = canPause;
    }


    public JobsTask canStop(@javax.annotation.Nullable Boolean canStop) {
        this.canStop = canStop;
        return this;
    }

    /**
     * Get canStop
     *
     * @return canStop
     */
    @javax.annotation.Nullable
    public Boolean getCanStop() {
        return canStop;
    }

    public void setCanStop(@javax.annotation.Nullable Boolean canStop) {
        this.canStop = canStop;
    }


    public JobsTask endTime(@javax.annotation.Nullable Integer endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     *
     * @return endTime
     */
    @javax.annotation.Nullable
    public Integer getEndTime() {
        return endTime;
    }

    public void setEndTime(@javax.annotation.Nullable Integer endTime) {
        this.endTime = endTime;
    }


    public JobsTask hasProgress(@javax.annotation.Nullable Boolean hasProgress) {
        this.hasProgress = hasProgress;
        return this;
    }

    /**
     * Get hasProgress
     *
     * @return hasProgress
     */
    @javax.annotation.Nullable
    public Boolean getHasProgress() {
        return hasProgress;
    }

    public void setHasProgress(@javax.annotation.Nullable Boolean hasProgress) {
        this.hasProgress = hasProgress;
    }


    public JobsTask ID(@javax.annotation.Nullable String ID) {
        this.ID = ID;
        return this;
    }

    /**
     * Get ID
     *
     * @return ID
     */
    @javax.annotation.Nullable
    public String getID() {
        return ID;
    }

    public void setID(@javax.annotation.Nullable String ID) {
        this.ID = ID;
    }


    public JobsTask jobID(@javax.annotation.Nullable String jobID) {
        this.jobID = jobID;
        return this;
    }

    /**
     * Get jobID
     *
     * @return jobID
     */
    @javax.annotation.Nullable
    public String getJobID() {
        return jobID;
    }

    public void setJobID(@javax.annotation.Nullable String jobID) {
        this.jobID = jobID;
    }


    public JobsTask progress(@javax.annotation.Nullable Float progress) {
        this.progress = progress;
        return this;
    }

    /**
     * Get progress
     *
     * @return progress
     */
    @javax.annotation.Nullable
    public Float getProgress() {
        return progress;
    }

    public void setProgress(@javax.annotation.Nullable Float progress) {
        this.progress = progress;
    }


    public JobsTask startTime(@javax.annotation.Nullable Integer startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get startTime
     *
     * @return startTime
     */
    @javax.annotation.Nullable
    public Integer getStartTime() {
        return startTime;
    }

    public void setStartTime(@javax.annotation.Nullable Integer startTime) {
        this.startTime = startTime;
    }


    public JobsTask status(@javax.annotation.Nullable JobsTaskStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @javax.annotation.Nullable
    public JobsTaskStatus getStatus() {
        return status;
    }

    public void setStatus(@javax.annotation.Nullable JobsTaskStatus status) {
        this.status = status;
    }


    public JobsTask statusMessage(@javax.annotation.Nullable String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }

    /**
     * Get statusMessage
     *
     * @return statusMessage
     */
    @javax.annotation.Nullable
    public String getStatusMessage() {
        return statusMessage;
    }

    public void setStatusMessage(@javax.annotation.Nullable String statusMessage) {
        this.statusMessage = statusMessage;
    }


    public JobsTask triggerOwner(@javax.annotation.Nullable String triggerOwner) {
        this.triggerOwner = triggerOwner;
        return this;
    }

    /**
     * Get triggerOwner
     *
     * @return triggerOwner
     */
    @javax.annotation.Nullable
    public String getTriggerOwner() {
        return triggerOwner;
    }

    public void setTriggerOwner(@javax.annotation.Nullable String triggerOwner) {
        this.triggerOwner = triggerOwner;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobsTask jobsTask = (JobsTask) o;
        return Objects.equals(this.actionsLogs, jobsTask.actionsLogs) &&
                Objects.equals(this.canPause, jobsTask.canPause) &&
                Objects.equals(this.canStop, jobsTask.canStop) &&
                Objects.equals(this.endTime, jobsTask.endTime) &&
                Objects.equals(this.hasProgress, jobsTask.hasProgress) &&
                Objects.equals(this.ID, jobsTask.ID) &&
                Objects.equals(this.jobID, jobsTask.jobID) &&
                Objects.equals(this.progress, jobsTask.progress) &&
                Objects.equals(this.startTime, jobsTask.startTime) &&
                Objects.equals(this.status, jobsTask.status) &&
                Objects.equals(this.statusMessage, jobsTask.statusMessage) &&
                Objects.equals(this.triggerOwner, jobsTask.triggerOwner);
    }

    @Override
    public int hashCode() {
        return Objects.hash(actionsLogs, canPause, canStop, endTime, hasProgress, ID, jobID, progress, startTime, status, statusMessage, triggerOwner);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobsTask {\n");
        sb.append("    actionsLogs: ").append(toIndentedString(actionsLogs)).append("\n");
        sb.append("    canPause: ").append(toIndentedString(canPause)).append("\n");
        sb.append("    canStop: ").append(toIndentedString(canStop)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    hasProgress: ").append(toIndentedString(hasProgress)).append("\n");
        sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
        sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
        sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
        sb.append("    triggerOwner: ").append(toIndentedString(triggerOwner)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("ActionsLogs");
        openapiFields.add("CanPause");
        openapiFields.add("CanStop");
        openapiFields.add("EndTime");
        openapiFields.add("HasProgress");
        openapiFields.add("ID");
        openapiFields.add("JobID");
        openapiFields.add("Progress");
        openapiFields.add("StartTime");
        openapiFields.add("Status");
        openapiFields.add("StatusMessage");
        openapiFields.add("TriggerOwner");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to JobsTask
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!JobsTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in JobsTask is not found in the empty JSON string", JobsTask.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!JobsTask.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("ActionsLogs") != null && !jsonObj.get("ActionsLogs").isJsonNull()) {
            JsonArray jsonArrayactionsLogs = jsonObj.getAsJsonArray("ActionsLogs");
            if (jsonArrayactionsLogs != null) {
                // ensure the json data is an array
                if (!jsonObj.get("ActionsLogs").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `ActionsLogs` to be an array in the JSON string but got `%s`", jsonObj.get("ActionsLogs").toString()));
                }

                // validate the optional field `ActionsLogs` (array)
                for (int i = 0; i < jsonArrayactionsLogs.size(); i++) {
                    JobsActionLog.validateJsonElement(jsonArrayactionsLogs.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
        }
        if ((jsonObj.get("JobID") != null && !jsonObj.get("JobID").isJsonNull()) && !jsonObj.get("JobID").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `JobID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobID").toString()));
        }
        // validate the optional field `Status`
        if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
            JobsTaskStatus.validateJsonElement(jsonObj.get("Status"));
        }
        if ((jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) && !jsonObj.get("StatusMessage").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `StatusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusMessage").toString()));
        }
        if ((jsonObj.get("TriggerOwner") != null && !jsonObj.get("TriggerOwner").isJsonNull()) && !jsonObj.get("TriggerOwner").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `TriggerOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TriggerOwner").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JobsTask.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JobsTask' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<JobsTask> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(JobsTask.class));

            return (TypeAdapter<T>) new TypeAdapter<JobsTask>() {
                @Override
                public void write(JsonWriter out, JobsTask value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public JobsTask read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of JobsTask given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of JobsTask
     * @throws IOException if the JSON string is invalid with respect to JobsTask
     */
    public static JobsTask fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JobsTask.class);
    }

    /**
     * Convert an instance of JobsTask to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

