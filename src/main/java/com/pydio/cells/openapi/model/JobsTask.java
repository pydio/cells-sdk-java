/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * JobsTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-06T14:22:40.613083+01:00[Europe/Berlin]")
public class JobsTask {
  public static final String SERIALIZED_NAME_ACTIONS_LOGS = "ActionsLogs";
  @SerializedName(SERIALIZED_NAME_ACTIONS_LOGS)
  private List<JobsActionLog> actionsLogs = null;

  public static final String SERIALIZED_NAME_CAN_PAUSE = "CanPause";
  @SerializedName(SERIALIZED_NAME_CAN_PAUSE)
  private Boolean canPause;

  public static final String SERIALIZED_NAME_CAN_STOP = "CanStop";
  @SerializedName(SERIALIZED_NAME_CAN_STOP)
  private Boolean canStop;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private Integer endTime;

  public static final String SERIALIZED_NAME_HAS_PROGRESS = "HasProgress";
  @SerializedName(SERIALIZED_NAME_HAS_PROGRESS)
  private Boolean hasProgress;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_JOB_I_D = "JobID";
  @SerializedName(SERIALIZED_NAME_JOB_I_D)
  private String jobID;

  public static final String SERIALIZED_NAME_PROGRESS = "Progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Float progress;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Integer startTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobsTaskStatus status = JobsTaskStatus.UNKNOWN;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TRIGGER_OWNER = "TriggerOwner";
  @SerializedName(SERIALIZED_NAME_TRIGGER_OWNER)
  private String triggerOwner;

  public JobsTask() {
  }

  public JobsTask actionsLogs(List<JobsActionLog> actionsLogs) {
    
    this.actionsLogs = actionsLogs;
    return this;
  }

  public JobsTask addActionsLogsItem(JobsActionLog actionsLogsItem) {
    if (this.actionsLogs == null) {
      this.actionsLogs = new ArrayList<>();
    }
    this.actionsLogs.add(actionsLogsItem);
    return this;
  }

   /**
   * Get actionsLogs
   * @return actionsLogs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobsActionLog> getActionsLogs() {
    return actionsLogs;
  }


  public void setActionsLogs(List<JobsActionLog> actionsLogs) {
    this.actionsLogs = actionsLogs;
  }


  public JobsTask canPause(Boolean canPause) {
    
    this.canPause = canPause;
    return this;
  }

   /**
   * Get canPause
   * @return canPause
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanPause() {
    return canPause;
  }


  public void setCanPause(Boolean canPause) {
    this.canPause = canPause;
  }


  public JobsTask canStop(Boolean canStop) {
    
    this.canStop = canStop;
    return this;
  }

   /**
   * Get canStop
   * @return canStop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanStop() {
    return canStop;
  }


  public void setCanStop(Boolean canStop) {
    this.canStop = canStop;
  }


  public JobsTask endTime(Integer endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEndTime() {
    return endTime;
  }


  public void setEndTime(Integer endTime) {
    this.endTime = endTime;
  }


  public JobsTask hasProgress(Boolean hasProgress) {
    
    this.hasProgress = hasProgress;
    return this;
  }

   /**
   * Get hasProgress
   * @return hasProgress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHasProgress() {
    return hasProgress;
  }


  public void setHasProgress(Boolean hasProgress) {
    this.hasProgress = hasProgress;
  }


  public JobsTask ID(String ID) {
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getID() {
    return ID;
  }


  public void setID(String ID) {
    this.ID = ID;
  }


  public JobsTask jobID(String jobID) {
    
    this.jobID = jobID;
    return this;
  }

   /**
   * Get jobID
   * @return jobID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobID() {
    return jobID;
  }


  public void setJobID(String jobID) {
    this.jobID = jobID;
  }


  public JobsTask progress(Float progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getProgress() {
    return progress;
  }


  public void setProgress(Float progress) {
    this.progress = progress;
  }


  public JobsTask startTime(Integer startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStartTime() {
    return startTime;
  }


  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }


  public JobsTask status(JobsTaskStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsTaskStatus getStatus() {
    return status;
  }


  public void setStatus(JobsTaskStatus status) {
    this.status = status;
  }


  public JobsTask statusMessage(String statusMessage) {
    
    this.statusMessage = statusMessage;
    return this;
  }

   /**
   * Get statusMessage
   * @return statusMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatusMessage() {
    return statusMessage;
  }


  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public JobsTask triggerOwner(String triggerOwner) {
    
    this.triggerOwner = triggerOwner;
    return this;
  }

   /**
   * Get triggerOwner
   * @return triggerOwner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTriggerOwner() {
    return triggerOwner;
  }


  public void setTriggerOwner(String triggerOwner) {
    this.triggerOwner = triggerOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsTask jobsTask = (JobsTask) o;
    return Objects.equals(this.actionsLogs, jobsTask.actionsLogs) &&
        Objects.equals(this.canPause, jobsTask.canPause) &&
        Objects.equals(this.canStop, jobsTask.canStop) &&
        Objects.equals(this.endTime, jobsTask.endTime) &&
        Objects.equals(this.hasProgress, jobsTask.hasProgress) &&
        Objects.equals(this.ID, jobsTask.ID) &&
        Objects.equals(this.jobID, jobsTask.jobID) &&
        Objects.equals(this.progress, jobsTask.progress) &&
        Objects.equals(this.startTime, jobsTask.startTime) &&
        Objects.equals(this.status, jobsTask.status) &&
        Objects.equals(this.statusMessage, jobsTask.statusMessage) &&
        Objects.equals(this.triggerOwner, jobsTask.triggerOwner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionsLogs, canPause, canStop, endTime, hasProgress, ID, jobID, progress, startTime, status, statusMessage, triggerOwner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsTask {\n");
    sb.append("    actionsLogs: ").append(toIndentedString(actionsLogs)).append("\n");
    sb.append("    canPause: ").append(toIndentedString(canPause)).append("\n");
    sb.append("    canStop: ").append(toIndentedString(canStop)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    hasProgress: ").append(toIndentedString(hasProgress)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    triggerOwner: ").append(toIndentedString(triggerOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionsLogs");
    openapiFields.add("CanPause");
    openapiFields.add("CanStop");
    openapiFields.add("EndTime");
    openapiFields.add("HasProgress");
    openapiFields.add("ID");
    openapiFields.add("JobID");
    openapiFields.add("Progress");
    openapiFields.add("StartTime");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");
    openapiFields.add("TriggerOwner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobsTask
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobsTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobsTask is not found in the empty JSON string", JobsTask.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JobsTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsTask` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ActionsLogs") != null && !jsonObj.get("ActionsLogs").isJsonNull()) {
        JsonArray jsonArrayactionsLogs = jsonObj.getAsJsonArray("ActionsLogs");
        if (jsonArrayactionsLogs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ActionsLogs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ActionsLogs` to be an array in the JSON string but got `%s`", jsonObj.get("ActionsLogs").toString()));
          }

          // validate the optional field `ActionsLogs` (array)
          for (int i = 0; i < jsonArrayactionsLogs.size(); i++) {
            JobsActionLog.validateJsonObject(jsonArrayactionsLogs.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("JobID") != null && !jsonObj.get("JobID").isJsonNull()) && !jsonObj.get("JobID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobID").toString()));
      }
      if ((jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) && !jsonObj.get("StatusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusMessage").toString()));
      }
      if ((jsonObj.get("TriggerOwner") != null && !jsonObj.get("TriggerOwner").isJsonNull()) && !jsonObj.get("TriggerOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TriggerOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TriggerOwner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobsTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobsTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobsTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobsTask.class));

       return (TypeAdapter<T>) new TypeAdapter<JobsTask>() {
           @Override
           public void write(JsonWriter out, JobsTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobsTask read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobsTask given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobsTask
  * @throws IOException if the JSON string is invalid with respect to JobsTask
  */
  public static JobsTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobsTask.class);
  }

 /**
  * Convert an instance of JobsTask to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

