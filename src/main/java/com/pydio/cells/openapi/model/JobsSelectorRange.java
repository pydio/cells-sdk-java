/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * JobsSelectorRange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class JobsSelectorRange {
    public static final String SERIALIZED_NAME_LIMIT = "Limit";
    @SerializedName(SERIALIZED_NAME_LIMIT)
    @javax.annotation.Nullable
    private String limit;

    public static final String SERIALIZED_NAME_OFFSET = "Offset";
    @SerializedName(SERIALIZED_NAME_OFFSET)
    @javax.annotation.Nullable
    private String offset;

    public static final String SERIALIZED_NAME_ORDER_BY = "OrderBy";
    @SerializedName(SERIALIZED_NAME_ORDER_BY)
    @javax.annotation.Nullable
    private String orderBy;

    public static final String SERIALIZED_NAME_ORDER_DIR = "OrderDir";
    @SerializedName(SERIALIZED_NAME_ORDER_DIR)
    @javax.annotation.Nullable
    private String orderDir;

    public JobsSelectorRange() {
    }

    public JobsSelectorRange limit(@javax.annotation.Nullable String limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @javax.annotation.Nullable
    public String getLimit() {
        return limit;
    }

    public void setLimit(@javax.annotation.Nullable String limit) {
        this.limit = limit;
    }


    public JobsSelectorRange offset(@javax.annotation.Nullable String offset) {
        this.offset = offset;
        return this;
    }

    /**
     * Get offset
     *
     * @return offset
     */
    @javax.annotation.Nullable
    public String getOffset() {
        return offset;
    }

    public void setOffset(@javax.annotation.Nullable String offset) {
        this.offset = offset;
    }


    public JobsSelectorRange orderBy(@javax.annotation.Nullable String orderBy) {
        this.orderBy = orderBy;
        return this;
    }

    /**
     * Get orderBy
     *
     * @return orderBy
     */
    @javax.annotation.Nullable
    public String getOrderBy() {
        return orderBy;
    }

    public void setOrderBy(@javax.annotation.Nullable String orderBy) {
        this.orderBy = orderBy;
    }


    public JobsSelectorRange orderDir(@javax.annotation.Nullable String orderDir) {
        this.orderDir = orderDir;
        return this;
    }

    /**
     * Get orderDir
     *
     * @return orderDir
     */
    @javax.annotation.Nullable
    public String getOrderDir() {
        return orderDir;
    }

    public void setOrderDir(@javax.annotation.Nullable String orderDir) {
        this.orderDir = orderDir;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobsSelectorRange jobsSelectorRange = (JobsSelectorRange) o;
        return Objects.equals(this.limit, jobsSelectorRange.limit) &&
                Objects.equals(this.offset, jobsSelectorRange.offset) &&
                Objects.equals(this.orderBy, jobsSelectorRange.orderBy) &&
                Objects.equals(this.orderDir, jobsSelectorRange.orderDir);
    }

    @Override
    public int hashCode() {
        return Objects.hash(limit, offset, orderBy, orderDir);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobsSelectorRange {\n");
        sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
        sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
        sb.append("    orderDir: ").append(toIndentedString(orderDir)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Limit");
        openapiFields.add("Offset");
        openapiFields.add("OrderBy");
        openapiFields.add("OrderDir");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to JobsSelectorRange
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!JobsSelectorRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in JobsSelectorRange is not found in the empty JSON string", JobsSelectorRange.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!JobsSelectorRange.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsSelectorRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) && !jsonObj.get("Limit").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Limit").toString()));
        }
        if ((jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) && !jsonObj.get("Offset").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Offset").toString()));
        }
        if ((jsonObj.get("OrderBy") != null && !jsonObj.get("OrderBy").isJsonNull()) && !jsonObj.get("OrderBy").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `OrderBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderBy").toString()));
        }
        if ((jsonObj.get("OrderDir") != null && !jsonObj.get("OrderDir").isJsonNull()) && !jsonObj.get("OrderDir").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `OrderDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderDir").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JobsSelectorRange.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JobsSelectorRange' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<JobsSelectorRange> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(JobsSelectorRange.class));

            return (TypeAdapter<T>) new TypeAdapter<JobsSelectorRange>() {
                @Override
                public void write(JsonWriter out, JobsSelectorRange value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public JobsSelectorRange read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of JobsSelectorRange given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of JobsSelectorRange
     * @throws IOException if the JSON string is invalid with respect to JobsSelectorRange
     */
    public static JobsSelectorRange fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JobsSelectorRange.class);
    }

    /**
     * Convert an instance of JobsSelectorRange to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

