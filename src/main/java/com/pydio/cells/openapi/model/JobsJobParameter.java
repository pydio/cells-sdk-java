/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * JobsJobParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class JobsJobParameter {
    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_JSON_CHOICES = "JsonChoices";
    @SerializedName(SERIALIZED_NAME_JSON_CHOICES)
    @javax.annotation.Nullable
    private String jsonChoices;

    public static final String SERIALIZED_NAME_MANDATORY = "Mandatory";
    @SerializedName(SERIALIZED_NAME_MANDATORY)
    @javax.annotation.Nullable
    private Boolean mandatory;

    public static final String SERIALIZED_NAME_NAME = "Name";
    @SerializedName(SERIALIZED_NAME_NAME)
    @javax.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_TYPE = "Type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    @javax.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_VALUE = "Value";
    @SerializedName(SERIALIZED_NAME_VALUE)
    @javax.annotation.Nullable
    private String value;

    public JobsJobParameter() {
    }

    public JobsJobParameter description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }


    public JobsJobParameter jsonChoices(@javax.annotation.Nullable String jsonChoices) {
        this.jsonChoices = jsonChoices;
        return this;
    }

    /**
     * Get jsonChoices
     *
     * @return jsonChoices
     */
    @javax.annotation.Nullable
    public String getJsonChoices() {
        return jsonChoices;
    }

    public void setJsonChoices(@javax.annotation.Nullable String jsonChoices) {
        this.jsonChoices = jsonChoices;
    }


    public JobsJobParameter mandatory(@javax.annotation.Nullable Boolean mandatory) {
        this.mandatory = mandatory;
        return this;
    }

    /**
     * Get mandatory
     *
     * @return mandatory
     */
    @javax.annotation.Nullable
    public Boolean getMandatory() {
        return mandatory;
    }

    public void setMandatory(@javax.annotation.Nullable Boolean mandatory) {
        this.mandatory = mandatory;
    }


    public JobsJobParameter name(@javax.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@javax.annotation.Nullable String name) {
        this.name = name;
    }


    public JobsJobParameter type(@javax.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @javax.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@javax.annotation.Nullable String type) {
        this.type = type;
    }


    public JobsJobParameter value(@javax.annotation.Nullable String value) {
        this.value = value;
        return this;
    }

    /**
     * Get value
     *
     * @return value
     */
    @javax.annotation.Nullable
    public String getValue() {
        return value;
    }

    public void setValue(@javax.annotation.Nullable String value) {
        this.value = value;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobsJobParameter jobsJobParameter = (JobsJobParameter) o;
        return Objects.equals(this.description, jobsJobParameter.description) &&
                Objects.equals(this.jsonChoices, jobsJobParameter.jsonChoices) &&
                Objects.equals(this.mandatory, jobsJobParameter.mandatory) &&
                Objects.equals(this.name, jobsJobParameter.name) &&
                Objects.equals(this.type, jobsJobParameter.type) &&
                Objects.equals(this.value, jobsJobParameter.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(description, jsonChoices, mandatory, name, type, value);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobsJobParameter {\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    jsonChoices: ").append(toIndentedString(jsonChoices)).append("\n");
        sb.append("    mandatory: ").append(toIndentedString(mandatory)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Description");
        openapiFields.add("JsonChoices");
        openapiFields.add("Mandatory");
        openapiFields.add("Name");
        openapiFields.add("Type");
        openapiFields.add("Value");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to JobsJobParameter
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!JobsJobParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in JobsJobParameter is not found in the empty JSON string", JobsJobParameter.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!JobsJobParameter.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsJobParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
        }
        if ((jsonObj.get("JsonChoices") != null && !jsonObj.get("JsonChoices").isJsonNull()) && !jsonObj.get("JsonChoices").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `JsonChoices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JsonChoices").toString()));
        }
        if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
        }
        if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
        }
        if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JobsJobParameter.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JobsJobParameter' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<JobsJobParameter> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(JobsJobParameter.class));

            return (TypeAdapter<T>) new TypeAdapter<JobsJobParameter>() {
                @Override
                public void write(JsonWriter out, JobsJobParameter value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public JobsJobParameter read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of JobsJobParameter given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of JobsJobParameter
     * @throws IOException if the JSON string is invalid with respect to JobsJobParameter
     */
    public static JobsJobParameter fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JobsJobParameter.class);
    }

    /**
     * Convert an instance of JobsJobParameter to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

