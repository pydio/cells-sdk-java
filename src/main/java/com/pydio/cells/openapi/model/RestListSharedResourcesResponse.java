/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RestListSharedResourcesResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-16T11:01:01.368056162+01:00[Europe/Berlin]", comments = "Generator version: 7.4.0")
public class RestListSharedResourcesResponse {
  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<ListSharedResourcesResponseSharedResource> resources;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public RestListSharedResourcesResponse() {
  }

  public RestListSharedResourcesResponse limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public RestListSharedResourcesResponse offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public RestListSharedResourcesResponse resources(List<ListSharedResourcesResponseSharedResource> resources) {
    this.resources = resources;
    return this;
  }

  public RestListSharedResourcesResponse addResourcesItem(ListSharedResourcesResponseSharedResource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @javax.annotation.Nullable
  public List<ListSharedResourcesResponseSharedResource> getResources() {
    return resources;
  }

  public void setResources(List<ListSharedResourcesResponseSharedResource> resources) {
    this.resources = resources;
  }


  public RestListSharedResourcesResponse total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestListSharedResourcesResponse restListSharedResourcesResponse = (RestListSharedResourcesResponse) o;
    return Objects.equals(this.limit, restListSharedResourcesResponse.limit) &&
        Objects.equals(this.offset, restListSharedResourcesResponse.offset) &&
        Objects.equals(this.resources, restListSharedResourcesResponse.resources) &&
        Objects.equals(this.total, restListSharedResourcesResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, offset, resources, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestListSharedResourcesResponse {\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Limit");
    openapiFields.add("Offset");
    openapiFields.add("Resources");
    openapiFields.add("Total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestListSharedResourcesResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestListSharedResourcesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestListSharedResourcesResponse is not found in the empty JSON string", RestListSharedResourcesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestListSharedResourcesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestListSharedResourcesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Resources") != null && !jsonObj.get("Resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("Resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Resources` to be an array in the JSON string but got `%s`", jsonObj.get("Resources").toString()));
          }

          // validate the optional field `Resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            ListSharedResourcesResponseSharedResource.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestListSharedResourcesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestListSharedResourcesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestListSharedResourcesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestListSharedResourcesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RestListSharedResourcesResponse>() {
           @Override
           public void write(JsonWriter out, RestListSharedResourcesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestListSharedResourcesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestListSharedResourcesResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestListSharedResourcesResponse
  * @throws IOException if the JSON string is invalid with respect to RestListSharedResourcesResponse
  */
  public static RestListSharedResourcesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestListSharedResourcesResponse.class);
  }

 /**
  * Convert an instance of RestListSharedResourcesResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

