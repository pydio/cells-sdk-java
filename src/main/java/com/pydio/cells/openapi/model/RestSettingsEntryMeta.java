/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RestSettingsEntryMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-16T11:01:01.368056162+01:00[Europe/Berlin]", comments = "Generator version: 7.4.0")
public class RestSettingsEntryMeta {
  public static final String SERIALIZED_NAME_ADVANCED = "advanced";
  @SerializedName(SERIALIZED_NAME_ADVANCED)
  private Boolean advanced;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_ICON_CLASS = "icon_class";
  @SerializedName(SERIALIZED_NAME_ICON_CLASS)
  private String iconClass;

  public static final String SERIALIZED_NAME_INDEXED = "indexed";
  @SerializedName(SERIALIZED_NAME_INDEXED)
  private List<String> indexed;

  public static final String SERIALIZED_NAME_PROPS = "props";
  @SerializedName(SERIALIZED_NAME_PROPS)
  private String props;

  public RestSettingsEntryMeta() {
  }

  public RestSettingsEntryMeta advanced(Boolean advanced) {
    this.advanced = advanced;
    return this;
  }

   /**
   * Get advanced
   * @return advanced
  **/
  @javax.annotation.Nullable
  public Boolean getAdvanced() {
    return advanced;
  }

  public void setAdvanced(Boolean advanced) {
    this.advanced = advanced;
  }


  public RestSettingsEntryMeta component(String component) {
    this.component = component;
    return this;
  }

   /**
   * Get component
   * @return component
  **/
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public RestSettingsEntryMeta iconClass(String iconClass) {
    this.iconClass = iconClass;
    return this;
  }

   /**
   * Get iconClass
   * @return iconClass
  **/
  @javax.annotation.Nullable
  public String getIconClass() {
    return iconClass;
  }

  public void setIconClass(String iconClass) {
    this.iconClass = iconClass;
  }


  public RestSettingsEntryMeta indexed(List<String> indexed) {
    this.indexed = indexed;
    return this;
  }

  public RestSettingsEntryMeta addIndexedItem(String indexedItem) {
    if (this.indexed == null) {
      this.indexed = new ArrayList<>();
    }
    this.indexed.add(indexedItem);
    return this;
  }

   /**
   * Get indexed
   * @return indexed
  **/
  @javax.annotation.Nullable
  public List<String> getIndexed() {
    return indexed;
  }

  public void setIndexed(List<String> indexed) {
    this.indexed = indexed;
  }


  public RestSettingsEntryMeta props(String props) {
    this.props = props;
    return this;
  }

   /**
   * Get props
   * @return props
  **/
  @javax.annotation.Nullable
  public String getProps() {
    return props;
  }

  public void setProps(String props) {
    this.props = props;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestSettingsEntryMeta restSettingsEntryMeta = (RestSettingsEntryMeta) o;
    return Objects.equals(this.advanced, restSettingsEntryMeta.advanced) &&
        Objects.equals(this.component, restSettingsEntryMeta.component) &&
        Objects.equals(this.iconClass, restSettingsEntryMeta.iconClass) &&
        Objects.equals(this.indexed, restSettingsEntryMeta.indexed) &&
        Objects.equals(this.props, restSettingsEntryMeta.props);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advanced, component, iconClass, indexed, props);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestSettingsEntryMeta {\n");
    sb.append("    advanced: ").append(toIndentedString(advanced)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    iconClass: ").append(toIndentedString(iconClass)).append("\n");
    sb.append("    indexed: ").append(toIndentedString(indexed)).append("\n");
    sb.append("    props: ").append(toIndentedString(props)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advanced");
    openapiFields.add("component");
    openapiFields.add("icon_class");
    openapiFields.add("indexed");
    openapiFields.add("props");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestSettingsEntryMeta
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestSettingsEntryMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestSettingsEntryMeta is not found in the empty JSON string", RestSettingsEntryMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestSettingsEntryMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestSettingsEntryMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if ((jsonObj.get("icon_class") != null && !jsonObj.get("icon_class").isJsonNull()) && !jsonObj.get("icon_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_class").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("indexed") != null && !jsonObj.get("indexed").isJsonNull() && !jsonObj.get("indexed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexed` to be an array in the JSON string but got `%s`", jsonObj.get("indexed").toString()));
      }
      if ((jsonObj.get("props") != null && !jsonObj.get("props").isJsonNull()) && !jsonObj.get("props").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `props` to be a primitive type in the JSON string but got `%s`", jsonObj.get("props").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestSettingsEntryMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestSettingsEntryMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestSettingsEntryMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestSettingsEntryMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<RestSettingsEntryMeta>() {
           @Override
           public void write(JsonWriter out, RestSettingsEntryMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestSettingsEntryMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestSettingsEntryMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestSettingsEntryMeta
  * @throws IOException if the JSON string is invalid with respect to RestSettingsEntryMeta
  */
  public static RestSettingsEntryMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestSettingsEntryMeta.class);
  }

 /**
  * Convert an instance of RestSettingsEntryMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

