/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * UpdatePackage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class UpdatePackage {
    public static final String SERIALIZED_NAME_BINARY_ARCH = "BinaryArch";
    @SerializedName(SERIALIZED_NAME_BINARY_ARCH)
    @javax.annotation.Nullable
    private String binaryArch;

    public static final String SERIALIZED_NAME_BINARY_CHECKSUM = "BinaryChecksum";
    @SerializedName(SERIALIZED_NAME_BINARY_CHECKSUM)
    @javax.annotation.Nullable
    private String binaryChecksum;

    public static final String SERIALIZED_NAME_BINARY_HASH_TYPE = "BinaryHashType";
    @SerializedName(SERIALIZED_NAME_BINARY_HASH_TYPE)
    @javax.annotation.Nullable
    private String binaryHashType;

    public static final String SERIALIZED_NAME_BINARY_O_S = "BinaryOS";
    @SerializedName(SERIALIZED_NAME_BINARY_O_S)
    @javax.annotation.Nullable
    private String binaryOS;

    public static final String SERIALIZED_NAME_BINARY_SIGNATURE = "BinarySignature";
    @SerializedName(SERIALIZED_NAME_BINARY_SIGNATURE)
    @javax.annotation.Nullable
    private String binarySignature;

    public static final String SERIALIZED_NAME_BINARY_SIZE = "BinarySize";
    @SerializedName(SERIALIZED_NAME_BINARY_SIZE)
    @javax.annotation.Nullable
    private String binarySize;

    public static final String SERIALIZED_NAME_BINARY_U_R_L = "BinaryURL";
    @SerializedName(SERIALIZED_NAME_BINARY_U_R_L)
    @javax.annotation.Nullable
    private String binaryURL;

    public static final String SERIALIZED_NAME_CHANGE_LOG = "ChangeLog";
    @SerializedName(SERIALIZED_NAME_CHANGE_LOG)
    @javax.annotation.Nullable
    private String changeLog;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_IS_PATCH = "IsPatch";
    @SerializedName(SERIALIZED_NAME_IS_PATCH)
    @javax.annotation.Nullable
    private Boolean isPatch;

    public static final String SERIALIZED_NAME_LABEL = "Label";
    @SerializedName(SERIALIZED_NAME_LABEL)
    @javax.annotation.Nullable
    private String label;

    public static final String SERIALIZED_NAME_LICENSE = "License";
    @SerializedName(SERIALIZED_NAME_LICENSE)
    @javax.annotation.Nullable
    private String license;

    public static final String SERIALIZED_NAME_PACKAGE_NAME = "PackageName";
    @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
    @javax.annotation.Nullable
    private String packageName;

    public static final String SERIALIZED_NAME_PATCH_ALGORITHM = "PatchAlgorithm";
    @SerializedName(SERIALIZED_NAME_PATCH_ALGORITHM)
    @javax.annotation.Nullable
    private String patchAlgorithm;

    public static final String SERIALIZED_NAME_RELEASE_DATE = "ReleaseDate";
    @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
    @javax.annotation.Nullable
    private Integer releaseDate;

    public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
    @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
    @javax.annotation.Nullable
    private String serviceName;

    public static final String SERIALIZED_NAME_STATUS = "Status";
    @SerializedName(SERIALIZED_NAME_STATUS)
    @javax.annotation.Nullable
    private PackagePackageStatus status = PackagePackageStatus.DRAFT;

    public static final String SERIALIZED_NAME_VERSION = "Version";
    @SerializedName(SERIALIZED_NAME_VERSION)
    @javax.annotation.Nullable
    private String version;

    public UpdatePackage() {
    }

    public UpdatePackage binaryArch(@javax.annotation.Nullable String binaryArch) {
        this.binaryArch = binaryArch;
        return this;
    }

    /**
     * Get binaryArch
     *
     * @return binaryArch
     */
    @javax.annotation.Nullable
    public String getBinaryArch() {
        return binaryArch;
    }

    public void setBinaryArch(@javax.annotation.Nullable String binaryArch) {
        this.binaryArch = binaryArch;
    }


    public UpdatePackage binaryChecksum(@javax.annotation.Nullable String binaryChecksum) {
        this.binaryChecksum = binaryChecksum;
        return this;
    }

    /**
     * Get binaryChecksum
     *
     * @return binaryChecksum
     */
    @javax.annotation.Nullable
    public String getBinaryChecksum() {
        return binaryChecksum;
    }

    public void setBinaryChecksum(@javax.annotation.Nullable String binaryChecksum) {
        this.binaryChecksum = binaryChecksum;
    }


    public UpdatePackage binaryHashType(@javax.annotation.Nullable String binaryHashType) {
        this.binaryHashType = binaryHashType;
        return this;
    }

    /**
     * Get binaryHashType
     *
     * @return binaryHashType
     */
    @javax.annotation.Nullable
    public String getBinaryHashType() {
        return binaryHashType;
    }

    public void setBinaryHashType(@javax.annotation.Nullable String binaryHashType) {
        this.binaryHashType = binaryHashType;
    }


    public UpdatePackage binaryOS(@javax.annotation.Nullable String binaryOS) {
        this.binaryOS = binaryOS;
        return this;
    }

    /**
     * Get binaryOS
     *
     * @return binaryOS
     */
    @javax.annotation.Nullable
    public String getBinaryOS() {
        return binaryOS;
    }

    public void setBinaryOS(@javax.annotation.Nullable String binaryOS) {
        this.binaryOS = binaryOS;
    }


    public UpdatePackage binarySignature(@javax.annotation.Nullable String binarySignature) {
        this.binarySignature = binarySignature;
        return this;
    }

    /**
     * Get binarySignature
     *
     * @return binarySignature
     */
    @javax.annotation.Nullable
    public String getBinarySignature() {
        return binarySignature;
    }

    public void setBinarySignature(@javax.annotation.Nullable String binarySignature) {
        this.binarySignature = binarySignature;
    }


    public UpdatePackage binarySize(@javax.annotation.Nullable String binarySize) {
        this.binarySize = binarySize;
        return this;
    }

    /**
     * Get binarySize
     *
     * @return binarySize
     */
    @javax.annotation.Nullable
    public String getBinarySize() {
        return binarySize;
    }

    public void setBinarySize(@javax.annotation.Nullable String binarySize) {
        this.binarySize = binarySize;
    }


    public UpdatePackage binaryURL(@javax.annotation.Nullable String binaryURL) {
        this.binaryURL = binaryURL;
        return this;
    }

    /**
     * Get binaryURL
     *
     * @return binaryURL
     */
    @javax.annotation.Nullable
    public String getBinaryURL() {
        return binaryURL;
    }

    public void setBinaryURL(@javax.annotation.Nullable String binaryURL) {
        this.binaryURL = binaryURL;
    }


    public UpdatePackage changeLog(@javax.annotation.Nullable String changeLog) {
        this.changeLog = changeLog;
        return this;
    }

    /**
     * Get changeLog
     *
     * @return changeLog
     */
    @javax.annotation.Nullable
    public String getChangeLog() {
        return changeLog;
    }

    public void setChangeLog(@javax.annotation.Nullable String changeLog) {
        this.changeLog = changeLog;
    }


    public UpdatePackage description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }


    public UpdatePackage isPatch(@javax.annotation.Nullable Boolean isPatch) {
        this.isPatch = isPatch;
        return this;
    }

    /**
     * Get isPatch
     *
     * @return isPatch
     */
    @javax.annotation.Nullable
    public Boolean getIsPatch() {
        return isPatch;
    }

    public void setIsPatch(@javax.annotation.Nullable Boolean isPatch) {
        this.isPatch = isPatch;
    }


    public UpdatePackage label(@javax.annotation.Nullable String label) {
        this.label = label;
        return this;
    }

    /**
     * Get label
     *
     * @return label
     */
    @javax.annotation.Nullable
    public String getLabel() {
        return label;
    }

    public void setLabel(@javax.annotation.Nullable String label) {
        this.label = label;
    }


    public UpdatePackage license(@javax.annotation.Nullable String license) {
        this.license = license;
        return this;
    }

    /**
     * Get license
     *
     * @return license
     */
    @javax.annotation.Nullable
    public String getLicense() {
        return license;
    }

    public void setLicense(@javax.annotation.Nullable String license) {
        this.license = license;
    }


    public UpdatePackage packageName(@javax.annotation.Nullable String packageName) {
        this.packageName = packageName;
        return this;
    }

    /**
     * Get packageName
     *
     * @return packageName
     */
    @javax.annotation.Nullable
    public String getPackageName() {
        return packageName;
    }

    public void setPackageName(@javax.annotation.Nullable String packageName) {
        this.packageName = packageName;
    }


    public UpdatePackage patchAlgorithm(@javax.annotation.Nullable String patchAlgorithm) {
        this.patchAlgorithm = patchAlgorithm;
        return this;
    }

    /**
     * Get patchAlgorithm
     *
     * @return patchAlgorithm
     */
    @javax.annotation.Nullable
    public String getPatchAlgorithm() {
        return patchAlgorithm;
    }

    public void setPatchAlgorithm(@javax.annotation.Nullable String patchAlgorithm) {
        this.patchAlgorithm = patchAlgorithm;
    }


    public UpdatePackage releaseDate(@javax.annotation.Nullable Integer releaseDate) {
        this.releaseDate = releaseDate;
        return this;
    }

    /**
     * Get releaseDate
     *
     * @return releaseDate
     */
    @javax.annotation.Nullable
    public Integer getReleaseDate() {
        return releaseDate;
    }

    public void setReleaseDate(@javax.annotation.Nullable Integer releaseDate) {
        this.releaseDate = releaseDate;
    }


    public UpdatePackage serviceName(@javax.annotation.Nullable String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get serviceName
     *
     * @return serviceName
     */
    @javax.annotation.Nullable
    public String getServiceName() {
        return serviceName;
    }

    public void setServiceName(@javax.annotation.Nullable String serviceName) {
        this.serviceName = serviceName;
    }


    public UpdatePackage status(@javax.annotation.Nullable PackagePackageStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @javax.annotation.Nullable
    public PackagePackageStatus getStatus() {
        return status;
    }

    public void setStatus(@javax.annotation.Nullable PackagePackageStatus status) {
        this.status = status;
    }


    public UpdatePackage version(@javax.annotation.Nullable String version) {
        this.version = version;
        return this;
    }

    /**
     * Get version
     *
     * @return version
     */
    @javax.annotation.Nullable
    public String getVersion() {
        return version;
    }

    public void setVersion(@javax.annotation.Nullable String version) {
        this.version = version;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePackage updatePackage = (UpdatePackage) o;
        return Objects.equals(this.binaryArch, updatePackage.binaryArch) &&
                Objects.equals(this.binaryChecksum, updatePackage.binaryChecksum) &&
                Objects.equals(this.binaryHashType, updatePackage.binaryHashType) &&
                Objects.equals(this.binaryOS, updatePackage.binaryOS) &&
                Objects.equals(this.binarySignature, updatePackage.binarySignature) &&
                Objects.equals(this.binarySize, updatePackage.binarySize) &&
                Objects.equals(this.binaryURL, updatePackage.binaryURL) &&
                Objects.equals(this.changeLog, updatePackage.changeLog) &&
                Objects.equals(this.description, updatePackage.description) &&
                Objects.equals(this.isPatch, updatePackage.isPatch) &&
                Objects.equals(this.label, updatePackage.label) &&
                Objects.equals(this.license, updatePackage.license) &&
                Objects.equals(this.packageName, updatePackage.packageName) &&
                Objects.equals(this.patchAlgorithm, updatePackage.patchAlgorithm) &&
                Objects.equals(this.releaseDate, updatePackage.releaseDate) &&
                Objects.equals(this.serviceName, updatePackage.serviceName) &&
                Objects.equals(this.status, updatePackage.status) &&
                Objects.equals(this.version, updatePackage.version);
    }

    @Override
    public int hashCode() {
        return Objects.hash(binaryArch, binaryChecksum, binaryHashType, binaryOS, binarySignature, binarySize, binaryURL, changeLog, description, isPatch, label, license, packageName, patchAlgorithm, releaseDate, serviceName, status, version);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdatePackage {\n");
        sb.append("    binaryArch: ").append(toIndentedString(binaryArch)).append("\n");
        sb.append("    binaryChecksum: ").append(toIndentedString(binaryChecksum)).append("\n");
        sb.append("    binaryHashType: ").append(toIndentedString(binaryHashType)).append("\n");
        sb.append("    binaryOS: ").append(toIndentedString(binaryOS)).append("\n");
        sb.append("    binarySignature: ").append(toIndentedString(binarySignature)).append("\n");
        sb.append("    binarySize: ").append(toIndentedString(binarySize)).append("\n");
        sb.append("    binaryURL: ").append(toIndentedString(binaryURL)).append("\n");
        sb.append("    changeLog: ").append(toIndentedString(changeLog)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    isPatch: ").append(toIndentedString(isPatch)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    license: ").append(toIndentedString(license)).append("\n");
        sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
        sb.append("    patchAlgorithm: ").append(toIndentedString(patchAlgorithm)).append("\n");
        sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
        sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("BinaryArch");
        openapiFields.add("BinaryChecksum");
        openapiFields.add("BinaryHashType");
        openapiFields.add("BinaryOS");
        openapiFields.add("BinarySignature");
        openapiFields.add("BinarySize");
        openapiFields.add("BinaryURL");
        openapiFields.add("ChangeLog");
        openapiFields.add("Description");
        openapiFields.add("IsPatch");
        openapiFields.add("Label");
        openapiFields.add("License");
        openapiFields.add("PackageName");
        openapiFields.add("PatchAlgorithm");
        openapiFields.add("ReleaseDate");
        openapiFields.add("ServiceName");
        openapiFields.add("Status");
        openapiFields.add("Version");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to UpdatePackage
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UpdatePackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePackage is not found in the empty JSON string", UpdatePackage.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UpdatePackage.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("BinaryArch") != null && !jsonObj.get("BinaryArch").isJsonNull()) && !jsonObj.get("BinaryArch").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `BinaryArch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BinaryArch").toString()));
        }
        if ((jsonObj.get("BinaryChecksum") != null && !jsonObj.get("BinaryChecksum").isJsonNull()) && !jsonObj.get("BinaryChecksum").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `BinaryChecksum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BinaryChecksum").toString()));
        }
        if ((jsonObj.get("BinaryHashType") != null && !jsonObj.get("BinaryHashType").isJsonNull()) && !jsonObj.get("BinaryHashType").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `BinaryHashType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BinaryHashType").toString()));
        }
        if ((jsonObj.get("BinaryOS") != null && !jsonObj.get("BinaryOS").isJsonNull()) && !jsonObj.get("BinaryOS").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `BinaryOS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BinaryOS").toString()));
        }
        if ((jsonObj.get("BinarySignature") != null && !jsonObj.get("BinarySignature").isJsonNull()) && !jsonObj.get("BinarySignature").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `BinarySignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BinarySignature").toString()));
        }
        if ((jsonObj.get("BinarySize") != null && !jsonObj.get("BinarySize").isJsonNull()) && !jsonObj.get("BinarySize").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `BinarySize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BinarySize").toString()));
        }
        if ((jsonObj.get("BinaryURL") != null && !jsonObj.get("BinaryURL").isJsonNull()) && !jsonObj.get("BinaryURL").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `BinaryURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BinaryURL").toString()));
        }
        if ((jsonObj.get("ChangeLog") != null && !jsonObj.get("ChangeLog").isJsonNull()) && !jsonObj.get("ChangeLog").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ChangeLog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChangeLog").toString()));
        }
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
        }
        if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
        }
        if ((jsonObj.get("License") != null && !jsonObj.get("License").isJsonNull()) && !jsonObj.get("License").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `License` to be a primitive type in the JSON string but got `%s`", jsonObj.get("License").toString()));
        }
        if ((jsonObj.get("PackageName") != null && !jsonObj.get("PackageName").isJsonNull()) && !jsonObj.get("PackageName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `PackageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageName").toString()));
        }
        if ((jsonObj.get("PatchAlgorithm") != null && !jsonObj.get("PatchAlgorithm").isJsonNull()) && !jsonObj.get("PatchAlgorithm").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `PatchAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PatchAlgorithm").toString()));
        }
        if ((jsonObj.get("ServiceName") != null && !jsonObj.get("ServiceName").isJsonNull()) && !jsonObj.get("ServiceName").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceName").toString()));
        }
        // validate the optional field `Status`
        if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
            PackagePackageStatus.validateJsonElement(jsonObj.get("Status"));
        }
        if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UpdatePackage.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UpdatePackage' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UpdatePackage> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(UpdatePackage.class));

            return (TypeAdapter<T>) new TypeAdapter<UpdatePackage>() {
                @Override
                public void write(JsonWriter out, UpdatePackage value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public UpdatePackage read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of UpdatePackage given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UpdatePackage
     * @throws IOException if the JSON string is invalid with respect to UpdatePackage
     */
    public static UpdatePackage fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UpdatePackage.class);
    }

    /**
     * Convert an instance of UpdatePackage to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

