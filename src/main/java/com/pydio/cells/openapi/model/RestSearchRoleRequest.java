/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * RestSearchRoleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-15T17:35:14.400736592+02:00[Europe/Berlin]")
public class RestSearchRoleRequest {
  public static final String SERIALIZED_NAME_COUNT_ONLY = "CountOnly";
  @SerializedName(SERIALIZED_NAME_COUNT_ONLY)
  private Boolean countOnly;

  public static final String SERIALIZED_NAME_GROUP_BY = "GroupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private Integer groupBy;

  public static final String SERIALIZED_NAME_LIMIT = "Limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private String limit;

  public static final String SERIALIZED_NAME_OFFSET = "Offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private String offset;

  public static final String SERIALIZED_NAME_OPERATION = "Operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private ServiceOperationType operation = ServiceOperationType.OR;

  public static final String SERIALIZED_NAME_QUERIES = "Queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<IdmRoleSingleQuery> queries;

  public static final String SERIALIZED_NAME_RESOURCE_POLICY_QUERY = "ResourcePolicyQuery";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POLICY_QUERY)
  private RestResourcePolicyQuery resourcePolicyQuery;

  public RestSearchRoleRequest() {
  }

  public RestSearchRoleRequest countOnly(Boolean countOnly) {
    
    this.countOnly = countOnly;
    return this;
  }

   /**
   * Get countOnly
   * @return countOnly
  **/
  @javax.annotation.Nullable

  public Boolean getCountOnly() {
    return countOnly;
  }


  public void setCountOnly(Boolean countOnly) {
    this.countOnly = countOnly;
  }


  public RestSearchRoleRequest groupBy(Integer groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @javax.annotation.Nullable

  public Integer getGroupBy() {
    return groupBy;
  }


  public void setGroupBy(Integer groupBy) {
    this.groupBy = groupBy;
  }


  public RestSearchRoleRequest limit(String limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable

  public String getLimit() {
    return limit;
  }


  public void setLimit(String limit) {
    this.limit = limit;
  }


  public RestSearchRoleRequest offset(String offset) {
    
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable

  public String getOffset() {
    return offset;
  }


  public void setOffset(String offset) {
    this.offset = offset;
  }


  public RestSearchRoleRequest operation(ServiceOperationType operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * Get operation
   * @return operation
  **/
  @javax.annotation.Nullable

  public ServiceOperationType getOperation() {
    return operation;
  }


  public void setOperation(ServiceOperationType operation) {
    this.operation = operation;
  }


  public RestSearchRoleRequest queries(List<IdmRoleSingleQuery> queries) {
    
    this.queries = queries;
    return this;
  }

  public RestSearchRoleRequest addQueriesItem(IdmRoleSingleQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * Get queries
   * @return queries
  **/
  @javax.annotation.Nullable

  public List<IdmRoleSingleQuery> getQueries() {
    return queries;
  }


  public void setQueries(List<IdmRoleSingleQuery> queries) {
    this.queries = queries;
  }


  public RestSearchRoleRequest resourcePolicyQuery(RestResourcePolicyQuery resourcePolicyQuery) {
    
    this.resourcePolicyQuery = resourcePolicyQuery;
    return this;
  }

   /**
   * Get resourcePolicyQuery
   * @return resourcePolicyQuery
  **/
  @javax.annotation.Nullable

  public RestResourcePolicyQuery getResourcePolicyQuery() {
    return resourcePolicyQuery;
  }


  public void setResourcePolicyQuery(RestResourcePolicyQuery resourcePolicyQuery) {
    this.resourcePolicyQuery = resourcePolicyQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestSearchRoleRequest restSearchRoleRequest = (RestSearchRoleRequest) o;
    return Objects.equals(this.countOnly, restSearchRoleRequest.countOnly) &&
        Objects.equals(this.groupBy, restSearchRoleRequest.groupBy) &&
        Objects.equals(this.limit, restSearchRoleRequest.limit) &&
        Objects.equals(this.offset, restSearchRoleRequest.offset) &&
        Objects.equals(this.operation, restSearchRoleRequest.operation) &&
        Objects.equals(this.queries, restSearchRoleRequest.queries) &&
        Objects.equals(this.resourcePolicyQuery, restSearchRoleRequest.resourcePolicyQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countOnly, groupBy, limit, offset, operation, queries, resourcePolicyQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestSearchRoleRequest {\n");
    sb.append("    countOnly: ").append(toIndentedString(countOnly)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    resourcePolicyQuery: ").append(toIndentedString(resourcePolicyQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CountOnly");
    openapiFields.add("GroupBy");
    openapiFields.add("Limit");
    openapiFields.add("Offset");
    openapiFields.add("Operation");
    openapiFields.add("Queries");
    openapiFields.add("ResourcePolicyQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RestSearchRoleRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RestSearchRoleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestSearchRoleRequest is not found in the empty JSON string", RestSearchRoleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RestSearchRoleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestSearchRoleRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) && !jsonObj.get("Limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Limit").toString()));
      }
      if ((jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) && !jsonObj.get("Offset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Offset").toString()));
      }
      if (jsonObj.get("Queries") != null && !jsonObj.get("Queries").isJsonNull()) {
        JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("Queries");
        if (jsonArrayqueries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Queries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Queries` to be an array in the JSON string but got `%s`", jsonObj.get("Queries").toString()));
          }

          // validate the optional field `Queries` (array)
          for (int i = 0; i < jsonArrayqueries.size(); i++) {
            IdmRoleSingleQuery.validateJsonObject(jsonArrayqueries.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `ResourcePolicyQuery`
      if (jsonObj.get("ResourcePolicyQuery") != null && !jsonObj.get("ResourcePolicyQuery").isJsonNull()) {
        RestResourcePolicyQuery.validateJsonObject(jsonObj.getAsJsonObject("ResourcePolicyQuery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestSearchRoleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestSearchRoleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestSearchRoleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestSearchRoleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RestSearchRoleRequest>() {
           @Override
           public void write(JsonWriter out, RestSearchRoleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestSearchRoleRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestSearchRoleRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestSearchRoleRequest
  * @throws IOException if the JSON string is invalid with respect to RestSearchRoleRequest
  */
  public static RestSearchRoleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestSearchRoleRequest.class);
  }

 /**
  * Convert an instance of RestSearchRoleRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

