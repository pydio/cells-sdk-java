/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * TreeChangeLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-06T14:22:40.613083+01:00[Europe/Berlin]")
public class TreeChangeLog {
  public static final String SERIALIZED_NAME_DATA = "Data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private byte[] data;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT = "Event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private TreeNodeChangeEvent event;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private TreeNode location;

  public static final String SERIALIZED_NAME_MTIME = "MTime";
  @SerializedName(SERIALIZED_NAME_MTIME)
  private String mtime;

  public static final String SERIALIZED_NAME_OWNER_UUID = "OwnerUuid";
  @SerializedName(SERIALIZED_NAME_OWNER_UUID)
  private String ownerUuid;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_UUID = "Uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public TreeChangeLog() {
  }

  public TreeChangeLog data(byte[] data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public byte[] getData() {
    return data;
  }


  public void setData(byte[] data) {
    this.data = data;
  }


  public TreeChangeLog description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TreeChangeLog event(TreeNodeChangeEvent event) {
    
    this.event = event;
    return this;
  }

   /**
   * Get event
   * @return event
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeNodeChangeEvent getEvent() {
    return event;
  }


  public void setEvent(TreeNodeChangeEvent event) {
    this.event = event;
  }


  public TreeChangeLog location(TreeNode location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeNode getLocation() {
    return location;
  }


  public void setLocation(TreeNode location) {
    this.location = location;
  }


  public TreeChangeLog mtime(String mtime) {
    
    this.mtime = mtime;
    return this;
  }

   /**
   * Get mtime
   * @return mtime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMtime() {
    return mtime;
  }


  public void setMtime(String mtime) {
    this.mtime = mtime;
  }


  public TreeChangeLog ownerUuid(String ownerUuid) {
    
    this.ownerUuid = ownerUuid;
    return this;
  }

   /**
   * Get ownerUuid
   * @return ownerUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOwnerUuid() {
    return ownerUuid;
  }


  public void setOwnerUuid(String ownerUuid) {
    this.ownerUuid = ownerUuid;
  }


  public TreeChangeLog size(String size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSize() {
    return size;
  }


  public void setSize(String size) {
    this.size = size;
  }


  public TreeChangeLog uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreeChangeLog treeChangeLog = (TreeChangeLog) o;
    return Arrays.equals(this.data, treeChangeLog.data) &&
        Objects.equals(this.description, treeChangeLog.description) &&
        Objects.equals(this.event, treeChangeLog.event) &&
        Objects.equals(this.location, treeChangeLog.location) &&
        Objects.equals(this.mtime, treeChangeLog.mtime) &&
        Objects.equals(this.ownerUuid, treeChangeLog.ownerUuid) &&
        Objects.equals(this.size, treeChangeLog.size) &&
        Objects.equals(this.uuid, treeChangeLog.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(data), description, event, location, mtime, ownerUuid, size, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreeChangeLog {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    mtime: ").append(toIndentedString(mtime)).append("\n");
    sb.append("    ownerUuid: ").append(toIndentedString(ownerUuid)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Data");
    openapiFields.add("Description");
    openapiFields.add("Event");
    openapiFields.add("Location");
    openapiFields.add("MTime");
    openapiFields.add("OwnerUuid");
    openapiFields.add("Size");
    openapiFields.add("Uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TreeChangeLog
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TreeChangeLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TreeChangeLog is not found in the empty JSON string", TreeChangeLog.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TreeChangeLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TreeChangeLog` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `Event`
      if (jsonObj.get("Event") != null && !jsonObj.get("Event").isJsonNull()) {
        TreeNodeChangeEvent.validateJsonObject(jsonObj.getAsJsonObject("Event"));
      }
      // validate the optional field `Location`
      if (jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) {
        TreeNode.validateJsonObject(jsonObj.getAsJsonObject("Location"));
      }
      if ((jsonObj.get("MTime") != null && !jsonObj.get("MTime").isJsonNull()) && !jsonObj.get("MTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MTime").toString()));
      }
      if ((jsonObj.get("OwnerUuid") != null && !jsonObj.get("OwnerUuid").isJsonNull()) && !jsonObj.get("OwnerUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerUuid").toString()));
      }
      if ((jsonObj.get("Size") != null && !jsonObj.get("Size").isJsonNull()) && !jsonObj.get("Size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Size").toString()));
      }
      if ((jsonObj.get("Uuid") != null && !jsonObj.get("Uuid").isJsonNull()) && !jsonObj.get("Uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TreeChangeLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TreeChangeLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TreeChangeLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TreeChangeLog.class));

       return (TypeAdapter<T>) new TypeAdapter<TreeChangeLog>() {
           @Override
           public void write(JsonWriter out, TreeChangeLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TreeChangeLog read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TreeChangeLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TreeChangeLog
  * @throws IOException if the JSON string is invalid with respect to TreeChangeLog
  */
  public static TreeChangeLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TreeChangeLog.class);
  }

 /**
  * Convert an instance of TreeChangeLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

