/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RestSearchUserRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class RestSearchUserRequest {
    public static final String SERIALIZED_NAME_COUNT_ONLY = "CountOnly";
    @SerializedName(SERIALIZED_NAME_COUNT_ONLY)
    @javax.annotation.Nullable
    private Boolean countOnly;

    public static final String SERIALIZED_NAME_GROUP_BY = "GroupBy";
    @SerializedName(SERIALIZED_NAME_GROUP_BY)
    @javax.annotation.Nullable
    private Integer groupBy;

    public static final String SERIALIZED_NAME_LIMIT = "Limit";
    @SerializedName(SERIALIZED_NAME_LIMIT)
    @javax.annotation.Nullable
    private String limit;

    public static final String SERIALIZED_NAME_OFFSET = "Offset";
    @SerializedName(SERIALIZED_NAME_OFFSET)
    @javax.annotation.Nullable
    private String offset;

    public static final String SERIALIZED_NAME_OPERATION = "Operation";
    @SerializedName(SERIALIZED_NAME_OPERATION)
    @javax.annotation.Nullable
    private ServiceOperationType operation = ServiceOperationType.OR;

    public static final String SERIALIZED_NAME_QUERIES = "Queries";
    @SerializedName(SERIALIZED_NAME_QUERIES)
    @javax.annotation.Nullable
    private List<IdmUserSingleQuery> queries = new ArrayList<>();

    public static final String SERIALIZED_NAME_RESOURCE_POLICY_QUERY = "ResourcePolicyQuery";
    @SerializedName(SERIALIZED_NAME_RESOURCE_POLICY_QUERY)
    @javax.annotation.Nullable
    private RestResourcePolicyQuery resourcePolicyQuery;

    public RestSearchUserRequest() {
    }

    public RestSearchUserRequest countOnly(@javax.annotation.Nullable Boolean countOnly) {
        this.countOnly = countOnly;
        return this;
    }

    /**
     * Get countOnly
     *
     * @return countOnly
     */
    @javax.annotation.Nullable
    public Boolean getCountOnly() {
        return countOnly;
    }

    public void setCountOnly(@javax.annotation.Nullable Boolean countOnly) {
        this.countOnly = countOnly;
    }


    public RestSearchUserRequest groupBy(@javax.annotation.Nullable Integer groupBy) {
        this.groupBy = groupBy;
        return this;
    }

    /**
     * Group by ...
     *
     * @return groupBy
     */
    @javax.annotation.Nullable
    public Integer getGroupBy() {
        return groupBy;
    }

    public void setGroupBy(@javax.annotation.Nullable Integer groupBy) {
        this.groupBy = groupBy;
    }


    public RestSearchUserRequest limit(@javax.annotation.Nullable String limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @javax.annotation.Nullable
    public String getLimit() {
        return limit;
    }

    public void setLimit(@javax.annotation.Nullable String limit) {
        this.limit = limit;
    }


    public RestSearchUserRequest offset(@javax.annotation.Nullable String offset) {
        this.offset = offset;
        return this;
    }

    /**
     * Get offset
     *
     * @return offset
     */
    @javax.annotation.Nullable
    public String getOffset() {
        return offset;
    }

    public void setOffset(@javax.annotation.Nullable String offset) {
        this.offset = offset;
    }


    public RestSearchUserRequest operation(@javax.annotation.Nullable ServiceOperationType operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Get operation
     *
     * @return operation
     */
    @javax.annotation.Nullable
    public ServiceOperationType getOperation() {
        return operation;
    }

    public void setOperation(@javax.annotation.Nullable ServiceOperationType operation) {
        this.operation = operation;
    }


    public RestSearchUserRequest queries(@javax.annotation.Nullable List<IdmUserSingleQuery> queries) {
        this.queries = queries;
        return this;
    }

    public RestSearchUserRequest addQueriesItem(IdmUserSingleQuery queriesItem) {
        if (this.queries == null) {
            this.queries = new ArrayList<>();
        }
        this.queries.add(queriesItem);
        return this;
    }

    /**
     * Get queries
     *
     * @return queries
     */
    @javax.annotation.Nullable
    public List<IdmUserSingleQuery> getQueries() {
        return queries;
    }

    public void setQueries(@javax.annotation.Nullable List<IdmUserSingleQuery> queries) {
        this.queries = queries;
    }


    public RestSearchUserRequest resourcePolicyQuery(@javax.annotation.Nullable RestResourcePolicyQuery resourcePolicyQuery) {
        this.resourcePolicyQuery = resourcePolicyQuery;
        return this;
    }

    /**
     * Get resourcePolicyQuery
     *
     * @return resourcePolicyQuery
     */
    @javax.annotation.Nullable
    public RestResourcePolicyQuery getResourcePolicyQuery() {
        return resourcePolicyQuery;
    }

    public void setResourcePolicyQuery(@javax.annotation.Nullable RestResourcePolicyQuery resourcePolicyQuery) {
        this.resourcePolicyQuery = resourcePolicyQuery;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RestSearchUserRequest restSearchUserRequest = (RestSearchUserRequest) o;
        return Objects.equals(this.countOnly, restSearchUserRequest.countOnly) &&
                Objects.equals(this.groupBy, restSearchUserRequest.groupBy) &&
                Objects.equals(this.limit, restSearchUserRequest.limit) &&
                Objects.equals(this.offset, restSearchUserRequest.offset) &&
                Objects.equals(this.operation, restSearchUserRequest.operation) &&
                Objects.equals(this.queries, restSearchUserRequest.queries) &&
                Objects.equals(this.resourcePolicyQuery, restSearchUserRequest.resourcePolicyQuery);
    }

    @Override
    public int hashCode() {
        return Objects.hash(countOnly, groupBy, limit, offset, operation, queries, resourcePolicyQuery);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RestSearchUserRequest {\n");
        sb.append("    countOnly: ").append(toIndentedString(countOnly)).append("\n");
        sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
        sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
        sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
        sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
        sb.append("    resourcePolicyQuery: ").append(toIndentedString(resourcePolicyQuery)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("CountOnly");
        openapiFields.add("GroupBy");
        openapiFields.add("Limit");
        openapiFields.add("Offset");
        openapiFields.add("Operation");
        openapiFields.add("Queries");
        openapiFields.add("ResourcePolicyQuery");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RestSearchUserRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RestSearchUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in RestSearchUserRequest is not found in the empty JSON string", RestSearchUserRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RestSearchUserRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestSearchUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("Limit") != null && !jsonObj.get("Limit").isJsonNull()) && !jsonObj.get("Limit").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Limit").toString()));
        }
        if ((jsonObj.get("Offset") != null && !jsonObj.get("Offset").isJsonNull()) && !jsonObj.get("Offset").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Offset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Offset").toString()));
        }
        // validate the optional field `Operation`
        if (jsonObj.get("Operation") != null && !jsonObj.get("Operation").isJsonNull()) {
            ServiceOperationType.validateJsonElement(jsonObj.get("Operation"));
        }
        if (jsonObj.get("Queries") != null && !jsonObj.get("Queries").isJsonNull()) {
            JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("Queries");
            if (jsonArrayqueries != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Queries").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `Queries` to be an array in the JSON string but got `%s`", jsonObj.get("Queries").toString()));
                }

                // validate the optional field `Queries` (array)
                for (int i = 0; i < jsonArrayqueries.size(); i++) {
                    IdmUserSingleQuery.validateJsonElement(jsonArrayqueries.get(i));
                }
                ;
            }
        }
        // validate the optional field `ResourcePolicyQuery`
        if (jsonObj.get("ResourcePolicyQuery") != null && !jsonObj.get("ResourcePolicyQuery").isJsonNull()) {
            RestResourcePolicyQuery.validateJsonElement(jsonObj.get("ResourcePolicyQuery"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RestSearchUserRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RestSearchUserRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RestSearchUserRequest> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(RestSearchUserRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<RestSearchUserRequest>() {
                @Override
                public void write(JsonWriter out, RestSearchUserRequest value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public RestSearchUserRequest read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of RestSearchUserRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RestSearchUserRequest
     * @throws IOException if the JSON string is invalid with respect to RestSearchUserRequest
     */
    public static RestSearchUserRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RestSearchUserRequest.class);
    }

    /**
     * Convert an instance of RestSearchUserRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

