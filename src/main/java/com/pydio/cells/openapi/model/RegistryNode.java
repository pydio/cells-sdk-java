/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RegistryNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-16T11:01:01.368056162+01:00[Europe/Berlin]", comments = "Generator version: 7.4.0")
public class RegistryNode {
  public static final String SERIALIZED_NAME_ADVERTISE_IP = "advertiseIp";
  @SerializedName(SERIALIZED_NAME_ADVERTISE_IP)
  private String advertiseIp;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IPS = "ips";
  @SerializedName(SERIALIZED_NAME_IPS)
  private List<String> ips;

  public static final String SERIALIZED_NAME_MACHINE = "machine";
  @SerializedName(SERIALIZED_NAME_MACHINE)
  private String machine;

  public RegistryNode() {
  }

  public RegistryNode advertiseIp(String advertiseIp) {
    this.advertiseIp = advertiseIp;
    return this;
  }

   /**
   * Get advertiseIp
   * @return advertiseIp
  **/
  @javax.annotation.Nullable
  public String getAdvertiseIp() {
    return advertiseIp;
  }

  public void setAdvertiseIp(String advertiseIp) {
    this.advertiseIp = advertiseIp;
  }


  public RegistryNode hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public RegistryNode ips(List<String> ips) {
    this.ips = ips;
    return this;
  }

  public RegistryNode addIpsItem(String ipsItem) {
    if (this.ips == null) {
      this.ips = new ArrayList<>();
    }
    this.ips.add(ipsItem);
    return this;
  }

   /**
   * Get ips
   * @return ips
  **/
  @javax.annotation.Nullable
  public List<String> getIps() {
    return ips;
  }

  public void setIps(List<String> ips) {
    this.ips = ips;
  }


  public RegistryNode machine(String machine) {
    this.machine = machine;
    return this;
  }

   /**
   * Get machine
   * @return machine
  **/
  @javax.annotation.Nullable
  public String getMachine() {
    return machine;
  }

  public void setMachine(String machine) {
    this.machine = machine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistryNode registryNode = (RegistryNode) o;
    return Objects.equals(this.advertiseIp, registryNode.advertiseIp) &&
        Objects.equals(this.hostname, registryNode.hostname) &&
        Objects.equals(this.ips, registryNode.ips) &&
        Objects.equals(this.machine, registryNode.machine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiseIp, hostname, ips, machine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistryNode {\n");
    sb.append("    advertiseIp: ").append(toIndentedString(advertiseIp)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ips: ").append(toIndentedString(ips)).append("\n");
    sb.append("    machine: ").append(toIndentedString(machine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiseIp");
    openapiFields.add("hostname");
    openapiFields.add("ips");
    openapiFields.add("machine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RegistryNode
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistryNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistryNode is not found in the empty JSON string", RegistryNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistryNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistryNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiseIp") != null && !jsonObj.get("advertiseIp").isJsonNull()) && !jsonObj.get("advertiseIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiseIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiseIp").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ips") != null && !jsonObj.get("ips").isJsonNull() && !jsonObj.get("ips").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ips` to be an array in the JSON string but got `%s`", jsonObj.get("ips").toString()));
      }
      if ((jsonObj.get("machine") != null && !jsonObj.get("machine").isJsonNull()) && !jsonObj.get("machine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machine").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistryNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistryNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistryNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistryNode.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistryNode>() {
           @Override
           public void write(JsonWriter out, RegistryNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistryNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegistryNode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegistryNode
  * @throws IOException if the JSON string is invalid with respect to RegistryNode
  */
  public static RegistryNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistryNode.class);
  }

 /**
  * Convert an instance of RegistryNode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

