/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * RestDiscoveryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-20T11:40:14.306426+01:00[Europe/Berlin]")
public class RestDiscoveryResponse {
  public static final String SERIALIZED_NAME_BUILD_REVISION = "BuildRevision";
  @SerializedName(SERIALIZED_NAME_BUILD_REVISION)
  private String buildRevision;

  public static final String SERIALIZED_NAME_BUILD_STAMP = "BuildStamp";
  @SerializedName(SERIALIZED_NAME_BUILD_STAMP)
  private Integer buildStamp;

  public static final String SERIALIZED_NAME_ENDPOINTS = "Endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private Map<String, String> endpoints = null;

  public static final String SERIALIZED_NAME_PACKAGE_LABEL = "PackageLabel";
  @SerializedName(SERIALIZED_NAME_PACKAGE_LABEL)
  private String packageLabel;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "PackageType";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private String packageType;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public RestDiscoveryResponse() {
  }

  public RestDiscoveryResponse buildRevision(String buildRevision) {
    
    this.buildRevision = buildRevision;
    return this;
  }

   /**
   * Get buildRevision
   * @return buildRevision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBuildRevision() {
    return buildRevision;
  }


  public void setBuildRevision(String buildRevision) {
    this.buildRevision = buildRevision;
  }


  public RestDiscoveryResponse buildStamp(Integer buildStamp) {
    
    this.buildStamp = buildStamp;
    return this;
  }

   /**
   * Get buildStamp
   * @return buildStamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBuildStamp() {
    return buildStamp;
  }


  public void setBuildStamp(Integer buildStamp) {
    this.buildStamp = buildStamp;
  }


  public RestDiscoveryResponse endpoints(Map<String, String> endpoints) {
    
    this.endpoints = endpoints;
    return this;
  }

  public RestDiscoveryResponse putEndpointsItem(String key, String endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new HashMap<>();
    }
    this.endpoints.put(key, endpointsItem);
    return this;
  }

   /**
   * Get endpoints
   * @return endpoints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getEndpoints() {
    return endpoints;
  }


  public void setEndpoints(Map<String, String> endpoints) {
    this.endpoints = endpoints;
  }


  public RestDiscoveryResponse packageLabel(String packageLabel) {
    
    this.packageLabel = packageLabel;
    return this;
  }

   /**
   * Get packageLabel
   * @return packageLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPackageLabel() {
    return packageLabel;
  }


  public void setPackageLabel(String packageLabel) {
    this.packageLabel = packageLabel;
  }


  public RestDiscoveryResponse packageType(String packageType) {
    
    this.packageType = packageType;
    return this;
  }

   /**
   * Get packageType
   * @return packageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPackageType() {
    return packageType;
  }


  public void setPackageType(String packageType) {
    this.packageType = packageType;
  }


  public RestDiscoveryResponse version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestDiscoveryResponse restDiscoveryResponse = (RestDiscoveryResponse) o;
    return Objects.equals(this.buildRevision, restDiscoveryResponse.buildRevision) &&
        Objects.equals(this.buildStamp, restDiscoveryResponse.buildStamp) &&
        Objects.equals(this.endpoints, restDiscoveryResponse.endpoints) &&
        Objects.equals(this.packageLabel, restDiscoveryResponse.packageLabel) &&
        Objects.equals(this.packageType, restDiscoveryResponse.packageType) &&
        Objects.equals(this.version, restDiscoveryResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildRevision, buildStamp, endpoints, packageLabel, packageType, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestDiscoveryResponse {\n");
    sb.append("    buildRevision: ").append(toIndentedString(buildRevision)).append("\n");
    sb.append("    buildStamp: ").append(toIndentedString(buildStamp)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    packageLabel: ").append(toIndentedString(packageLabel)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BuildRevision");
    openapiFields.add("BuildStamp");
    openapiFields.add("Endpoints");
    openapiFields.add("PackageLabel");
    openapiFields.add("PackageType");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RestDiscoveryResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RestDiscoveryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestDiscoveryResponse is not found in the empty JSON string", RestDiscoveryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RestDiscoveryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestDiscoveryResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("BuildRevision") != null && !jsonObj.get("BuildRevision").isJsonNull()) && !jsonObj.get("BuildRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BuildRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BuildRevision").toString()));
      }
      if ((jsonObj.get("PackageLabel") != null && !jsonObj.get("PackageLabel").isJsonNull()) && !jsonObj.get("PackageLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageLabel").toString()));
      }
      if ((jsonObj.get("PackageType") != null && !jsonObj.get("PackageType").isJsonNull()) && !jsonObj.get("PackageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PackageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PackageType").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestDiscoveryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestDiscoveryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestDiscoveryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestDiscoveryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RestDiscoveryResponse>() {
           @Override
           public void write(JsonWriter out, RestDiscoveryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestDiscoveryResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestDiscoveryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestDiscoveryResponse
  * @throws IOException if the JSON string is invalid with respect to RestDiscoveryResponse
  */
  public static RestDiscoveryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestDiscoveryResponse.class);
  }

 /**
  * Convert an instance of RestDiscoveryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

