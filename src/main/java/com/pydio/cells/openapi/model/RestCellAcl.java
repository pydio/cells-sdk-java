/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * RestCellAcl
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class RestCellAcl {
    public static final String SERIALIZED_NAME_ACTIONS = "Actions";
    @SerializedName(SERIALIZED_NAME_ACTIONS)
    @javax.annotation.Nullable
    private List<IdmACLAction> actions = new ArrayList<>();

    public static final String SERIALIZED_NAME_GROUP = "Group";
    @SerializedName(SERIALIZED_NAME_GROUP)
    @javax.annotation.Nullable
    private IdmUser group;

    public static final String SERIALIZED_NAME_IS_USER_ROLE = "IsUserRole";
    @SerializedName(SERIALIZED_NAME_IS_USER_ROLE)
    @javax.annotation.Nullable
    private Boolean isUserRole;

    public static final String SERIALIZED_NAME_ROLE = "Role";
    @SerializedName(SERIALIZED_NAME_ROLE)
    @javax.annotation.Nullable
    private IdmRole role;

    public static final String SERIALIZED_NAME_ROLE_ID = "RoleId";
    @SerializedName(SERIALIZED_NAME_ROLE_ID)
    @javax.annotation.Nullable
    private String roleId;

    public static final String SERIALIZED_NAME_USER = "User";
    @SerializedName(SERIALIZED_NAME_USER)
    @javax.annotation.Nullable
    private IdmUser user;

    public RestCellAcl() {
    }

    public RestCellAcl actions(@javax.annotation.Nullable List<IdmACLAction> actions) {
        this.actions = actions;
        return this;
    }

    public RestCellAcl addActionsItem(IdmACLAction actionsItem) {
        if (this.actions == null) {
            this.actions = new ArrayList<>();
        }
        this.actions.add(actionsItem);
        return this;
    }

    /**
     * Get actions
     *
     * @return actions
     */
    @javax.annotation.Nullable
    public List<IdmACLAction> getActions() {
        return actions;
    }

    public void setActions(@javax.annotation.Nullable List<IdmACLAction> actions) {
        this.actions = actions;
    }


    public RestCellAcl group(@javax.annotation.Nullable IdmUser group) {
        this.group = group;
        return this;
    }

    /**
     * Get group
     *
     * @return group
     */
    @javax.annotation.Nullable
    public IdmUser getGroup() {
        return group;
    }

    public void setGroup(@javax.annotation.Nullable IdmUser group) {
        this.group = group;
    }


    public RestCellAcl isUserRole(@javax.annotation.Nullable Boolean isUserRole) {
        this.isUserRole = isUserRole;
        return this;
    }

    /**
     * Get isUserRole
     *
     * @return isUserRole
     */
    @javax.annotation.Nullable
    public Boolean getIsUserRole() {
        return isUserRole;
    }

    public void setIsUserRole(@javax.annotation.Nullable Boolean isUserRole) {
        this.isUserRole = isUserRole;
    }


    public RestCellAcl role(@javax.annotation.Nullable IdmRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get role
     *
     * @return role
     */
    @javax.annotation.Nullable
    public IdmRole getRole() {
        return role;
    }

    public void setRole(@javax.annotation.Nullable IdmRole role) {
        this.role = role;
    }


    public RestCellAcl roleId(@javax.annotation.Nullable String roleId) {
        this.roleId = roleId;
        return this;
    }

    /**
     * Get roleId
     *
     * @return roleId
     */
    @javax.annotation.Nullable
    public String getRoleId() {
        return roleId;
    }

    public void setRoleId(@javax.annotation.Nullable String roleId) {
        this.roleId = roleId;
    }


    public RestCellAcl user(@javax.annotation.Nullable IdmUser user) {
        this.user = user;
        return this;
    }

    /**
     * Get user
     *
     * @return user
     */
    @javax.annotation.Nullable
    public IdmUser getUser() {
        return user;
    }

    public void setUser(@javax.annotation.Nullable IdmUser user) {
        this.user = user;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RestCellAcl restCellAcl = (RestCellAcl) o;
        return Objects.equals(this.actions, restCellAcl.actions) &&
                Objects.equals(this.group, restCellAcl.group) &&
                Objects.equals(this.isUserRole, restCellAcl.isUserRole) &&
                Objects.equals(this.role, restCellAcl.role) &&
                Objects.equals(this.roleId, restCellAcl.roleId) &&
                Objects.equals(this.user, restCellAcl.user);
    }

    @Override
    public int hashCode() {
        return Objects.hash(actions, group, isUserRole, role, roleId, user);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RestCellAcl {\n");
        sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
        sb.append("    group: ").append(toIndentedString(group)).append("\n");
        sb.append("    isUserRole: ").append(toIndentedString(isUserRole)).append("\n");
        sb.append("    role: ").append(toIndentedString(role)).append("\n");
        sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
        sb.append("    user: ").append(toIndentedString(user)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("Actions");
        openapiFields.add("Group");
        openapiFields.add("IsUserRole");
        openapiFields.add("Role");
        openapiFields.add("RoleId");
        openapiFields.add("User");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RestCellAcl
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RestCellAcl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in RestCellAcl is not found in the empty JSON string", RestCellAcl.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RestCellAcl.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestCellAcl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("Actions") != null && !jsonObj.get("Actions").isJsonNull()) {
            JsonArray jsonArrayactions = jsonObj.getAsJsonArray("Actions");
            if (jsonArrayactions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("Actions").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `Actions` to be an array in the JSON string but got `%s`", jsonObj.get("Actions").toString()));
                }

                // validate the optional field `Actions` (array)
                for (int i = 0; i < jsonArrayactions.size(); i++) {
                    IdmACLAction.validateJsonElement(jsonArrayactions.get(i));
                }
                ;
            }
        }
        // validate the optional field `Group`
        if (jsonObj.get("Group") != null && !jsonObj.get("Group").isJsonNull()) {
            IdmUser.validateJsonElement(jsonObj.get("Group"));
        }
        // validate the optional field `Role`
        if (jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) {
            IdmRole.validateJsonElement(jsonObj.get("Role"));
        }
        if ((jsonObj.get("RoleId") != null && !jsonObj.get("RoleId").isJsonNull()) && !jsonObj.get("RoleId").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `RoleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleId").toString()));
        }
        // validate the optional field `User`
        if (jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) {
            IdmUser.validateJsonElement(jsonObj.get("User"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RestCellAcl.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RestCellAcl' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RestCellAcl> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(RestCellAcl.class));

            return (TypeAdapter<T>) new TypeAdapter<RestCellAcl>() {
                @Override
                public void write(JsonWriter out, RestCellAcl value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public RestCellAcl read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of RestCellAcl given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RestCellAcl
     * @throws IOException if the JSON string is invalid with respect to RestCellAcl
     */
    public static RestCellAcl fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RestCellAcl.class);
    }

    /**
     * Convert an instance of RestCellAcl to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

