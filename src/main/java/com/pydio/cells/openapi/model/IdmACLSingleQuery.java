/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * IdmACLSingleQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-20T11:40:14.306426+01:00[Europe/Berlin]")
public class IdmACLSingleQuery {
  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<IdmACLAction> actions = null;

  public static final String SERIALIZED_NAME_NODE_I_DS = "NodeIDs";
  @SerializedName(SERIALIZED_NAME_NODE_I_DS)
  private List<String> nodeIDs = null;

  public static final String SERIALIZED_NAME_ROLE_I_DS = "RoleIDs";
  @SerializedName(SERIALIZED_NAME_ROLE_I_DS)
  private List<String> roleIDs = null;

  public static final String SERIALIZED_NAME_WORKSPACE_I_DS = "WorkspaceIDs";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_I_DS)
  private List<String> workspaceIDs = null;

  public static final String SERIALIZED_NAME_NOT = "not";
  @SerializedName(SERIALIZED_NAME_NOT)
  private Boolean not;

  public IdmACLSingleQuery() {
  }

  public IdmACLSingleQuery actions(List<IdmACLAction> actions) {
    
    this.actions = actions;
    return this;
  }

  public IdmACLSingleQuery addActionsItem(IdmACLAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<IdmACLAction> getActions() {
    return actions;
  }


  public void setActions(List<IdmACLAction> actions) {
    this.actions = actions;
  }


  public IdmACLSingleQuery nodeIDs(List<String> nodeIDs) {
    
    this.nodeIDs = nodeIDs;
    return this;
  }

  public IdmACLSingleQuery addNodeIDsItem(String nodeIDsItem) {
    if (this.nodeIDs == null) {
      this.nodeIDs = new ArrayList<>();
    }
    this.nodeIDs.add(nodeIDsItem);
    return this;
  }

   /**
   * Get nodeIDs
   * @return nodeIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getNodeIDs() {
    return nodeIDs;
  }


  public void setNodeIDs(List<String> nodeIDs) {
    this.nodeIDs = nodeIDs;
  }


  public IdmACLSingleQuery roleIDs(List<String> roleIDs) {
    
    this.roleIDs = roleIDs;
    return this;
  }

  public IdmACLSingleQuery addRoleIDsItem(String roleIDsItem) {
    if (this.roleIDs == null) {
      this.roleIDs = new ArrayList<>();
    }
    this.roleIDs.add(roleIDsItem);
    return this;
  }

   /**
   * Get roleIDs
   * @return roleIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRoleIDs() {
    return roleIDs;
  }


  public void setRoleIDs(List<String> roleIDs) {
    this.roleIDs = roleIDs;
  }


  public IdmACLSingleQuery workspaceIDs(List<String> workspaceIDs) {
    
    this.workspaceIDs = workspaceIDs;
    return this;
  }

  public IdmACLSingleQuery addWorkspaceIDsItem(String workspaceIDsItem) {
    if (this.workspaceIDs == null) {
      this.workspaceIDs = new ArrayList<>();
    }
    this.workspaceIDs.add(workspaceIDsItem);
    return this;
  }

   /**
   * Get workspaceIDs
   * @return workspaceIDs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getWorkspaceIDs() {
    return workspaceIDs;
  }


  public void setWorkspaceIDs(List<String> workspaceIDs) {
    this.workspaceIDs = workspaceIDs;
  }


  public IdmACLSingleQuery not(Boolean not) {
    
    this.not = not;
    return this;
  }

   /**
   * Get not
   * @return not
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNot() {
    return not;
  }


  public void setNot(Boolean not) {
    this.not = not;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdmACLSingleQuery idmACLSingleQuery = (IdmACLSingleQuery) o;
    return Objects.equals(this.actions, idmACLSingleQuery.actions) &&
        Objects.equals(this.nodeIDs, idmACLSingleQuery.nodeIDs) &&
        Objects.equals(this.roleIDs, idmACLSingleQuery.roleIDs) &&
        Objects.equals(this.workspaceIDs, idmACLSingleQuery.workspaceIDs) &&
        Objects.equals(this.not, idmACLSingleQuery.not);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, nodeIDs, roleIDs, workspaceIDs, not);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdmACLSingleQuery {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    nodeIDs: ").append(toIndentedString(nodeIDs)).append("\n");
    sb.append("    roleIDs: ").append(toIndentedString(roleIDs)).append("\n");
    sb.append("    workspaceIDs: ").append(toIndentedString(workspaceIDs)).append("\n");
    sb.append("    not: ").append(toIndentedString(not)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Actions");
    openapiFields.add("NodeIDs");
    openapiFields.add("RoleIDs");
    openapiFields.add("WorkspaceIDs");
    openapiFields.add("not");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IdmACLSingleQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IdmACLSingleQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdmACLSingleQuery is not found in the empty JSON string", IdmACLSingleQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IdmACLSingleQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdmACLSingleQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("Actions") != null && !jsonObj.get("Actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("Actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Actions` to be an array in the JSON string but got `%s`", jsonObj.get("Actions").toString()));
          }

          // validate the optional field `Actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            IdmACLAction.validateJsonObject(jsonArrayactions.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NodeIDs") != null && !jsonObj.get("NodeIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeIDs` to be an array in the JSON string but got `%s`", jsonObj.get("NodeIDs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RoleIDs") != null && !jsonObj.get("RoleIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleIDs` to be an array in the JSON string but got `%s`", jsonObj.get("RoleIDs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WorkspaceIDs") != null && !jsonObj.get("WorkspaceIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkspaceIDs` to be an array in the JSON string but got `%s`", jsonObj.get("WorkspaceIDs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdmACLSingleQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdmACLSingleQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdmACLSingleQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdmACLSingleQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<IdmACLSingleQuery>() {
           @Override
           public void write(JsonWriter out, IdmACLSingleQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdmACLSingleQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IdmACLSingleQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IdmACLSingleQuery
  * @throws IOException if the JSON string is invalid with respect to IdmACLSingleQuery
  */
  public static IdmACLSingleQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdmACLSingleQuery.class);
  }

 /**
  * Convert an instance of IdmACLSingleQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

