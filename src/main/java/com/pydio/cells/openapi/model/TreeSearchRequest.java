/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * TreeSearchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-06T14:22:40.613083+01:00[Europe/Berlin]")
public class TreeSearchRequest {
  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Boolean details;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private Integer from;

  public static final String SERIALIZED_NAME_QUERY = "Query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private TreeQuery query;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_STAT_FLAGS = "StatFlags";
  @SerializedName(SERIALIZED_NAME_STAT_FLAGS)
  private List<Long> statFlags = null;

  public TreeSearchRequest() {
  }

  public TreeSearchRequest details(Boolean details) {
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDetails() {
    return details;
  }


  public void setDetails(Boolean details) {
    this.details = details;
  }


  public TreeSearchRequest from(Integer from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFrom() {
    return from;
  }


  public void setFrom(Integer from) {
    this.from = from;
  }


  public TreeSearchRequest query(TreeQuery query) {
    
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TreeQuery getQuery() {
    return query;
  }


  public void setQuery(TreeQuery query) {
    this.query = query;
  }


  public TreeSearchRequest size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public TreeSearchRequest statFlags(List<Long> statFlags) {
    
    this.statFlags = statFlags;
    return this;
  }

  public TreeSearchRequest addStatFlagsItem(Long statFlagsItem) {
    if (this.statFlags == null) {
      this.statFlags = new ArrayList<>();
    }
    this.statFlags.add(statFlagsItem);
    return this;
  }

   /**
   * Get statFlags
   * @return statFlags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Long> getStatFlags() {
    return statFlags;
  }


  public void setStatFlags(List<Long> statFlags) {
    this.statFlags = statFlags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TreeSearchRequest treeSearchRequest = (TreeSearchRequest) o;
    return Objects.equals(this.details, treeSearchRequest.details) &&
        Objects.equals(this.from, treeSearchRequest.from) &&
        Objects.equals(this.query, treeSearchRequest.query) &&
        Objects.equals(this.size, treeSearchRequest.size) &&
        Objects.equals(this.statFlags, treeSearchRequest.statFlags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, from, query, size, statFlags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TreeSearchRequest {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    statFlags: ").append(toIndentedString(statFlags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Details");
    openapiFields.add("From");
    openapiFields.add("Query");
    openapiFields.add("Size");
    openapiFields.add("StatFlags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TreeSearchRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TreeSearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TreeSearchRequest is not found in the empty JSON string", TreeSearchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TreeSearchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TreeSearchRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `Query`
      if (jsonObj.get("Query") != null && !jsonObj.get("Query").isJsonNull()) {
        TreeQuery.validateJsonObject(jsonObj.getAsJsonObject("Query"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("StatFlags") != null && !jsonObj.get("StatFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatFlags` to be an array in the JSON string but got `%s`", jsonObj.get("StatFlags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TreeSearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TreeSearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TreeSearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TreeSearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TreeSearchRequest>() {
           @Override
           public void write(JsonWriter out, TreeSearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TreeSearchRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TreeSearchRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TreeSearchRequest
  * @throws IOException if the JSON string is invalid with respect to TreeSearchRequest
  */
  public static TreeSearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TreeSearchRequest.class);
  }

 /**
  * Convert an instance of TreeSearchRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

