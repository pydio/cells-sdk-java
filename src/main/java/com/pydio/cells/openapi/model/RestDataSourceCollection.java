/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

/**
 * RestDataSourceCollection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-15T17:35:14.400736592+02:00[Europe/Berlin]")
public class RestDataSourceCollection {
  public static final String SERIALIZED_NAME_DATA_SOURCES = "DataSources";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCES)
  private List<ObjectDataSource> dataSources;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public RestDataSourceCollection() {
  }

  public RestDataSourceCollection dataSources(List<ObjectDataSource> dataSources) {
    
    this.dataSources = dataSources;
    return this;
  }

  public RestDataSourceCollection addDataSourcesItem(ObjectDataSource dataSourcesItem) {
    if (this.dataSources == null) {
      this.dataSources = new ArrayList<>();
    }
    this.dataSources.add(dataSourcesItem);
    return this;
  }

   /**
   * Get dataSources
   * @return dataSources
  **/
  @javax.annotation.Nullable

  public List<ObjectDataSource> getDataSources() {
    return dataSources;
  }


  public void setDataSources(List<ObjectDataSource> dataSources) {
    this.dataSources = dataSources;
  }


  public RestDataSourceCollection total(Integer total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable

  public Integer getTotal() {
    return total;
  }


  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestDataSourceCollection restDataSourceCollection = (RestDataSourceCollection) o;
    return Objects.equals(this.dataSources, restDataSourceCollection.dataSources) &&
        Objects.equals(this.total, restDataSourceCollection.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSources, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestDataSourceCollection {\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataSources");
    openapiFields.add("Total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RestDataSourceCollection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RestDataSourceCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestDataSourceCollection is not found in the empty JSON string", RestDataSourceCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RestDataSourceCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestDataSourceCollection` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("DataSources") != null && !jsonObj.get("DataSources").isJsonNull()) {
        JsonArray jsonArraydataSources = jsonObj.getAsJsonArray("DataSources");
        if (jsonArraydataSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DataSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DataSources` to be an array in the JSON string but got `%s`", jsonObj.get("DataSources").toString()));
          }

          // validate the optional field `DataSources` (array)
          for (int i = 0; i < jsonArraydataSources.size(); i++) {
            ObjectDataSource.validateJsonObject(jsonArraydataSources.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestDataSourceCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestDataSourceCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestDataSourceCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestDataSourceCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<RestDataSourceCollection>() {
           @Override
           public void write(JsonWriter out, RestDataSourceCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestDataSourceCollection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestDataSourceCollection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestDataSourceCollection
  * @throws IOException if the JSON string is invalid with respect to RestDataSourceCollection
  */
  public static RestDataSourceCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestDataSourceCollection.class);
  }

 /**
  * Convert an instance of RestDataSourceCollection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

