/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * JobsAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-19T16:47:50.322929+01:00[Europe/Berlin]", comments = "Generator version: 7.11.0")
public class JobsAction {
    public static final String SERIALIZED_NAME_ACTION_OUTPUT_FILTER = "ActionOutputFilter";
    @SerializedName(SERIALIZED_NAME_ACTION_OUTPUT_FILTER)
    @javax.annotation.Nullable
    private JobsActionOutputFilter actionOutputFilter;

    public static final String SERIALIZED_NAME_BREAK_AFTER = "BreakAfter";
    @SerializedName(SERIALIZED_NAME_BREAK_AFTER)
    @javax.annotation.Nullable
    private Boolean breakAfter;

    public static final String SERIALIZED_NAME_BYPASS = "Bypass";
    @SerializedName(SERIALIZED_NAME_BYPASS)
    @javax.annotation.Nullable
    private Boolean bypass;

    public static final String SERIALIZED_NAME_CHAINED_ACTIONS = "ChainedActions";
    @SerializedName(SERIALIZED_NAME_CHAINED_ACTIONS)
    @javax.annotation.Nullable
    private List<JobsAction> chainedActions = new ArrayList<>();

    public static final String SERIALIZED_NAME_CHAT_EVENT_FILTER = "ChatEventFilter";
    @SerializedName(SERIALIZED_NAME_CHAT_EVENT_FILTER)
    @javax.annotation.Nullable
    private JobsChatEventFilter chatEventFilter;

    public static final String SERIALIZED_NAME_CONTEXT_META_FILTER = "ContextMetaFilter";
    @SerializedName(SERIALIZED_NAME_CONTEXT_META_FILTER)
    @javax.annotation.Nullable
    private JobsContextMetaFilter contextMetaFilter;

    public static final String SERIALIZED_NAME_DATA_FILTER = "DataFilter";
    @SerializedName(SERIALIZED_NAME_DATA_FILTER)
    @javax.annotation.Nullable
    private JobsDataSelector dataFilter;

    public static final String SERIALIZED_NAME_DATA_SELECTOR = "DataSelector";
    @SerializedName(SERIALIZED_NAME_DATA_SELECTOR)
    @javax.annotation.Nullable
    private JobsDataSelector dataSelector;

    public static final String SERIALIZED_NAME_DATA_SOURCE_FILTER = "DataSourceFilter";
    @SerializedName(SERIALIZED_NAME_DATA_SOURCE_FILTER)
    @javax.annotation.Nullable
    private JobsDataSourceSelector dataSourceFilter;

    public static final String SERIALIZED_NAME_DATA_SOURCE_SELECTOR = "DataSourceSelector";
    @SerializedName(SERIALIZED_NAME_DATA_SOURCE_SELECTOR)
    @javax.annotation.Nullable
    private JobsDataSourceSelector dataSourceSelector;

    public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
    @SerializedName(SERIALIZED_NAME_DESCRIPTION)
    @javax.annotation.Nullable
    private String description;

    public static final String SERIALIZED_NAME_FAILED_FILTER_ACTIONS = "FailedFilterActions";
    @SerializedName(SERIALIZED_NAME_FAILED_FILTER_ACTIONS)
    @javax.annotation.Nullable
    private List<JobsAction> failedFilterActions = new ArrayList<>();

    public static final String SERIALIZED_NAME_I_D = "ID";
    @SerializedName(SERIALIZED_NAME_I_D)
    @javax.annotation.Nullable
    private String ID;

    public static final String SERIALIZED_NAME_IDM_FILTER = "IdmFilter";
    @SerializedName(SERIALIZED_NAME_IDM_FILTER)
    @javax.annotation.Nullable
    private JobsIdmSelector idmFilter;

    public static final String SERIALIZED_NAME_IDM_SELECTOR = "IdmSelector";
    @SerializedName(SERIALIZED_NAME_IDM_SELECTOR)
    @javax.annotation.Nullable
    private JobsIdmSelector idmSelector;

    public static final String SERIALIZED_NAME_LABEL = "Label";
    @SerializedName(SERIALIZED_NAME_LABEL)
    @javax.annotation.Nullable
    private String label;

    public static final String SERIALIZED_NAME_MERGE_ACTION = "MergeAction";
    @SerializedName(SERIALIZED_NAME_MERGE_ACTION)
    @javax.annotation.Nullable
    private JobsAction mergeAction;

    public static final String SERIALIZED_NAME_NODES_FILTER = "NodesFilter";
    @SerializedName(SERIALIZED_NAME_NODES_FILTER)
    @javax.annotation.Nullable
    private JobsNodesSelector nodesFilter;

    public static final String SERIALIZED_NAME_NODES_SELECTOR = "NodesSelector";
    @SerializedName(SERIALIZED_NAME_NODES_SELECTOR)
    @javax.annotation.Nullable
    private JobsNodesSelector nodesSelector;

    public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
    @SerializedName(SERIALIZED_NAME_PARAMETERS)
    @javax.annotation.Nullable
    private Map<String, String> parameters = new HashMap<>();

    public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
    @SerializedName(SERIALIZED_NAME_TIMEOUT)
    @javax.annotation.Nullable
    private String timeout;

    public static final String SERIALIZED_NAME_TRIGGER_FILTER = "TriggerFilter";
    @SerializedName(SERIALIZED_NAME_TRIGGER_FILTER)
    @javax.annotation.Nullable
    private JobsTriggerFilter triggerFilter;

    public static final String SERIALIZED_NAME_USERS_FILTER = "UsersFilter";
    @SerializedName(SERIALIZED_NAME_USERS_FILTER)
    @javax.annotation.Nullable
    private JobsUsersSelector usersFilter;

    public static final String SERIALIZED_NAME_USERS_SELECTOR = "UsersSelector";
    @SerializedName(SERIALIZED_NAME_USERS_SELECTOR)
    @javax.annotation.Nullable
    private JobsUsersSelector usersSelector;

    public JobsAction() {
    }

    public JobsAction actionOutputFilter(@javax.annotation.Nullable JobsActionOutputFilter actionOutputFilter) {
        this.actionOutputFilter = actionOutputFilter;
        return this;
    }

    /**
     * Get actionOutputFilter
     *
     * @return actionOutputFilter
     */
    @javax.annotation.Nullable
    public JobsActionOutputFilter getActionOutputFilter() {
        return actionOutputFilter;
    }

    public void setActionOutputFilter(@javax.annotation.Nullable JobsActionOutputFilter actionOutputFilter) {
        this.actionOutputFilter = actionOutputFilter;
    }


    public JobsAction breakAfter(@javax.annotation.Nullable Boolean breakAfter) {
        this.breakAfter = breakAfter;
        return this;
    }

    /**
     * Get breakAfter
     *
     * @return breakAfter
     */
    @javax.annotation.Nullable
    public Boolean getBreakAfter() {
        return breakAfter;
    }

    public void setBreakAfter(@javax.annotation.Nullable Boolean breakAfter) {
        this.breakAfter = breakAfter;
    }


    public JobsAction bypass(@javax.annotation.Nullable Boolean bypass) {
        this.bypass = bypass;
        return this;
    }

    /**
     * Get bypass
     *
     * @return bypass
     */
    @javax.annotation.Nullable
    public Boolean getBypass() {
        return bypass;
    }

    public void setBypass(@javax.annotation.Nullable Boolean bypass) {
        this.bypass = bypass;
    }


    public JobsAction chainedActions(@javax.annotation.Nullable List<JobsAction> chainedActions) {
        this.chainedActions = chainedActions;
        return this;
    }

    public JobsAction addChainedActionsItem(JobsAction chainedActionsItem) {
        if (this.chainedActions == null) {
            this.chainedActions = new ArrayList<>();
        }
        this.chainedActions.add(chainedActionsItem);
        return this;
    }

    /**
     * Get chainedActions
     *
     * @return chainedActions
     */
    @javax.annotation.Nullable
    public List<JobsAction> getChainedActions() {
        return chainedActions;
    }

    public void setChainedActions(@javax.annotation.Nullable List<JobsAction> chainedActions) {
        this.chainedActions = chainedActions;
    }


    public JobsAction chatEventFilter(@javax.annotation.Nullable JobsChatEventFilter chatEventFilter) {
        this.chatEventFilter = chatEventFilter;
        return this;
    }

    /**
     * Get chatEventFilter
     *
     * @return chatEventFilter
     */
    @javax.annotation.Nullable
    public JobsChatEventFilter getChatEventFilter() {
        return chatEventFilter;
    }

    public void setChatEventFilter(@javax.annotation.Nullable JobsChatEventFilter chatEventFilter) {
        this.chatEventFilter = chatEventFilter;
    }


    public JobsAction contextMetaFilter(@javax.annotation.Nullable JobsContextMetaFilter contextMetaFilter) {
        this.contextMetaFilter = contextMetaFilter;
        return this;
    }

    /**
     * Get contextMetaFilter
     *
     * @return contextMetaFilter
     */
    @javax.annotation.Nullable
    public JobsContextMetaFilter getContextMetaFilter() {
        return contextMetaFilter;
    }

    public void setContextMetaFilter(@javax.annotation.Nullable JobsContextMetaFilter contextMetaFilter) {
        this.contextMetaFilter = contextMetaFilter;
    }


    public JobsAction dataFilter(@javax.annotation.Nullable JobsDataSelector dataFilter) {
        this.dataFilter = dataFilter;
        return this;
    }

    /**
     * Get dataFilter
     *
     * @return dataFilter
     */
    @javax.annotation.Nullable
    public JobsDataSelector getDataFilter() {
        return dataFilter;
    }

    public void setDataFilter(@javax.annotation.Nullable JobsDataSelector dataFilter) {
        this.dataFilter = dataFilter;
    }


    public JobsAction dataSelector(@javax.annotation.Nullable JobsDataSelector dataSelector) {
        this.dataSelector = dataSelector;
        return this;
    }

    /**
     * Get dataSelector
     *
     * @return dataSelector
     */
    @javax.annotation.Nullable
    public JobsDataSelector getDataSelector() {
        return dataSelector;
    }

    public void setDataSelector(@javax.annotation.Nullable JobsDataSelector dataSelector) {
        this.dataSelector = dataSelector;
    }


    public JobsAction dataSourceFilter(@javax.annotation.Nullable JobsDataSourceSelector dataSourceFilter) {
        this.dataSourceFilter = dataSourceFilter;
        return this;
    }

    /**
     * Get dataSourceFilter
     *
     * @return dataSourceFilter
     */
    @javax.annotation.Nullable
    public JobsDataSourceSelector getDataSourceFilter() {
        return dataSourceFilter;
    }

    public void setDataSourceFilter(@javax.annotation.Nullable JobsDataSourceSelector dataSourceFilter) {
        this.dataSourceFilter = dataSourceFilter;
    }


    public JobsAction dataSourceSelector(@javax.annotation.Nullable JobsDataSourceSelector dataSourceSelector) {
        this.dataSourceSelector = dataSourceSelector;
        return this;
    }

    /**
     * Get dataSourceSelector
     *
     * @return dataSourceSelector
     */
    @javax.annotation.Nullable
    public JobsDataSourceSelector getDataSourceSelector() {
        return dataSourceSelector;
    }

    public void setDataSourceSelector(@javax.annotation.Nullable JobsDataSourceSelector dataSourceSelector) {
        this.dataSourceSelector = dataSourceSelector;
    }


    public JobsAction description(@javax.annotation.Nullable String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     *
     * @return description
     */
    @javax.annotation.Nullable
    public String getDescription() {
        return description;
    }

    public void setDescription(@javax.annotation.Nullable String description) {
        this.description = description;
    }


    public JobsAction failedFilterActions(@javax.annotation.Nullable List<JobsAction> failedFilterActions) {
        this.failedFilterActions = failedFilterActions;
        return this;
    }

    public JobsAction addFailedFilterActionsItem(JobsAction failedFilterActionsItem) {
        if (this.failedFilterActions == null) {
            this.failedFilterActions = new ArrayList<>();
        }
        this.failedFilterActions.add(failedFilterActionsItem);
        return this;
    }

    /**
     * Get failedFilterActions
     *
     * @return failedFilterActions
     */
    @javax.annotation.Nullable
    public List<JobsAction> getFailedFilterActions() {
        return failedFilterActions;
    }

    public void setFailedFilterActions(@javax.annotation.Nullable List<JobsAction> failedFilterActions) {
        this.failedFilterActions = failedFilterActions;
    }


    public JobsAction ID(@javax.annotation.Nullable String ID) {
        this.ID = ID;
        return this;
    }

    /**
     * Get ID
     *
     * @return ID
     */
    @javax.annotation.Nullable
    public String getID() {
        return ID;
    }

    public void setID(@javax.annotation.Nullable String ID) {
        this.ID = ID;
    }


    public JobsAction idmFilter(@javax.annotation.Nullable JobsIdmSelector idmFilter) {
        this.idmFilter = idmFilter;
        return this;
    }

    /**
     * Get idmFilter
     *
     * @return idmFilter
     */
    @javax.annotation.Nullable
    public JobsIdmSelector getIdmFilter() {
        return idmFilter;
    }

    public void setIdmFilter(@javax.annotation.Nullable JobsIdmSelector idmFilter) {
        this.idmFilter = idmFilter;
    }


    public JobsAction idmSelector(@javax.annotation.Nullable JobsIdmSelector idmSelector) {
        this.idmSelector = idmSelector;
        return this;
    }

    /**
     * Get idmSelector
     *
     * @return idmSelector
     */
    @javax.annotation.Nullable
    public JobsIdmSelector getIdmSelector() {
        return idmSelector;
    }

    public void setIdmSelector(@javax.annotation.Nullable JobsIdmSelector idmSelector) {
        this.idmSelector = idmSelector;
    }


    public JobsAction label(@javax.annotation.Nullable String label) {
        this.label = label;
        return this;
    }

    /**
     * Get label
     *
     * @return label
     */
    @javax.annotation.Nullable
    public String getLabel() {
        return label;
    }

    public void setLabel(@javax.annotation.Nullable String label) {
        this.label = label;
    }


    public JobsAction mergeAction(@javax.annotation.Nullable JobsAction mergeAction) {
        this.mergeAction = mergeAction;
        return this;
    }

    /**
     * Get mergeAction
     *
     * @return mergeAction
     */
    @javax.annotation.Nullable
    public JobsAction getMergeAction() {
        return mergeAction;
    }

    public void setMergeAction(@javax.annotation.Nullable JobsAction mergeAction) {
        this.mergeAction = mergeAction;
    }


    public JobsAction nodesFilter(@javax.annotation.Nullable JobsNodesSelector nodesFilter) {
        this.nodesFilter = nodesFilter;
        return this;
    }

    /**
     * Get nodesFilter
     *
     * @return nodesFilter
     */
    @javax.annotation.Nullable
    public JobsNodesSelector getNodesFilter() {
        return nodesFilter;
    }

    public void setNodesFilter(@javax.annotation.Nullable JobsNodesSelector nodesFilter) {
        this.nodesFilter = nodesFilter;
    }


    public JobsAction nodesSelector(@javax.annotation.Nullable JobsNodesSelector nodesSelector) {
        this.nodesSelector = nodesSelector;
        return this;
    }

    /**
     * Get nodesSelector
     *
     * @return nodesSelector
     */
    @javax.annotation.Nullable
    public JobsNodesSelector getNodesSelector() {
        return nodesSelector;
    }

    public void setNodesSelector(@javax.annotation.Nullable JobsNodesSelector nodesSelector) {
        this.nodesSelector = nodesSelector;
    }


    public JobsAction parameters(@javax.annotation.Nullable Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    public JobsAction putParametersItem(String key, String parametersItem) {
        if (this.parameters == null) {
            this.parameters = new HashMap<>();
        }
        this.parameters.put(key, parametersItem);
        return this;
    }

    /**
     * Get parameters
     *
     * @return parameters
     */
    @javax.annotation.Nullable
    public Map<String, String> getParameters() {
        return parameters;
    }

    public void setParameters(@javax.annotation.Nullable Map<String, String> parameters) {
        this.parameters = parameters;
    }


    public JobsAction timeout(@javax.annotation.Nullable String timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get timeout
     *
     * @return timeout
     */
    @javax.annotation.Nullable
    public String getTimeout() {
        return timeout;
    }

    public void setTimeout(@javax.annotation.Nullable String timeout) {
        this.timeout = timeout;
    }


    public JobsAction triggerFilter(@javax.annotation.Nullable JobsTriggerFilter triggerFilter) {
        this.triggerFilter = triggerFilter;
        return this;
    }

    /**
     * Get triggerFilter
     *
     * @return triggerFilter
     */
    @javax.annotation.Nullable
    public JobsTriggerFilter getTriggerFilter() {
        return triggerFilter;
    }

    public void setTriggerFilter(@javax.annotation.Nullable JobsTriggerFilter triggerFilter) {
        this.triggerFilter = triggerFilter;
    }


    public JobsAction usersFilter(@javax.annotation.Nullable JobsUsersSelector usersFilter) {
        this.usersFilter = usersFilter;
        return this;
    }

    /**
     * Get usersFilter
     *
     * @return usersFilter
     */
    @javax.annotation.Nullable
    public JobsUsersSelector getUsersFilter() {
        return usersFilter;
    }

    public void setUsersFilter(@javax.annotation.Nullable JobsUsersSelector usersFilter) {
        this.usersFilter = usersFilter;
    }


    public JobsAction usersSelector(@javax.annotation.Nullable JobsUsersSelector usersSelector) {
        this.usersSelector = usersSelector;
        return this;
    }

    /**
     * Get usersSelector
     *
     * @return usersSelector
     */
    @javax.annotation.Nullable
    public JobsUsersSelector getUsersSelector() {
        return usersSelector;
    }

    public void setUsersSelector(@javax.annotation.Nullable JobsUsersSelector usersSelector) {
        this.usersSelector = usersSelector;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobsAction jobsAction = (JobsAction) o;
        return Objects.equals(this.actionOutputFilter, jobsAction.actionOutputFilter) &&
                Objects.equals(this.breakAfter, jobsAction.breakAfter) &&
                Objects.equals(this.bypass, jobsAction.bypass) &&
                Objects.equals(this.chainedActions, jobsAction.chainedActions) &&
                Objects.equals(this.chatEventFilter, jobsAction.chatEventFilter) &&
                Objects.equals(this.contextMetaFilter, jobsAction.contextMetaFilter) &&
                Objects.equals(this.dataFilter, jobsAction.dataFilter) &&
                Objects.equals(this.dataSelector, jobsAction.dataSelector) &&
                Objects.equals(this.dataSourceFilter, jobsAction.dataSourceFilter) &&
                Objects.equals(this.dataSourceSelector, jobsAction.dataSourceSelector) &&
                Objects.equals(this.description, jobsAction.description) &&
                Objects.equals(this.failedFilterActions, jobsAction.failedFilterActions) &&
                Objects.equals(this.ID, jobsAction.ID) &&
                Objects.equals(this.idmFilter, jobsAction.idmFilter) &&
                Objects.equals(this.idmSelector, jobsAction.idmSelector) &&
                Objects.equals(this.label, jobsAction.label) &&
                Objects.equals(this.mergeAction, jobsAction.mergeAction) &&
                Objects.equals(this.nodesFilter, jobsAction.nodesFilter) &&
                Objects.equals(this.nodesSelector, jobsAction.nodesSelector) &&
                Objects.equals(this.parameters, jobsAction.parameters) &&
                Objects.equals(this.timeout, jobsAction.timeout) &&
                Objects.equals(this.triggerFilter, jobsAction.triggerFilter) &&
                Objects.equals(this.usersFilter, jobsAction.usersFilter) &&
                Objects.equals(this.usersSelector, jobsAction.usersSelector);
    }

    @Override
    public int hashCode() {
        return Objects.hash(actionOutputFilter, breakAfter, bypass, chainedActions, chatEventFilter, contextMetaFilter, dataFilter, dataSelector, dataSourceFilter, dataSourceSelector, description, failedFilterActions, ID, idmFilter, idmSelector, label, mergeAction, nodesFilter, nodesSelector, parameters, timeout, triggerFilter, usersFilter, usersSelector);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobsAction {\n");
        sb.append("    actionOutputFilter: ").append(toIndentedString(actionOutputFilter)).append("\n");
        sb.append("    breakAfter: ").append(toIndentedString(breakAfter)).append("\n");
        sb.append("    bypass: ").append(toIndentedString(bypass)).append("\n");
        sb.append("    chainedActions: ").append(toIndentedString(chainedActions)).append("\n");
        sb.append("    chatEventFilter: ").append(toIndentedString(chatEventFilter)).append("\n");
        sb.append("    contextMetaFilter: ").append(toIndentedString(contextMetaFilter)).append("\n");
        sb.append("    dataFilter: ").append(toIndentedString(dataFilter)).append("\n");
        sb.append("    dataSelector: ").append(toIndentedString(dataSelector)).append("\n");
        sb.append("    dataSourceFilter: ").append(toIndentedString(dataSourceFilter)).append("\n");
        sb.append("    dataSourceSelector: ").append(toIndentedString(dataSourceSelector)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    failedFilterActions: ").append(toIndentedString(failedFilterActions)).append("\n");
        sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
        sb.append("    idmFilter: ").append(toIndentedString(idmFilter)).append("\n");
        sb.append("    idmSelector: ").append(toIndentedString(idmSelector)).append("\n");
        sb.append("    label: ").append(toIndentedString(label)).append("\n");
        sb.append("    mergeAction: ").append(toIndentedString(mergeAction)).append("\n");
        sb.append("    nodesFilter: ").append(toIndentedString(nodesFilter)).append("\n");
        sb.append("    nodesSelector: ").append(toIndentedString(nodesSelector)).append("\n");
        sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
        sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
        sb.append("    triggerFilter: ").append(toIndentedString(triggerFilter)).append("\n");
        sb.append("    usersFilter: ").append(toIndentedString(usersFilter)).append("\n");
        sb.append("    usersSelector: ").append(toIndentedString(usersSelector)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("ActionOutputFilter");
        openapiFields.add("BreakAfter");
        openapiFields.add("Bypass");
        openapiFields.add("ChainedActions");
        openapiFields.add("ChatEventFilter");
        openapiFields.add("ContextMetaFilter");
        openapiFields.add("DataFilter");
        openapiFields.add("DataSelector");
        openapiFields.add("DataSourceFilter");
        openapiFields.add("DataSourceSelector");
        openapiFields.add("Description");
        openapiFields.add("FailedFilterActions");
        openapiFields.add("ID");
        openapiFields.add("IdmFilter");
        openapiFields.add("IdmSelector");
        openapiFields.add("Label");
        openapiFields.add("MergeAction");
        openapiFields.add("NodesFilter");
        openapiFields.add("NodesSelector");
        openapiFields.add("Parameters");
        openapiFields.add("Timeout");
        openapiFields.add("TriggerFilter");
        openapiFields.add("UsersFilter");
        openapiFields.add("UsersSelector");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to JobsAction
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!JobsAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format("The required field(s) %s in JobsAction is not found in the empty JSON string", JobsAction.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!JobsAction.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `ActionOutputFilter`
        if (jsonObj.get("ActionOutputFilter") != null && !jsonObj.get("ActionOutputFilter").isJsonNull()) {
            JobsActionOutputFilter.validateJsonElement(jsonObj.get("ActionOutputFilter"));
        }
        if (jsonObj.get("ChainedActions") != null && !jsonObj.get("ChainedActions").isJsonNull()) {
            JsonArray jsonArraychainedActions = jsonObj.getAsJsonArray("ChainedActions");
            if (jsonArraychainedActions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("ChainedActions").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `ChainedActions` to be an array in the JSON string but got `%s`", jsonObj.get("ChainedActions").toString()));
                }

                // validate the optional field `ChainedActions` (array)
                for (int i = 0; i < jsonArraychainedActions.size(); i++) {
                    JobsAction.validateJsonElement(jsonArraychainedActions.get(i));
                }
                ;
            }
        }
        // validate the optional field `ChatEventFilter`
        if (jsonObj.get("ChatEventFilter") != null && !jsonObj.get("ChatEventFilter").isJsonNull()) {
            JobsChatEventFilter.validateJsonElement(jsonObj.get("ChatEventFilter"));
        }
        // validate the optional field `ContextMetaFilter`
        if (jsonObj.get("ContextMetaFilter") != null && !jsonObj.get("ContextMetaFilter").isJsonNull()) {
            JobsContextMetaFilter.validateJsonElement(jsonObj.get("ContextMetaFilter"));
        }
        // validate the optional field `DataFilter`
        if (jsonObj.get("DataFilter") != null && !jsonObj.get("DataFilter").isJsonNull()) {
            JobsDataSelector.validateJsonElement(jsonObj.get("DataFilter"));
        }
        // validate the optional field `DataSelector`
        if (jsonObj.get("DataSelector") != null && !jsonObj.get("DataSelector").isJsonNull()) {
            JobsDataSelector.validateJsonElement(jsonObj.get("DataSelector"));
        }
        // validate the optional field `DataSourceFilter`
        if (jsonObj.get("DataSourceFilter") != null && !jsonObj.get("DataSourceFilter").isJsonNull()) {
            JobsDataSourceSelector.validateJsonElement(jsonObj.get("DataSourceFilter"));
        }
        // validate the optional field `DataSourceSelector`
        if (jsonObj.get("DataSourceSelector") != null && !jsonObj.get("DataSourceSelector").isJsonNull()) {
            JobsDataSourceSelector.validateJsonElement(jsonObj.get("DataSourceSelector"));
        }
        if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
        }
        if (jsonObj.get("FailedFilterActions") != null && !jsonObj.get("FailedFilterActions").isJsonNull()) {
            JsonArray jsonArrayfailedFilterActions = jsonObj.getAsJsonArray("FailedFilterActions");
            if (jsonArrayfailedFilterActions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("FailedFilterActions").isJsonArray()) {
                    throw new IllegalArgumentException(String.format("Expected the field `FailedFilterActions` to be an array in the JSON string but got `%s`", jsonObj.get("FailedFilterActions").toString()));
                }

                // validate the optional field `FailedFilterActions` (array)
                for (int i = 0; i < jsonArrayfailedFilterActions.size(); i++) {
                    JobsAction.validateJsonElement(jsonArrayfailedFilterActions.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
        }
        // validate the optional field `IdmFilter`
        if (jsonObj.get("IdmFilter") != null && !jsonObj.get("IdmFilter").isJsonNull()) {
            JobsIdmSelector.validateJsonElement(jsonObj.get("IdmFilter"));
        }
        // validate the optional field `IdmSelector`
        if (jsonObj.get("IdmSelector") != null && !jsonObj.get("IdmSelector").isJsonNull()) {
            JobsIdmSelector.validateJsonElement(jsonObj.get("IdmSelector"));
        }
        if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
        }
        // validate the optional field `MergeAction`
        if (jsonObj.get("MergeAction") != null && !jsonObj.get("MergeAction").isJsonNull()) {
            JobsAction.validateJsonElement(jsonObj.get("MergeAction"));
        }
        // validate the optional field `NodesFilter`
        if (jsonObj.get("NodesFilter") != null && !jsonObj.get("NodesFilter").isJsonNull()) {
            JobsNodesSelector.validateJsonElement(jsonObj.get("NodesFilter"));
        }
        // validate the optional field `NodesSelector`
        if (jsonObj.get("NodesSelector") != null && !jsonObj.get("NodesSelector").isJsonNull()) {
            JobsNodesSelector.validateJsonElement(jsonObj.get("NodesSelector"));
        }
        if ((jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) && !jsonObj.get("Timeout").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `Timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timeout").toString()));
        }
        // validate the optional field `TriggerFilter`
        if (jsonObj.get("TriggerFilter") != null && !jsonObj.get("TriggerFilter").isJsonNull()) {
            JobsTriggerFilter.validateJsonElement(jsonObj.get("TriggerFilter"));
        }
        // validate the optional field `UsersFilter`
        if (jsonObj.get("UsersFilter") != null && !jsonObj.get("UsersFilter").isJsonNull()) {
            JobsUsersSelector.validateJsonElement(jsonObj.get("UsersFilter"));
        }
        // validate the optional field `UsersSelector`
        if (jsonObj.get("UsersSelector") != null && !jsonObj.get("UsersSelector").isJsonNull()) {
            JobsUsersSelector.validateJsonElement(jsonObj.get("UsersSelector"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!JobsAction.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'JobsAction' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<JobsAction> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(JobsAction.class));

            return (TypeAdapter<T>) new TypeAdapter<JobsAction>() {
                @Override
                public void write(JsonWriter out, JobsAction value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public JobsAction read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of JobsAction given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of JobsAction
     * @throws IOException if the JSON string is invalid with respect to JobsAction
     */
    public static JobsAction fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, JobsAction.class);
    }

    /**
     * Convert an instance of JobsAction to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

