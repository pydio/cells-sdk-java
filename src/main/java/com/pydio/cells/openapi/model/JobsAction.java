/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * JobsAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-06T14:22:40.613083+01:00[Europe/Berlin]")
public class JobsAction {
  public static final String SERIALIZED_NAME_ACTION_OUTPUT_FILTER = "ActionOutputFilter";
  @SerializedName(SERIALIZED_NAME_ACTION_OUTPUT_FILTER)
  private JobsActionOutputFilter actionOutputFilter;

  public static final String SERIALIZED_NAME_BREAK_AFTER = "BreakAfter";
  @SerializedName(SERIALIZED_NAME_BREAK_AFTER)
  private Boolean breakAfter;

  public static final String SERIALIZED_NAME_BYPASS = "Bypass";
  @SerializedName(SERIALIZED_NAME_BYPASS)
  private Boolean bypass;

  public static final String SERIALIZED_NAME_CHAINED_ACTIONS = "ChainedActions";
  @SerializedName(SERIALIZED_NAME_CHAINED_ACTIONS)
  private List<JobsAction> chainedActions = null;

  public static final String SERIALIZED_NAME_CONTEXT_META_FILTER = "ContextMetaFilter";
  @SerializedName(SERIALIZED_NAME_CONTEXT_META_FILTER)
  private JobsContextMetaFilter contextMetaFilter;

  public static final String SERIALIZED_NAME_DATA_SOURCE_FILTER = "DataSourceFilter";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_FILTER)
  private JobsDataSourceSelector dataSourceFilter;

  public static final String SERIALIZED_NAME_DATA_SOURCE_SELECTOR = "DataSourceSelector";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_SELECTOR)
  private JobsDataSourceSelector dataSourceSelector;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FAILED_FILTER_ACTIONS = "FailedFilterActions";
  @SerializedName(SERIALIZED_NAME_FAILED_FILTER_ACTIONS)
  private List<JobsAction> failedFilterActions = null;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_IDM_FILTER = "IdmFilter";
  @SerializedName(SERIALIZED_NAME_IDM_FILTER)
  private JobsIdmSelector idmFilter;

  public static final String SERIALIZED_NAME_IDM_SELECTOR = "IdmSelector";
  @SerializedName(SERIALIZED_NAME_IDM_SELECTOR)
  private JobsIdmSelector idmSelector;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MERGE_ACTION = "MergeAction";
  @SerializedName(SERIALIZED_NAME_MERGE_ACTION)
  private JobsAction mergeAction;

  public static final String SERIALIZED_NAME_NODES_FILTER = "NodesFilter";
  @SerializedName(SERIALIZED_NAME_NODES_FILTER)
  private JobsNodesSelector nodesFilter;

  public static final String SERIALIZED_NAME_NODES_SELECTOR = "NodesSelector";
  @SerializedName(SERIALIZED_NAME_NODES_SELECTOR)
  private JobsNodesSelector nodesSelector;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = null;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_TRIGGER_FILTER = "TriggerFilter";
  @SerializedName(SERIALIZED_NAME_TRIGGER_FILTER)
  private JobsTriggerFilter triggerFilter;

  public static final String SERIALIZED_NAME_USERS_FILTER = "UsersFilter";
  @SerializedName(SERIALIZED_NAME_USERS_FILTER)
  private JobsUsersSelector usersFilter;

  public static final String SERIALIZED_NAME_USERS_SELECTOR = "UsersSelector";
  @SerializedName(SERIALIZED_NAME_USERS_SELECTOR)
  private JobsUsersSelector usersSelector;

  public JobsAction() {
  }

  public JobsAction actionOutputFilter(JobsActionOutputFilter actionOutputFilter) {
    
    this.actionOutputFilter = actionOutputFilter;
    return this;
  }

   /**
   * Get actionOutputFilter
   * @return actionOutputFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsActionOutputFilter getActionOutputFilter() {
    return actionOutputFilter;
  }


  public void setActionOutputFilter(JobsActionOutputFilter actionOutputFilter) {
    this.actionOutputFilter = actionOutputFilter;
  }


  public JobsAction breakAfter(Boolean breakAfter) {
    
    this.breakAfter = breakAfter;
    return this;
  }

   /**
   * Get breakAfter
   * @return breakAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBreakAfter() {
    return breakAfter;
  }


  public void setBreakAfter(Boolean breakAfter) {
    this.breakAfter = breakAfter;
  }


  public JobsAction bypass(Boolean bypass) {
    
    this.bypass = bypass;
    return this;
  }

   /**
   * Get bypass
   * @return bypass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBypass() {
    return bypass;
  }


  public void setBypass(Boolean bypass) {
    this.bypass = bypass;
  }


  public JobsAction chainedActions(List<JobsAction> chainedActions) {
    
    this.chainedActions = chainedActions;
    return this;
  }

  public JobsAction addChainedActionsItem(JobsAction chainedActionsItem) {
    if (this.chainedActions == null) {
      this.chainedActions = new ArrayList<>();
    }
    this.chainedActions.add(chainedActionsItem);
    return this;
  }

   /**
   * Get chainedActions
   * @return chainedActions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobsAction> getChainedActions() {
    return chainedActions;
  }


  public void setChainedActions(List<JobsAction> chainedActions) {
    this.chainedActions = chainedActions;
  }


  public JobsAction contextMetaFilter(JobsContextMetaFilter contextMetaFilter) {
    
    this.contextMetaFilter = contextMetaFilter;
    return this;
  }

   /**
   * Get contextMetaFilter
   * @return contextMetaFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsContextMetaFilter getContextMetaFilter() {
    return contextMetaFilter;
  }


  public void setContextMetaFilter(JobsContextMetaFilter contextMetaFilter) {
    this.contextMetaFilter = contextMetaFilter;
  }


  public JobsAction dataSourceFilter(JobsDataSourceSelector dataSourceFilter) {
    
    this.dataSourceFilter = dataSourceFilter;
    return this;
  }

   /**
   * Get dataSourceFilter
   * @return dataSourceFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsDataSourceSelector getDataSourceFilter() {
    return dataSourceFilter;
  }


  public void setDataSourceFilter(JobsDataSourceSelector dataSourceFilter) {
    this.dataSourceFilter = dataSourceFilter;
  }


  public JobsAction dataSourceSelector(JobsDataSourceSelector dataSourceSelector) {
    
    this.dataSourceSelector = dataSourceSelector;
    return this;
  }

   /**
   * Get dataSourceSelector
   * @return dataSourceSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsDataSourceSelector getDataSourceSelector() {
    return dataSourceSelector;
  }


  public void setDataSourceSelector(JobsDataSourceSelector dataSourceSelector) {
    this.dataSourceSelector = dataSourceSelector;
  }


  public JobsAction description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public JobsAction failedFilterActions(List<JobsAction> failedFilterActions) {
    
    this.failedFilterActions = failedFilterActions;
    return this;
  }

  public JobsAction addFailedFilterActionsItem(JobsAction failedFilterActionsItem) {
    if (this.failedFilterActions == null) {
      this.failedFilterActions = new ArrayList<>();
    }
    this.failedFilterActions.add(failedFilterActionsItem);
    return this;
  }

   /**
   * Get failedFilterActions
   * @return failedFilterActions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JobsAction> getFailedFilterActions() {
    return failedFilterActions;
  }


  public void setFailedFilterActions(List<JobsAction> failedFilterActions) {
    this.failedFilterActions = failedFilterActions;
  }


  public JobsAction ID(String ID) {
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getID() {
    return ID;
  }


  public void setID(String ID) {
    this.ID = ID;
  }


  public JobsAction idmFilter(JobsIdmSelector idmFilter) {
    
    this.idmFilter = idmFilter;
    return this;
  }

   /**
   * Get idmFilter
   * @return idmFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsIdmSelector getIdmFilter() {
    return idmFilter;
  }


  public void setIdmFilter(JobsIdmSelector idmFilter) {
    this.idmFilter = idmFilter;
  }


  public JobsAction idmSelector(JobsIdmSelector idmSelector) {
    
    this.idmSelector = idmSelector;
    return this;
  }

   /**
   * Get idmSelector
   * @return idmSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsIdmSelector getIdmSelector() {
    return idmSelector;
  }


  public void setIdmSelector(JobsIdmSelector idmSelector) {
    this.idmSelector = idmSelector;
  }


  public JobsAction label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public JobsAction mergeAction(JobsAction mergeAction) {
    
    this.mergeAction = mergeAction;
    return this;
  }

   /**
   * Get mergeAction
   * @return mergeAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsAction getMergeAction() {
    return mergeAction;
  }


  public void setMergeAction(JobsAction mergeAction) {
    this.mergeAction = mergeAction;
  }


  public JobsAction nodesFilter(JobsNodesSelector nodesFilter) {
    
    this.nodesFilter = nodesFilter;
    return this;
  }

   /**
   * Get nodesFilter
   * @return nodesFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsNodesSelector getNodesFilter() {
    return nodesFilter;
  }


  public void setNodesFilter(JobsNodesSelector nodesFilter) {
    this.nodesFilter = nodesFilter;
  }


  public JobsAction nodesSelector(JobsNodesSelector nodesSelector) {
    
    this.nodesSelector = nodesSelector;
    return this;
  }

   /**
   * Get nodesSelector
   * @return nodesSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsNodesSelector getNodesSelector() {
    return nodesSelector;
  }


  public void setNodesSelector(JobsNodesSelector nodesSelector) {
    this.nodesSelector = nodesSelector;
  }


  public JobsAction parameters(Map<String, String> parameters) {
    
    this.parameters = parameters;
    return this;
  }

  public JobsAction putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getParameters() {
    return parameters;
  }


  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public JobsAction timeout(String timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * @return timeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimeout() {
    return timeout;
  }


  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }


  public JobsAction triggerFilter(JobsTriggerFilter triggerFilter) {
    
    this.triggerFilter = triggerFilter;
    return this;
  }

   /**
   * Get triggerFilter
   * @return triggerFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsTriggerFilter getTriggerFilter() {
    return triggerFilter;
  }


  public void setTriggerFilter(JobsTriggerFilter triggerFilter) {
    this.triggerFilter = triggerFilter;
  }


  public JobsAction usersFilter(JobsUsersSelector usersFilter) {
    
    this.usersFilter = usersFilter;
    return this;
  }

   /**
   * Get usersFilter
   * @return usersFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsUsersSelector getUsersFilter() {
    return usersFilter;
  }


  public void setUsersFilter(JobsUsersSelector usersFilter) {
    this.usersFilter = usersFilter;
  }


  public JobsAction usersSelector(JobsUsersSelector usersSelector) {
    
    this.usersSelector = usersSelector;
    return this;
  }

   /**
   * Get usersSelector
   * @return usersSelector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobsUsersSelector getUsersSelector() {
    return usersSelector;
  }


  public void setUsersSelector(JobsUsersSelector usersSelector) {
    this.usersSelector = usersSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobsAction jobsAction = (JobsAction) o;
    return Objects.equals(this.actionOutputFilter, jobsAction.actionOutputFilter) &&
        Objects.equals(this.breakAfter, jobsAction.breakAfter) &&
        Objects.equals(this.bypass, jobsAction.bypass) &&
        Objects.equals(this.chainedActions, jobsAction.chainedActions) &&
        Objects.equals(this.contextMetaFilter, jobsAction.contextMetaFilter) &&
        Objects.equals(this.dataSourceFilter, jobsAction.dataSourceFilter) &&
        Objects.equals(this.dataSourceSelector, jobsAction.dataSourceSelector) &&
        Objects.equals(this.description, jobsAction.description) &&
        Objects.equals(this.failedFilterActions, jobsAction.failedFilterActions) &&
        Objects.equals(this.ID, jobsAction.ID) &&
        Objects.equals(this.idmFilter, jobsAction.idmFilter) &&
        Objects.equals(this.idmSelector, jobsAction.idmSelector) &&
        Objects.equals(this.label, jobsAction.label) &&
        Objects.equals(this.mergeAction, jobsAction.mergeAction) &&
        Objects.equals(this.nodesFilter, jobsAction.nodesFilter) &&
        Objects.equals(this.nodesSelector, jobsAction.nodesSelector) &&
        Objects.equals(this.parameters, jobsAction.parameters) &&
        Objects.equals(this.timeout, jobsAction.timeout) &&
        Objects.equals(this.triggerFilter, jobsAction.triggerFilter) &&
        Objects.equals(this.usersFilter, jobsAction.usersFilter) &&
        Objects.equals(this.usersSelector, jobsAction.usersSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionOutputFilter, breakAfter, bypass, chainedActions, contextMetaFilter, dataSourceFilter, dataSourceSelector, description, failedFilterActions, ID, idmFilter, idmSelector, label, mergeAction, nodesFilter, nodesSelector, parameters, timeout, triggerFilter, usersFilter, usersSelector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobsAction {\n");
    sb.append("    actionOutputFilter: ").append(toIndentedString(actionOutputFilter)).append("\n");
    sb.append("    breakAfter: ").append(toIndentedString(breakAfter)).append("\n");
    sb.append("    bypass: ").append(toIndentedString(bypass)).append("\n");
    sb.append("    chainedActions: ").append(toIndentedString(chainedActions)).append("\n");
    sb.append("    contextMetaFilter: ").append(toIndentedString(contextMetaFilter)).append("\n");
    sb.append("    dataSourceFilter: ").append(toIndentedString(dataSourceFilter)).append("\n");
    sb.append("    dataSourceSelector: ").append(toIndentedString(dataSourceSelector)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    failedFilterActions: ").append(toIndentedString(failedFilterActions)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    idmFilter: ").append(toIndentedString(idmFilter)).append("\n");
    sb.append("    idmSelector: ").append(toIndentedString(idmSelector)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    mergeAction: ").append(toIndentedString(mergeAction)).append("\n");
    sb.append("    nodesFilter: ").append(toIndentedString(nodesFilter)).append("\n");
    sb.append("    nodesSelector: ").append(toIndentedString(nodesSelector)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    triggerFilter: ").append(toIndentedString(triggerFilter)).append("\n");
    sb.append("    usersFilter: ").append(toIndentedString(usersFilter)).append("\n");
    sb.append("    usersSelector: ").append(toIndentedString(usersSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionOutputFilter");
    openapiFields.add("BreakAfter");
    openapiFields.add("Bypass");
    openapiFields.add("ChainedActions");
    openapiFields.add("ContextMetaFilter");
    openapiFields.add("DataSourceFilter");
    openapiFields.add("DataSourceSelector");
    openapiFields.add("Description");
    openapiFields.add("FailedFilterActions");
    openapiFields.add("ID");
    openapiFields.add("IdmFilter");
    openapiFields.add("IdmSelector");
    openapiFields.add("Label");
    openapiFields.add("MergeAction");
    openapiFields.add("NodesFilter");
    openapiFields.add("NodesSelector");
    openapiFields.add("Parameters");
    openapiFields.add("Timeout");
    openapiFields.add("TriggerFilter");
    openapiFields.add("UsersFilter");
    openapiFields.add("UsersSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobsAction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobsAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobsAction is not found in the empty JSON string", JobsAction.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JobsAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobsAction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `ActionOutputFilter`
      if (jsonObj.get("ActionOutputFilter") != null && !jsonObj.get("ActionOutputFilter").isJsonNull()) {
        JobsActionOutputFilter.validateJsonObject(jsonObj.getAsJsonObject("ActionOutputFilter"));
      }
      if (jsonObj.get("ChainedActions") != null && !jsonObj.get("ChainedActions").isJsonNull()) {
        JsonArray jsonArraychainedActions = jsonObj.getAsJsonArray("ChainedActions");
        if (jsonArraychainedActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ChainedActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ChainedActions` to be an array in the JSON string but got `%s`", jsonObj.get("ChainedActions").toString()));
          }

          // validate the optional field `ChainedActions` (array)
          for (int i = 0; i < jsonArraychainedActions.size(); i++) {
            JobsAction.validateJsonObject(jsonArraychainedActions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `ContextMetaFilter`
      if (jsonObj.get("ContextMetaFilter") != null && !jsonObj.get("ContextMetaFilter").isJsonNull()) {
        JobsContextMetaFilter.validateJsonObject(jsonObj.getAsJsonObject("ContextMetaFilter"));
      }
      // validate the optional field `DataSourceFilter`
      if (jsonObj.get("DataSourceFilter") != null && !jsonObj.get("DataSourceFilter").isJsonNull()) {
        JobsDataSourceSelector.validateJsonObject(jsonObj.getAsJsonObject("DataSourceFilter"));
      }
      // validate the optional field `DataSourceSelector`
      if (jsonObj.get("DataSourceSelector") != null && !jsonObj.get("DataSourceSelector").isJsonNull()) {
        JobsDataSourceSelector.validateJsonObject(jsonObj.getAsJsonObject("DataSourceSelector"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (jsonObj.get("FailedFilterActions") != null && !jsonObj.get("FailedFilterActions").isJsonNull()) {
        JsonArray jsonArrayfailedFilterActions = jsonObj.getAsJsonArray("FailedFilterActions");
        if (jsonArrayfailedFilterActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FailedFilterActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FailedFilterActions` to be an array in the JSON string but got `%s`", jsonObj.get("FailedFilterActions").toString()));
          }

          // validate the optional field `FailedFilterActions` (array)
          for (int i = 0; i < jsonArrayfailedFilterActions.size(); i++) {
            JobsAction.validateJsonObject(jsonArrayfailedFilterActions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      // validate the optional field `IdmFilter`
      if (jsonObj.get("IdmFilter") != null && !jsonObj.get("IdmFilter").isJsonNull()) {
        JobsIdmSelector.validateJsonObject(jsonObj.getAsJsonObject("IdmFilter"));
      }
      // validate the optional field `IdmSelector`
      if (jsonObj.get("IdmSelector") != null && !jsonObj.get("IdmSelector").isJsonNull()) {
        JobsIdmSelector.validateJsonObject(jsonObj.getAsJsonObject("IdmSelector"));
      }
      if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
      }
      // validate the optional field `MergeAction`
      if (jsonObj.get("MergeAction") != null && !jsonObj.get("MergeAction").isJsonNull()) {
        JobsAction.validateJsonObject(jsonObj.getAsJsonObject("MergeAction"));
      }
      // validate the optional field `NodesFilter`
      if (jsonObj.get("NodesFilter") != null && !jsonObj.get("NodesFilter").isJsonNull()) {
        JobsNodesSelector.validateJsonObject(jsonObj.getAsJsonObject("NodesFilter"));
      }
      // validate the optional field `NodesSelector`
      if (jsonObj.get("NodesSelector") != null && !jsonObj.get("NodesSelector").isJsonNull()) {
        JobsNodesSelector.validateJsonObject(jsonObj.getAsJsonObject("NodesSelector"));
      }
      if ((jsonObj.get("Timeout") != null && !jsonObj.get("Timeout").isJsonNull()) && !jsonObj.get("Timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timeout").toString()));
      }
      // validate the optional field `TriggerFilter`
      if (jsonObj.get("TriggerFilter") != null && !jsonObj.get("TriggerFilter").isJsonNull()) {
        JobsTriggerFilter.validateJsonObject(jsonObj.getAsJsonObject("TriggerFilter"));
      }
      // validate the optional field `UsersFilter`
      if (jsonObj.get("UsersFilter") != null && !jsonObj.get("UsersFilter").isJsonNull()) {
        JobsUsersSelector.validateJsonObject(jsonObj.getAsJsonObject("UsersFilter"));
      }
      // validate the optional field `UsersSelector`
      if (jsonObj.get("UsersSelector") != null && !jsonObj.get("UsersSelector").isJsonNull()) {
        JobsUsersSelector.validateJsonObject(jsonObj.getAsJsonObject("UsersSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobsAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobsAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobsAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobsAction.class));

       return (TypeAdapter<T>) new TypeAdapter<JobsAction>() {
           @Override
           public void write(JsonWriter out, JobsAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobsAction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobsAction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobsAction
  * @throws IOException if the JSON string is invalid with respect to JobsAction
  */
  public static JobsAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobsAction.class);
  }

 /**
  * Convert an instance of JobsAction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

