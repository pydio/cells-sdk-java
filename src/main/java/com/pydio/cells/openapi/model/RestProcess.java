/*
 * Pydio Cells Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pydio.cells.openapi.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pydio.cells.openapi.JSON;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;

import io.swagger.annotations.ApiModelProperty;

/**
 * RestProcess
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-20T11:40:14.306426+01:00[Europe/Berlin]")
public class RestProcess {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_METRICS_PORT = "MetricsPort";
  @SerializedName(SERIALIZED_NAME_METRICS_PORT)
  private Integer metricsPort;

  public static final String SERIALIZED_NAME_PARENT_I_D = "ParentID";
  @SerializedName(SERIALIZED_NAME_PARENT_I_D)
  private String parentID;

  public static final String SERIALIZED_NAME_PEER_ADDRESS = "PeerAddress";
  @SerializedName(SERIALIZED_NAME_PEER_ADDRESS)
  private String peerAddress;

  public static final String SERIALIZED_NAME_PEER_ID = "PeerId";
  @SerializedName(SERIALIZED_NAME_PEER_ID)
  private String peerId;

  public static final String SERIALIZED_NAME_SERVICES = "Services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<String> services = null;

  public static final String SERIALIZED_NAME_START_TAG = "StartTag";
  @SerializedName(SERIALIZED_NAME_START_TAG)
  private String startTag;

  public RestProcess() {
  }

  public RestProcess ID(String ID) {
    
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getID() {
    return ID;
  }


  public void setID(String ID) {
    this.ID = ID;
  }


  public RestProcess metricsPort(Integer metricsPort) {
    
    this.metricsPort = metricsPort;
    return this;
  }

   /**
   * Get metricsPort
   * @return metricsPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMetricsPort() {
    return metricsPort;
  }


  public void setMetricsPort(Integer metricsPort) {
    this.metricsPort = metricsPort;
  }


  public RestProcess parentID(String parentID) {
    
    this.parentID = parentID;
    return this;
  }

   /**
   * Get parentID
   * @return parentID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getParentID() {
    return parentID;
  }


  public void setParentID(String parentID) {
    this.parentID = parentID;
  }


  public RestProcess peerAddress(String peerAddress) {
    
    this.peerAddress = peerAddress;
    return this;
  }

   /**
   * Get peerAddress
   * @return peerAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPeerAddress() {
    return peerAddress;
  }


  public void setPeerAddress(String peerAddress) {
    this.peerAddress = peerAddress;
  }


  public RestProcess peerId(String peerId) {
    
    this.peerId = peerId;
    return this;
  }

   /**
   * Get peerId
   * @return peerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPeerId() {
    return peerId;
  }


  public void setPeerId(String peerId) {
    this.peerId = peerId;
  }


  public RestProcess services(List<String> services) {
    
    this.services = services;
    return this;
  }

  public RestProcess addServicesItem(String servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * Get services
   * @return services
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getServices() {
    return services;
  }


  public void setServices(List<String> services) {
    this.services = services;
  }


  public RestProcess startTag(String startTag) {
    
    this.startTag = startTag;
    return this;
  }

   /**
   * Get startTag
   * @return startTag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartTag() {
    return startTag;
  }


  public void setStartTag(String startTag) {
    this.startTag = startTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestProcess restProcess = (RestProcess) o;
    return Objects.equals(this.ID, restProcess.ID) &&
        Objects.equals(this.metricsPort, restProcess.metricsPort) &&
        Objects.equals(this.parentID, restProcess.parentID) &&
        Objects.equals(this.peerAddress, restProcess.peerAddress) &&
        Objects.equals(this.peerId, restProcess.peerId) &&
        Objects.equals(this.services, restProcess.services) &&
        Objects.equals(this.startTag, restProcess.startTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, metricsPort, parentID, peerAddress, peerId, services, startTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestProcess {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    metricsPort: ").append(toIndentedString(metricsPort)).append("\n");
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    peerAddress: ").append(toIndentedString(peerAddress)).append("\n");
    sb.append("    peerId: ").append(toIndentedString(peerId)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    startTag: ").append(toIndentedString(startTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("MetricsPort");
    openapiFields.add("ParentID");
    openapiFields.add("PeerAddress");
    openapiFields.add("PeerId");
    openapiFields.add("Services");
    openapiFields.add("StartTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RestProcess
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RestProcess.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestProcess is not found in the empty JSON string", RestProcess.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RestProcess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestProcess` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("ParentID") != null && !jsonObj.get("ParentID").isJsonNull()) && !jsonObj.get("ParentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentID").toString()));
      }
      if ((jsonObj.get("PeerAddress") != null && !jsonObj.get("PeerAddress").isJsonNull()) && !jsonObj.get("PeerAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PeerAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PeerAddress").toString()));
      }
      if ((jsonObj.get("PeerId") != null && !jsonObj.get("PeerId").isJsonNull()) && !jsonObj.get("PeerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PeerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PeerId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Services") != null && !jsonObj.get("Services").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Services` to be an array in the JSON string but got `%s`", jsonObj.get("Services").toString()));
      }
      if ((jsonObj.get("StartTag") != null && !jsonObj.get("StartTag").isJsonNull()) && !jsonObj.get("StartTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StartTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StartTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestProcess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestProcess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestProcess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestProcess.class));

       return (TypeAdapter<T>) new TypeAdapter<RestProcess>() {
           @Override
           public void write(JsonWriter out, RestProcess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestProcess read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestProcess given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestProcess
  * @throws IOException if the JSON string is invalid with respect to RestProcess
  */
  public static RestProcess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestProcess.class);
  }

 /**
  * Convert an instance of RestProcess to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

