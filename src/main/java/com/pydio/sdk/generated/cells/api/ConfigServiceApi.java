/*
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.pydio.sdk.generated.cells.api;

import com.pydio.sdk.generated.cells.ApiCallback;
import com.pydio.sdk.generated.cells.ApiClient;
import com.pydio.sdk.generated.cells.ApiException;
import com.pydio.sdk.generated.cells.ApiResponse;
import com.pydio.sdk.generated.cells.Configuration;
import com.pydio.sdk.generated.cells.Pair;
import com.pydio.sdk.generated.cells.ProgressRequestBody;
import com.pydio.sdk.generated.cells.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pydio.sdk.generated.cells.model.CtlService;
import com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyRequest;
import com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyResponse;
import com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyRequest;
import com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyResponse;
import com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyRequest;
import com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyResponse;
import com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyRequest;
import com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyResponse;
import com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysRequest;
import com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysResponse;
import com.pydio.sdk.generated.cells.model.ObjectDataSource;
import com.pydio.sdk.generated.cells.model.RestConfiguration;
import com.pydio.sdk.generated.cells.model.RestControlServiceRequest;
import com.pydio.sdk.generated.cells.model.RestCreatePeerFolderRequest;
import com.pydio.sdk.generated.cells.model.RestCreatePeerFolderResponse;
import com.pydio.sdk.generated.cells.model.RestDataSourceCollection;
import com.pydio.sdk.generated.cells.model.RestDeleteDataSourceResponse;
import com.pydio.sdk.generated.cells.model.RestDiscoveryResponse;
import com.pydio.sdk.generated.cells.model.RestListPeerFoldersRequest;
import com.pydio.sdk.generated.cells.model.RestListPeersAddressesResponse;
import com.pydio.sdk.generated.cells.model.RestListProcessesRequest;
import com.pydio.sdk.generated.cells.model.RestListProcessesResponse;
import com.pydio.sdk.generated.cells.model.RestListSitesResponse;
import com.pydio.sdk.generated.cells.model.RestListStorageBucketsRequest;
import com.pydio.sdk.generated.cells.model.RestNodesCollection;
import com.pydio.sdk.generated.cells.model.RestOpenApiResponse;
import com.pydio.sdk.generated.cells.model.RestSchedulerActionFormResponse;
import com.pydio.sdk.generated.cells.model.RestSchedulerActionsResponse;
import com.pydio.sdk.generated.cells.model.RestServiceCollection;
import com.pydio.sdk.generated.cells.model.RestVersioningPolicyCollection;
import com.pydio.sdk.generated.cells.model.TreeVersioningPolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigServiceApi {
    private ApiClient apiClient;

    public ConfigServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for configFormsDiscovery
     * @param serviceName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configFormsDiscoveryCall(String serviceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/discovery/forms/{ServiceName}"
            .replaceAll("\\{" + "ServiceName" + "\\}", apiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call configFormsDiscoveryValidateBeforeCall(String serviceName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling configFormsDiscovery(Async)");
        }
        

        com.squareup.okhttp.Call call = configFormsDiscoveryCall(serviceName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Publish Forms definition for building screens in frontend
     * 
     * @param serviceName  (required)
     * @return RestDiscoveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestDiscoveryResponse configFormsDiscovery(String serviceName) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse> resp = configFormsDiscoveryWithHttpInfo(serviceName);
        return resp.getData();
    }

    /**
     * Publish Forms definition for building screens in frontend
     * 
     * @param serviceName  (required)
     * @return ApiResponse&lt;RestDiscoveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse> configFormsDiscoveryWithHttpInfo(String serviceName) throws ApiException {
        com.squareup.okhttp.Call call = configFormsDiscoveryValidateBeforeCall(serviceName, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish Forms definition for building screens in frontend (asynchronously)
     * 
     * @param serviceName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call configFormsDiscoveryAsync(String serviceName, final ApiCallback<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configFormsDiscoveryValidateBeforeCall(serviceName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for controlService
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call controlServiceCall(com.pydio.sdk.generated.cells.model.RestControlServiceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/ctl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call controlServiceValidateBeforeCall(com.pydio.sdk.generated.cells.model.RestControlServiceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling controlService(Async)");
        }
        

        com.squareup.okhttp.Call call = controlServiceCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * [Not Implemented]  Start/Stop a service
     * 
     * @param body  (required)
     * @return CtlService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.CtlService controlService(com.pydio.sdk.generated.cells.model.RestControlServiceRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.CtlService> resp = controlServiceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * [Not Implemented]  Start/Stop a service
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CtlService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.CtlService> controlServiceWithHttpInfo(com.pydio.sdk.generated.cells.model.RestControlServiceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = controlServiceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.CtlService>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * [Not Implemented]  Start/Stop a service (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call controlServiceAsync(RestControlServiceRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.CtlService> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = controlServiceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CtlService>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEncryptionKey
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEncryptionKeyCall(com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEncryptionKeyValidateBeforeCall(com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEncryptionKey(Async)");
        }
        

        com.squareup.okhttp.Call call = createEncryptionKeyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new master key
     * 
     * @param body  (required)
     * @return EncryptionAdminCreateKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyResponse createEncryptionKey(com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyResponse> resp = createEncryptionKeyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new master key
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptionAdminCreateKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyResponse> createEncryptionKeyWithHttpInfo(com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createEncryptionKeyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new master key (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEncryptionKeyAsync(EncryptionAdminCreateKeyRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.EncryptionAdminCreateKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEncryptionKeyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncryptionAdminCreateKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPeerFolder
     * @param peerAddress  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPeerFolderCall(String peerAddress, com.pydio.sdk.generated.cells.model.RestCreatePeerFolderRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/peers/{PeerAddress}"
            .replaceAll("\\{" + "PeerAddress" + "\\}", apiClient.escapeString(peerAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPeerFolderValidateBeforeCall(String peerAddress, com.pydio.sdk.generated.cells.model.RestCreatePeerFolderRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'peerAddress' is set
        if (peerAddress == null) {
            throw new ApiException("Missing the required parameter 'peerAddress' when calling createPeerFolder(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPeerFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = createPeerFolderCall(peerAddress, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a folder on a given path for a given peer (filesystem)
     * 
     * @param peerAddress  (required)
     * @param body  (required)
     * @return RestCreatePeerFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestCreatePeerFolderResponse createPeerFolder(String peerAddress, com.pydio.sdk.generated.cells.model.RestCreatePeerFolderRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestCreatePeerFolderResponse> resp = createPeerFolderWithHttpInfo(peerAddress, body);
        return resp.getData();
    }

    /**
     * Create a folder on a given path for a given peer (filesystem)
     * 
     * @param peerAddress  (required)
     * @param body  (required)
     * @return ApiResponse&lt;RestCreatePeerFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestCreatePeerFolderResponse> createPeerFolderWithHttpInfo(String peerAddress, com.pydio.sdk.generated.cells.model.RestCreatePeerFolderRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createPeerFolderValidateBeforeCall(peerAddress, body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestCreatePeerFolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a folder on a given path for a given peer (filesystem) (asynchronously)
     * 
     * @param peerAddress  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPeerFolderAsync(String peerAddress, RestCreatePeerFolderRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.RestCreatePeerFolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPeerFolderValidateBeforeCall(peerAddress, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestCreatePeerFolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDataSource
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDataSourceCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/datasource/{Name}"
            .replaceAll("\\{" + "Name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDataSourceValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDataSource(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDataSourceCall(name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a datasource
     * 
     * @param name  (required)
     * @return RestDeleteDataSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestDeleteDataSourceResponse deleteDataSource(String name) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestDeleteDataSourceResponse> resp = deleteDataSourceWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * Delete a datasource
     * 
     * @param name  (required)
     * @return ApiResponse&lt;RestDeleteDataSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestDeleteDataSourceResponse> deleteDataSourceWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteDataSourceValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestDeleteDataSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a datasource (asynchronously)
     * 
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDataSourceAsync(String name, final ApiCallback<com.pydio.sdk.generated.cells.model.RestDeleteDataSourceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDataSourceValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestDeleteDataSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEncryptionKey
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEncryptionKeyCall(com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEncryptionKeyValidateBeforeCall(com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteEncryptionKey(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEncryptionKeyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an existing master key
     * 
     * @param body  (required)
     * @return EncryptionAdminDeleteKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyResponse deleteEncryptionKey(com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyResponse> resp = deleteEncryptionKeyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Delete an existing master key
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptionAdminDeleteKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyResponse> deleteEncryptionKeyWithHttpInfo(com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deleteEncryptionKeyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an existing master key (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEncryptionKeyAsync(EncryptionAdminDeleteKeyRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.EncryptionAdminDeleteKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEncryptionKeyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncryptionAdminDeleteKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for endpointsDiscovery
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call endpointsDiscoveryCall(String endpointType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/discovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endpointType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndpointType", endpointType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call endpointsDiscoveryValidateBeforeCall(String endpointType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = endpointsDiscoveryCall(endpointType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Publish available endpoints
     * 
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @return RestDiscoveryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestDiscoveryResponse endpointsDiscovery(String endpointType) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse> resp = endpointsDiscoveryWithHttpInfo(endpointType);
        return resp.getData();
    }

    /**
     * Publish available endpoints
     * 
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @return ApiResponse&lt;RestDiscoveryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse> endpointsDiscoveryWithHttpInfo(String endpointType) throws ApiException {
        com.squareup.okhttp.Call call = endpointsDiscoveryValidateBeforeCall(endpointType, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish available endpoints (asynchronously)
     * 
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call endpointsDiscoveryAsync(String endpointType, final ApiCallback<com.pydio.sdk.generated.cells.model.RestDiscoveryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = endpointsDiscoveryValidateBeforeCall(endpointType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestDiscoveryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportEncryptionKey
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportEncryptionKeyCall(com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportEncryptionKeyValidateBeforeCall(com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling exportEncryptionKey(Async)");
        }
        

        com.squareup.okhttp.Call call = exportEncryptionKeyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export a master key for backup purpose, protected with a password
     * 
     * @param body  (required)
     * @return EncryptionAdminExportKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyResponse exportEncryptionKey(com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyResponse> resp = exportEncryptionKeyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Export a master key for backup purpose, protected with a password
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptionAdminExportKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyResponse> exportEncryptionKeyWithHttpInfo(com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = exportEncryptionKeyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export a master key for backup purpose, protected with a password (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportEncryptionKeyAsync(EncryptionAdminExportKeyRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.EncryptionAdminExportKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportEncryptionKeyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncryptionAdminExportKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConfig
     * @param fullPath  (required)
     * @param data JSON-encoded data to store. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfigCall(String fullPath, String data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/{FullPath}"
            .replaceAll("\\{" + "FullPath" + "\\}", apiClient.escapeString(fullPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (data != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Data", data));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfigValidateBeforeCall(String fullPath, String data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fullPath' is set
        if (fullPath == null) {
            throw new ApiException("Missing the required parameter 'fullPath' when calling getConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = getConfigCall(fullPath, data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generic config Get using a full path in the config tree
     * 
     * @param fullPath  (required)
     * @param data JSON-encoded data to store. (optional)
     * @return RestConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestConfiguration getConfig(String fullPath, String data) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestConfiguration> resp = getConfigWithHttpInfo(fullPath, data);
        return resp.getData();
    }

    /**
     * Generic config Get using a full path in the config tree
     * 
     * @param fullPath  (required)
     * @param data JSON-encoded data to store. (optional)
     * @return ApiResponse&lt;RestConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestConfiguration> getConfigWithHttpInfo(String fullPath, String data) throws ApiException {
        com.squareup.okhttp.Call call = getConfigValidateBeforeCall(fullPath, data, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generic config Get using a full path in the config tree (asynchronously)
     * 
     * @param fullPath  (required)
     * @param data JSON-encoded data to store. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfigAsync(String fullPath, String data, final ApiCallback<com.pydio.sdk.generated.cells.model.RestConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfigValidateBeforeCall(fullPath, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDataSource
     * @param name  (required)
     * @param disabled Whether this data source is disabled or running. (optional)
     * @param storageType Type of underlying storage (LOCAL, S3, AZURE, GCS). (optional, default to LOCAL)
     * @param objectsServiceName Corresponding objects service name (underlying s3 service). (optional)
     * @param objectsHost Corresponding objects service host. (optional)
     * @param objectsPort Corresponding objects service port. (optional)
     * @param objectsSecure Corresponding objects service connection type. (optional)
     * @param objectsBucket Corresponding objects service bucket. (optional)
     * @param objectsBaseFolder Corresponding objects service base folder inside the bucket. (optional)
     * @param apiKey Corresponding objects service api key. (optional)
     * @param apiSecret Corresponding objects service api secret. (optional)
     * @param peerAddress Peer address of the data source. (optional)
     * @param watch Not implemented, whether to watch for underlying changes on the FS. (optional)
     * @param encryptionMode Type of encryption applied before sending data to storage. (optional, default to CLEAR)
     * @param encryptionKey Encryption key used for encrypting data. (optional)
     * @param versioningPolicyName Versioning policy describes how files are kept in the versioning queue. (optional)
     * @param creationDate Data Source creation date. (optional)
     * @param lastSynchronizationDate Data Source last synchronization date. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDataSourceCall(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/datasource/{Name}"
            .replaceAll("\\{" + "Name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (disabled != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Disabled", disabled));
        if (storageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StorageType", storageType));
        if (objectsServiceName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ObjectsServiceName", objectsServiceName));
        if (objectsHost != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ObjectsHost", objectsHost));
        if (objectsPort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ObjectsPort", objectsPort));
        if (objectsSecure != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ObjectsSecure", objectsSecure));
        if (objectsBucket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ObjectsBucket", objectsBucket));
        if (objectsBaseFolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ObjectsBaseFolder", objectsBaseFolder));
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ApiKey", apiKey));
        if (apiSecret != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ApiSecret", apiSecret));
        if (peerAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PeerAddress", peerAddress));
        if (watch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Watch", watch));
        if (encryptionMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EncryptionMode", encryptionMode));
        if (encryptionKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EncryptionKey", encryptionKey));
        if (versioningPolicyName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("VersioningPolicyName", versioningPolicyName));
        if (creationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CreationDate", creationDate));
        if (lastSynchronizationDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("LastSynchronizationDate", lastSynchronizationDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDataSourceValidateBeforeCall(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDataSource(Async)");
        }
        

        com.squareup.okhttp.Call call = getDataSourceCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load datasource information
     * 
     * @param name  (required)
     * @param disabled Whether this data source is disabled or running. (optional)
     * @param storageType Type of underlying storage (LOCAL, S3, AZURE, GCS). (optional, default to LOCAL)
     * @param objectsServiceName Corresponding objects service name (underlying s3 service). (optional)
     * @param objectsHost Corresponding objects service host. (optional)
     * @param objectsPort Corresponding objects service port. (optional)
     * @param objectsSecure Corresponding objects service connection type. (optional)
     * @param objectsBucket Corresponding objects service bucket. (optional)
     * @param objectsBaseFolder Corresponding objects service base folder inside the bucket. (optional)
     * @param apiKey Corresponding objects service api key. (optional)
     * @param apiSecret Corresponding objects service api secret. (optional)
     * @param peerAddress Peer address of the data source. (optional)
     * @param watch Not implemented, whether to watch for underlying changes on the FS. (optional)
     * @param encryptionMode Type of encryption applied before sending data to storage. (optional, default to CLEAR)
     * @param encryptionKey Encryption key used for encrypting data. (optional)
     * @param versioningPolicyName Versioning policy describes how files are kept in the versioning queue. (optional)
     * @param creationDate Data Source creation date. (optional)
     * @param lastSynchronizationDate Data Source last synchronization date. (optional)
     * @return ObjectDataSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.ObjectDataSource getDataSource(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.ObjectDataSource> resp = getDataSourceWithHttpInfo(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate);
        return resp.getData();
    }

    /**
     * Load datasource information
     * 
     * @param name  (required)
     * @param disabled Whether this data source is disabled or running. (optional)
     * @param storageType Type of underlying storage (LOCAL, S3, AZURE, GCS). (optional, default to LOCAL)
     * @param objectsServiceName Corresponding objects service name (underlying s3 service). (optional)
     * @param objectsHost Corresponding objects service host. (optional)
     * @param objectsPort Corresponding objects service port. (optional)
     * @param objectsSecure Corresponding objects service connection type. (optional)
     * @param objectsBucket Corresponding objects service bucket. (optional)
     * @param objectsBaseFolder Corresponding objects service base folder inside the bucket. (optional)
     * @param apiKey Corresponding objects service api key. (optional)
     * @param apiSecret Corresponding objects service api secret. (optional)
     * @param peerAddress Peer address of the data source. (optional)
     * @param watch Not implemented, whether to watch for underlying changes on the FS. (optional)
     * @param encryptionMode Type of encryption applied before sending data to storage. (optional, default to CLEAR)
     * @param encryptionKey Encryption key used for encrypting data. (optional)
     * @param versioningPolicyName Versioning policy describes how files are kept in the versioning queue. (optional)
     * @param creationDate Data Source creation date. (optional)
     * @param lastSynchronizationDate Data Source last synchronization date. (optional)
     * @return ApiResponse&lt;ObjectDataSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.ObjectDataSource> getDataSourceWithHttpInfo(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate) throws ApiException {
        com.squareup.okhttp.Call call = getDataSourceValidateBeforeCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.ObjectDataSource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load datasource information (asynchronously)
     * 
     * @param name  (required)
     * @param disabled Whether this data source is disabled or running. (optional)
     * @param storageType Type of underlying storage (LOCAL, S3, AZURE, GCS). (optional, default to LOCAL)
     * @param objectsServiceName Corresponding objects service name (underlying s3 service). (optional)
     * @param objectsHost Corresponding objects service host. (optional)
     * @param objectsPort Corresponding objects service port. (optional)
     * @param objectsSecure Corresponding objects service connection type. (optional)
     * @param objectsBucket Corresponding objects service bucket. (optional)
     * @param objectsBaseFolder Corresponding objects service base folder inside the bucket. (optional)
     * @param apiKey Corresponding objects service api key. (optional)
     * @param apiSecret Corresponding objects service api secret. (optional)
     * @param peerAddress Peer address of the data source. (optional)
     * @param watch Not implemented, whether to watch for underlying changes on the FS. (optional)
     * @param encryptionMode Type of encryption applied before sending data to storage. (optional, default to CLEAR)
     * @param encryptionKey Encryption key used for encrypting data. (optional)
     * @param versioningPolicyName Versioning policy describes how files are kept in the versioning queue. (optional)
     * @param creationDate Data Source creation date. (optional)
     * @param lastSynchronizationDate Data Source last synchronization date. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDataSourceAsync(String name, Boolean disabled, String storageType, String objectsServiceName, String objectsHost, Integer objectsPort, Boolean objectsSecure, String objectsBucket, String objectsBaseFolder, String apiKey, String apiSecret, String peerAddress, Boolean watch, String encryptionMode, String encryptionKey, String versioningPolicyName, Integer creationDate, Integer lastSynchronizationDate, final ApiCallback<com.pydio.sdk.generated.cells.model.ObjectDataSource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDataSourceValidateBeforeCall(name, disabled, storageType, objectsServiceName, objectsHost, objectsPort, objectsSecure, objectsBucket, objectsBaseFolder, apiKey, apiSecret, peerAddress, watch, encryptionMode, encryptionKey, versioningPolicyName, creationDate, lastSynchronizationDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.ObjectDataSource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVersioningPolicy
     * @param uuid  (required)
     * @param name  (optional)
     * @param description  (optional)
     * @param versionsDataSourceName  (optional)
     * @param versionsDataSourceBucket  (optional)
     * @param maxTotalSize  (optional)
     * @param maxSizePerFile  (optional)
     * @param ignoreFilesGreaterThan  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVersioningPolicyCall(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/versioning/{Uuid}"
            .replaceAll("\\{" + "Uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Name", name));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Description", description));
        if (versionsDataSourceName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("VersionsDataSourceName", versionsDataSourceName));
        if (versionsDataSourceBucket != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("VersionsDataSourceBucket", versionsDataSourceBucket));
        if (maxTotalSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("MaxTotalSize", maxTotalSize));
        if (maxSizePerFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("MaxSizePerFile", maxSizePerFile));
        if (ignoreFilesGreaterThan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IgnoreFilesGreaterThan", ignoreFilesGreaterThan));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVersioningPolicyValidateBeforeCall(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getVersioningPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = getVersioningPolicyCall(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load a given versioning policy
     * 
     * @param uuid  (required)
     * @param name  (optional)
     * @param description  (optional)
     * @param versionsDataSourceName  (optional)
     * @param versionsDataSourceBucket  (optional)
     * @param maxTotalSize  (optional)
     * @param maxSizePerFile  (optional)
     * @param ignoreFilesGreaterThan  (optional)
     * @return TreeVersioningPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.TreeVersioningPolicy getVersioningPolicy(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.TreeVersioningPolicy> resp = getVersioningPolicyWithHttpInfo(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan);
        return resp.getData();
    }

    /**
     * Load a given versioning policy
     * 
     * @param uuid  (required)
     * @param name  (optional)
     * @param description  (optional)
     * @param versionsDataSourceName  (optional)
     * @param versionsDataSourceBucket  (optional)
     * @param maxTotalSize  (optional)
     * @param maxSizePerFile  (optional)
     * @param ignoreFilesGreaterThan  (optional)
     * @return ApiResponse&lt;TreeVersioningPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.TreeVersioningPolicy> getVersioningPolicyWithHttpInfo(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan) throws ApiException {
        com.squareup.okhttp.Call call = getVersioningPolicyValidateBeforeCall(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.TreeVersioningPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load a given versioning policy (asynchronously)
     * 
     * @param uuid  (required)
     * @param name  (optional)
     * @param description  (optional)
     * @param versionsDataSourceName  (optional)
     * @param versionsDataSourceBucket  (optional)
     * @param maxTotalSize  (optional)
     * @param maxSizePerFile  (optional)
     * @param ignoreFilesGreaterThan  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersioningPolicyAsync(String uuid, String name, String description, String versionsDataSourceName, String versionsDataSourceBucket, String maxTotalSize, String maxSizePerFile, String ignoreFilesGreaterThan, final ApiCallback<com.pydio.sdk.generated.cells.model.TreeVersioningPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersioningPolicyValidateBeforeCall(uuid, name, description, versionsDataSourceName, versionsDataSourceBucket, maxTotalSize, maxSizePerFile, ignoreFilesGreaterThan, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TreeVersioningPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importEncryptionKey
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importEncryptionKeyCall(com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importEncryptionKeyValidateBeforeCall(com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importEncryptionKey(Async)");
        }
        

        com.squareup.okhttp.Call call = importEncryptionKeyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import a previously exported master key, requires the password created at export time
     * 
     * @param body  (required)
     * @return EncryptionAdminImportKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyResponse importEncryptionKey(com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyResponse> resp = importEncryptionKeyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Import a previously exported master key, requires the password created at export time
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptionAdminImportKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyResponse> importEncryptionKeyWithHttpInfo(com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = importEncryptionKeyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import a previously exported master key, requires the password created at export time (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importEncryptionKeyAsync(EncryptionAdminImportKeyRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.EncryptionAdminImportKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importEncryptionKeyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncryptionAdminImportKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDataSources
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDataSourcesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/datasource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDataSourcesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listDataSourcesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all defined datasources
     * 
     * @return RestDataSourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestDataSourceCollection listDataSources() throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestDataSourceCollection> resp = listDataSourcesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all defined datasources
     * 
     * @return ApiResponse&lt;RestDataSourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestDataSourceCollection> listDataSourcesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listDataSourcesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestDataSourceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all defined datasources (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDataSourcesAsync(final ApiCallback<com.pydio.sdk.generated.cells.model.RestDataSourceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDataSourcesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestDataSourceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listEncryptionKeys
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEncryptionKeysCall(com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/encryption/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEncryptionKeysValidateBeforeCall(com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listEncryptionKeys(Async)");
        }
        

        com.squareup.okhttp.Call call = listEncryptionKeysCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List registered master keys
     * 
     * @param body  (required)
     * @return EncryptionAdminListKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysResponse listEncryptionKeys(com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysResponse> resp = listEncryptionKeysWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * List registered master keys
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptionAdminListKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysResponse> listEncryptionKeysWithHttpInfo(com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysRequest body) throws ApiException {
        com.squareup.okhttp.Call call = listEncryptionKeysValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List registered master keys (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEncryptionKeysAsync(EncryptionAdminListKeysRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.EncryptionAdminListKeysResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEncryptionKeysValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncryptionAdminListKeysResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPeerFolders
     * @param peerAddress  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPeerFoldersCall(String peerAddress, com.pydio.sdk.generated.cells.model.RestListPeerFoldersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/peers/{PeerAddress}"
            .replaceAll("\\{" + "PeerAddress" + "\\}", apiClient.escapeString(peerAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPeerFoldersValidateBeforeCall(String peerAddress, com.pydio.sdk.generated.cells.model.RestListPeerFoldersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'peerAddress' is set
        if (peerAddress == null) {
            throw new ApiException("Missing the required parameter 'peerAddress' when calling listPeerFolders(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listPeerFolders(Async)");
        }
        

        com.squareup.okhttp.Call call = listPeerFoldersCall(peerAddress, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List folders on a peer, starting from root
     * 
     * @param peerAddress  (required)
     * @param body  (required)
     * @return RestNodesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestNodesCollection listPeerFolders(String peerAddress, com.pydio.sdk.generated.cells.model.RestListPeerFoldersRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestNodesCollection> resp = listPeerFoldersWithHttpInfo(peerAddress, body);
        return resp.getData();
    }

    /**
     * List folders on a peer, starting from root
     * 
     * @param peerAddress  (required)
     * @param body  (required)
     * @return ApiResponse&lt;RestNodesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestNodesCollection> listPeerFoldersWithHttpInfo(String peerAddress, com.pydio.sdk.generated.cells.model.RestListPeerFoldersRequest body) throws ApiException {
        com.squareup.okhttp.Call call = listPeerFoldersValidateBeforeCall(peerAddress, body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestNodesCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List folders on a peer, starting from root (asynchronously)
     * 
     * @param peerAddress  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPeerFoldersAsync(String peerAddress, RestListPeerFoldersRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.RestNodesCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPeerFoldersValidateBeforeCall(peerAddress, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestNodesCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPeersAddresses
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPeersAddressesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/peers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPeersAddressesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listPeersAddressesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all detected peers (servers on which the app is running)
     * 
     * @return RestListPeersAddressesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestListPeersAddressesResponse listPeersAddresses() throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestListPeersAddressesResponse> resp = listPeersAddressesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all detected peers (servers on which the app is running)
     * 
     * @return ApiResponse&lt;RestListPeersAddressesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestListPeersAddressesResponse> listPeersAddressesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listPeersAddressesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestListPeersAddressesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all detected peers (servers on which the app is running) (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPeersAddressesAsync(final ApiCallback<com.pydio.sdk.generated.cells.model.RestListPeersAddressesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPeersAddressesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestListPeersAddressesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProcesses
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProcessesCall(com.pydio.sdk.generated.cells.model.RestListProcessesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/processes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProcessesValidateBeforeCall(com.pydio.sdk.generated.cells.model.RestListProcessesRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listProcesses(Async)");
        }
        

        com.squareup.okhttp.Call call = listProcessesCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List running Processes, with option PeerId or ServiceName filter
     * 
     * @param body  (required)
     * @return RestListProcessesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestListProcessesResponse listProcesses(com.pydio.sdk.generated.cells.model.RestListProcessesRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestListProcessesResponse> resp = listProcessesWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * List running Processes, with option PeerId or ServiceName filter
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestListProcessesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestListProcessesResponse> listProcessesWithHttpInfo(com.pydio.sdk.generated.cells.model.RestListProcessesRequest body) throws ApiException {
        com.squareup.okhttp.Call call = listProcessesValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestListProcessesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List running Processes, with option PeerId or ServiceName filter (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProcessesAsync(RestListProcessesRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.RestListProcessesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProcessesValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestListProcessesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listServices
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING). (optional, default to ANY)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listServicesCall(String statusFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/ctl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statusFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("StatusFilter", statusFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listServicesValidateBeforeCall(String statusFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listServicesCall(statusFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all services and their status
     * 
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING). (optional, default to ANY)
     * @return RestServiceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestServiceCollection listServices(String statusFilter) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestServiceCollection> resp = listServicesWithHttpInfo(statusFilter);
        return resp.getData();
    }

    /**
     * List all services and their status
     * 
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING). (optional, default to ANY)
     * @return ApiResponse&lt;RestServiceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestServiceCollection> listServicesWithHttpInfo(String statusFilter) throws ApiException {
        com.squareup.okhttp.Call call = listServicesValidateBeforeCall(statusFilter, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestServiceCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all services and their status (asynchronously)
     * 
     * @param statusFilter Filter services by a given status (ANY, STOPPED, STOPPING, RUNNING). (optional, default to ANY)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listServicesAsync(String statusFilter, final ApiCallback<com.pydio.sdk.generated.cells.model.RestServiceCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listServicesValidateBeforeCall(statusFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestServiceCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSites
     * @param filter  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSitesCall(String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/sites/{Filter}"
            .replaceAll("\\{" + "Filter" + "\\}", apiClient.escapeString(filter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSitesValidateBeforeCall(String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling listSites(Async)");
        }
        

        com.squareup.okhttp.Call call = listSitesCall(filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List configured sites
     * 
     * @param filter  (required)
     * @return RestListSitesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestListSitesResponse listSites(String filter) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestListSitesResponse> resp = listSitesWithHttpInfo(filter);
        return resp.getData();
    }

    /**
     * List configured sites
     * 
     * @param filter  (required)
     * @return ApiResponse&lt;RestListSitesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestListSitesResponse> listSitesWithHttpInfo(String filter) throws ApiException {
        com.squareup.okhttp.Call call = listSitesValidateBeforeCall(filter, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestListSitesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List configured sites (asynchronously)
     * 
     * @param filter  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSitesAsync(String filter, final ApiCallback<com.pydio.sdk.generated.cells.model.RestListSitesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSitesValidateBeforeCall(filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestListSitesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStorageBuckets
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listStorageBucketsCall(com.pydio.sdk.generated.cells.model.RestListStorageBucketsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/buckets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStorageBucketsValidateBeforeCall(com.pydio.sdk.generated.cells.model.RestListStorageBucketsRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listStorageBuckets(Async)");
        }
        

        com.squareup.okhttp.Call call = listStorageBucketsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Buckets on a given object storage
     * 
     * @param body  (required)
     * @return RestNodesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestNodesCollection listStorageBuckets(com.pydio.sdk.generated.cells.model.RestListStorageBucketsRequest body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestNodesCollection> resp = listStorageBucketsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * List Buckets on a given object storage
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RestNodesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestNodesCollection> listStorageBucketsWithHttpInfo(com.pydio.sdk.generated.cells.model.RestListStorageBucketsRequest body) throws ApiException {
        com.squareup.okhttp.Call call = listStorageBucketsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestNodesCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Buckets on a given object storage (asynchronously)
     * 
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listStorageBucketsAsync(RestListStorageBucketsRequest body, final ApiCallback<com.pydio.sdk.generated.cells.model.RestNodesCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStorageBucketsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestNodesCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listVersioningPolicies
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listVersioningPoliciesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/versioning";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVersioningPoliciesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listVersioningPoliciesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all defined versioning policies
     * 
     * @return RestVersioningPolicyCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestVersioningPolicyCollection listVersioningPolicies() throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestVersioningPolicyCollection> resp = listVersioningPoliciesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all defined versioning policies
     * 
     * @return ApiResponse&lt;RestVersioningPolicyCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestVersioningPolicyCollection> listVersioningPoliciesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listVersioningPoliciesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestVersioningPolicyCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all defined versioning policies (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVersioningPoliciesAsync(final ApiCallback<com.pydio.sdk.generated.cells.model.RestVersioningPolicyCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVersioningPoliciesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestVersioningPolicyCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listVirtualNodes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listVirtualNodesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/virtualnodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listVirtualNodesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listVirtualNodesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all defined virtual nodes
     * 
     * @return RestNodesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestNodesCollection listVirtualNodes() throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestNodesCollection> resp = listVirtualNodesWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all defined virtual nodes
     * 
     * @return ApiResponse&lt;RestNodesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestNodesCollection> listVirtualNodesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listVirtualNodesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestNodesCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all defined virtual nodes (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listVirtualNodesAsync(final ApiCallback<com.pydio.sdk.generated.cells.model.RestNodesCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listVirtualNodesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestNodesCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for openApiDiscovery
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call openApiDiscoveryCall(String endpointType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/discovery/openapi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endpointType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("EndpointType", endpointType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call openApiDiscoveryValidateBeforeCall(String endpointType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = openApiDiscoveryCall(endpointType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Publish available REST APIs
     * 
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @return RestOpenApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestOpenApiResponse openApiDiscovery(String endpointType) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestOpenApiResponse> resp = openApiDiscoveryWithHttpInfo(endpointType);
        return resp.getData();
    }

    /**
     * Publish available REST APIs
     * 
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @return ApiResponse&lt;RestOpenApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestOpenApiResponse> openApiDiscoveryWithHttpInfo(String endpointType) throws ApiException {
        com.squareup.okhttp.Call call = openApiDiscoveryValidateBeforeCall(endpointType, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestOpenApiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish available REST APIs (asynchronously)
     * 
     * @param endpointType Filter result to a specific endpoint type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call openApiDiscoveryAsync(String endpointType, final ApiCallback<com.pydio.sdk.generated.cells.model.RestOpenApiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = openApiDiscoveryValidateBeforeCall(endpointType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestOpenApiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putConfig
     * @param fullPath  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putConfigCall(String fullPath, com.pydio.sdk.generated.cells.model.RestConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/{FullPath}"
            .replaceAll("\\{" + "FullPath" + "\\}", apiClient.escapeString(fullPath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putConfigValidateBeforeCall(String fullPath, com.pydio.sdk.generated.cells.model.RestConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fullPath' is set
        if (fullPath == null) {
            throw new ApiException("Missing the required parameter 'fullPath' when calling putConfig(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = putConfigCall(fullPath, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generic config Put, using a full path in the config tree
     * 
     * @param fullPath  (required)
     * @param body  (required)
     * @return RestConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestConfiguration putConfig(String fullPath, com.pydio.sdk.generated.cells.model.RestConfiguration body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestConfiguration> resp = putConfigWithHttpInfo(fullPath, body);
        return resp.getData();
    }

    /**
     * Generic config Put, using a full path in the config tree
     * 
     * @param fullPath  (required)
     * @param body  (required)
     * @return ApiResponse&lt;RestConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestConfiguration> putConfigWithHttpInfo(String fullPath, com.pydio.sdk.generated.cells.model.RestConfiguration body) throws ApiException {
        com.squareup.okhttp.Call call = putConfigValidateBeforeCall(fullPath, body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generic config Put, using a full path in the config tree (asynchronously)
     * 
     * @param fullPath  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putConfigAsync(String fullPath, com.pydio.sdk.generated.cells.model.RestConfiguration body, final ApiCallback<com.pydio.sdk.generated.cells.model.RestConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putConfigValidateBeforeCall(fullPath, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putDataSource
     * @param name  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putDataSourceCall(String name, com.pydio.sdk.generated.cells.model.ObjectDataSource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/config/datasource/{Name}"
            .replaceAll("\\{" + "Name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putDataSourceValidateBeforeCall(String name, com.pydio.sdk.generated.cells.model.ObjectDataSource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putDataSource(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putDataSource(Async)");
        }
        

        com.squareup.okhttp.Call call = putDataSourceCall(name, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create or update a datasource
     * 
     * @param name  (required)
     * @param body  (required)
     * @return ObjectDataSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.ObjectDataSource putDataSource(String name, com.pydio.sdk.generated.cells.model.ObjectDataSource body) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.ObjectDataSource> resp = putDataSourceWithHttpInfo(name, body);
        return resp.getData();
    }

    /**
     * Create or update a datasource
     * 
     * @param name  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ObjectDataSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.ObjectDataSource> putDataSourceWithHttpInfo(String name, com.pydio.sdk.generated.cells.model.ObjectDataSource body) throws ApiException {
        com.squareup.okhttp.Call call = putDataSourceValidateBeforeCall(name, body, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.ObjectDataSource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create or update a datasource (asynchronously)
     * 
     * @param name  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putDataSourceAsync(String name, com.pydio.sdk.generated.cells.model.ObjectDataSource body, final ApiCallback<com.pydio.sdk.generated.cells.model.ObjectDataSource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putDataSourceValidateBeforeCall(name, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ObjectDataSource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schedulerActionFormDiscovery
     * @param actionName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schedulerActionFormDiscoveryCall(String actionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/scheduler/actions/{ActionName}"
            .replaceAll("\\{" + "ActionName" + "\\}", apiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schedulerActionFormDiscoveryValidateBeforeCall(String actionName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling schedulerActionFormDiscovery(Async)");
        }
        

        com.squareup.okhttp.Call call = schedulerActionFormDiscoveryCall(actionName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Publish scheduler action XML form for building screens in frontend
     * 
     * @param actionName  (required)
     * @return RestSchedulerActionFormResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestSchedulerActionFormResponse schedulerActionFormDiscovery(String actionName) throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestSchedulerActionFormResponse> resp = schedulerActionFormDiscoveryWithHttpInfo(actionName);
        return resp.getData();
    }

    /**
     * Publish scheduler action XML form for building screens in frontend
     * 
     * @param actionName  (required)
     * @return ApiResponse&lt;RestSchedulerActionFormResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestSchedulerActionFormResponse> schedulerActionFormDiscoveryWithHttpInfo(String actionName) throws ApiException {
        com.squareup.okhttp.Call call = schedulerActionFormDiscoveryValidateBeforeCall(actionName, null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestSchedulerActionFormResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish scheduler action XML form for building screens in frontend (asynchronously)
     * 
     * @param actionName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schedulerActionFormDiscoveryAsync(String actionName, final ApiCallback<com.pydio.sdk.generated.cells.model.RestSchedulerActionFormResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schedulerActionFormDiscoveryValidateBeforeCall(actionName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestSchedulerActionFormResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schedulerActionsDiscovery
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schedulerActionsDiscoveryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config/scheduler/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schedulerActionsDiscoveryValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = schedulerActionsDiscoveryCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Publish scheduler registered actions
     * 
     * @return RestSchedulerActionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public com.pydio.sdk.generated.cells.model.RestSchedulerActionsResponse schedulerActionsDiscovery() throws ApiException {
        ApiResponse<com.pydio.sdk.generated.cells.model.RestSchedulerActionsResponse> resp = schedulerActionsDiscoveryWithHttpInfo();
        return resp.getData();
    }

    /**
     * Publish scheduler registered actions
     * 
     * @return ApiResponse&lt;RestSchedulerActionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<com.pydio.sdk.generated.cells.model.RestSchedulerActionsResponse> schedulerActionsDiscoveryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = schedulerActionsDiscoveryValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<com.pydio.sdk.generated.cells.model.RestSchedulerActionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish scheduler registered actions (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schedulerActionsDiscoveryAsync(final ApiCallback<com.pydio.sdk.generated.cells.model.RestSchedulerActionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schedulerActionsDiscoveryValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RestSchedulerActionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
